; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Repos\Galaxy\Galaxy\Engine\window\Window.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??0Window@Engine@@AAE@XZ			; Engine::Window::Window
PUBLIC	??1Window@Engine@@AAE@XZ			; Engine::Window::~Window
PUBLIC	?createWindow@Window@Engine@@SAPAV12@HHPBD@Z	; Engine::Window::createWindow
PUBLIC	?createDefaultWindow@Window@Engine@@SAPAV12@PBD@Z ; Engine::Window::createDefaultWindow
PUBLIC	?__autoclassinit2@Window@Engine@@QAEXI@Z	; Engine::Window::__autoclassinit2
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??_C@_0BC@FHJLEEJB@glfw?5did?5not?5init?$AA@	; `string'
PUBLIC	??_C@_0M@MAJMDDLN@GLEW?5not?5ok?$AA@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_glewInit@0:PROC
EXTRN	_glfwInit:PROC
EXTRN	_glfwCreateWindow:PROC
EXTRN	_glfwDestroyWindow:PROC
EXTRN	_glfwMakeContextCurrent:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exceptions@std@@YAHXZ:PROC		; std::uncaught_exceptions
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0M@MAJMDDLN@GLEW?5not?5ok?$AA@
CONST	SEGMENT
??_C@_0M@MAJMDDLN@GLEW?5not?5ok?$AA@ DB 'GLEW not ok', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FHJLEEJB@glfw?5did?5not?5init?$AA@
CONST	SEGMENT
??_C@_0BC@FHJLEEJB@glfw?5did?5not?5init?$AA@ DB 'glfw did not init', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z$0
__ehfuncinfo$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 140  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 142  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 128  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 129  :  #if _HAS_EXCEPTIONS
; 130  : 			if (_STD uncaught_exceptions() == 0)

  00042	e8 00 00 00 00	 call	 ?uncaught_exceptions@std@@YAHXZ ; std::uncaught_exceptions
  00047	85 c0		 test	 eax, eax
  00049	75 14		 jne	 SHORT $LN1@sentry

; 131  : 				{
; 132  : 				this->_Myostr._Osfx();

  0004b	8b f4		 mov	 esi, esp
  0004d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 133  : 				}
; 134  :  #else /* _HAS_EXCEPTIONS */
; 135  : 			this->_Myostr._Osfx();
; 136  :  #endif /* _HAS_EXCEPTIONS */
; 137  : 			}

  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 			: _Sentry_base(_Ostr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 6e		 je	 SHORT $LN2@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 4e		 je	 SHORT $LN2@sentry
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b7	74 2d		 je	 SHORT $LN2@sentry

; 123  : 				_Ostr.tie()->flush();

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b ca		 mov	 ecx, edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b f4		 mov	 esi, esp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 125  : 			}

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 			if (_Myostr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 108  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 			: _Myostr(_Ostr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 100  : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 102  : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 981  : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 982  : 	_Ostr.put(_Ostr.widen('\n'));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b f4		 mov	 esi, esp
  0003e	0f b6 c0	 movzx	 eax, al
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 983  : 	_Ostr.flush();

  00052	8b f4		 mov	 esi, esp
  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 984  : 	return (_Ostr);

  00064	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 985  : 	}

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv342 = -348						; size = 8
tv290 = -344						; size = 4
tv287 = -344						; size = 8
tv285 = -344						; size = 4
tv328 = -340						; size = 8
tv289 = -340						; size = 4
tv284 = -340						; size = 4
tv286 = -336						; size = 4
tv137 = -336						; size = 4
tv288 = -333						; size = 1
tv283 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 770  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 771  : 	typedef char _Elem;
; 772  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 773  : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 774  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0004b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00054	83 c4 04	 add	 esp, 4
  00057	33 c9		 xor	 ecx, ecx
  00059	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0005c	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 775  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv328[ebp], eax
  00081	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv328[ebp+4], edx
  00087	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp+4], 0
  0008e	7c 79		 jl	 SHORT $LN17@operator
  00090	7f 09		 jg	 SHORT $LN24@operator
  00092	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp], 0
  00099	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  0009b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a6	8b f4		 mov	 esi, esp
  000a8	8b ca		 mov	 ecx, edx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  000bd	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  000c3	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp+4]
  000c9	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000cc	7c 3b		 jl	 SHORT $LN17@operator
  000ce	7f 0b		 jg	 SHORT $LN25@operator
  000d0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv342[ebp]
  000d6	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000d9	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000de	8b 02		 mov	 eax, DWORD PTR [edx]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e3	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000e6	8b f4		 mov	 esi, esp
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000f8	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000fb	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00101	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00107	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00109	0f 57 c0	 xorps	 xmm0, xmm0
  0010c	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  00114	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  0011a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0011d	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00123	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 776  : 		? 0 : _Ostr.width() - _Count;
; 777  : 	const typename _Myos::sentry _Ok(_Ostr);

  00126	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0012d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00132	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 778  : 
; 779  : 	if (!_Ok)

  00139	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0013c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00141	0f b6 c0	 movzx	 eax, al
  00144	85 c0		 test	 eax, eax
  00146	75 0e		 jne	 SHORT $LN8@operator

; 780  : 		_State |= ios_base::badbit;

  00148	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0014b	83 c8 04	 or	 eax, 4
  0014e	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 781  : 	else

  00151	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 782  : 		{	// state okay, insert
; 783  : 		_TRY_IO_BEGIN

  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 784  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0015a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00162	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00165	8b f4		 mov	 esi, esp
  00167	8b ca		 mov	 ecx, edx
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0016f	3b f4		 cmp	 esi, esp
  00171	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00176	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  0017c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00182	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00187	83 f8 40	 cmp	 eax, 64			; 00000040H
  0018a	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 785  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00190	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00192	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00195	83 e8 01	 sub	 eax, 1
  00198	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0019b	83 d9 00	 sbb	 ecx, 0
  0019e	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001a1	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001a4	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a8	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001ae	7f 0a		 jg	 SHORT $LN26@operator
  001b0	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001b4	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 786  : 				if (_Traits::eq_int_type(_Traits::eof(),

  001ba	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c5	8b f4		 mov	 esi, esp
  001c7	8b ca		 mov	 ecx, edx
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d6	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  001dc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001e7	8b f4		 mov	 esi, esp
  001e9	8b ca		 mov	 ecx, edx
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001fe	8b f4		 mov	 esi, esp
  00200	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  00207	50		 push	 eax
  00208	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00214	3b f4		 cmp	 esi, esp
  00216	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021b	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00221	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00227	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0022d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00232	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00238	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0023e	52		 push	 edx
  0023f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0024b	83 c4 08	 add	 esp, 8
  0024e	0f b6 c8	 movzx	 ecx, al
  00251	85 c9		 test	 ecx, ecx
  00253	74 0b		 je	 SHORT $LN12@operator

; 787  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 788  : 					{	// insertion failed, quit
; 789  : 					_State |= ios_base::badbit;

  00255	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00258	83 c8 04	 or	 eax, 4
  0025b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 790  : 					break;

  0025e	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 791  : 					}
; 792  : 
; 793  : 		if (_State == ios_base::goodbit

  00260	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 794  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00265	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00269	75 6e		 jne	 SHORT $LN13@operator
  0026b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0026e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00270	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00273	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00276	8b f4		 mov	 esi, esp
  00278	8b ca		 mov	 ecx, edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0028d	8b f4		 mov	 esi, esp
  0028f	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00292	50		 push	 eax
  00293	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00296	51		 push	 ecx
  00297	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0029a	52		 push	 edx
  0029b	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002a7	3b f4		 cmp	 esi, esp
  002a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ae	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  002b4	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  002ba	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  002c0	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002c3	75 0b		 jne	 SHORT $LN27@operator
  002c5	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp+4]
  002cb	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002ce	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 795  : 			_State |= ios_base::badbit;

  002d0	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002d3	83 c8 04	 or	 eax, 4
  002d6	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 796  : 
; 797  : 		if (_State == ios_base::goodbit)

  002d9	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002dd	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 798  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002e3	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002e5	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002e8	83 e8 01	 sub	 eax, 1
  002eb	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ee	83 d9 00	 sbb	 ecx, 0
  002f1	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002f4	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002f7	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002fb	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  00301	7f 0a		 jg	 SHORT $LN28@operator
  00303	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00307	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 799  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0030d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00310	8b 08		 mov	 ecx, DWORD PTR [eax]
  00312	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00315	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00318	8b f4		 mov	 esi, esp
  0031a	8b ca		 mov	 ecx, edx
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00322	3b f4		 cmp	 esi, esp
  00324	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00329	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  0032f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00332	8b 08		 mov	 ecx, DWORD PTR [eax]
  00334	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00337	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0033a	8b f4		 mov	 esi, esp
  0033c	8b ca		 mov	 ecx, edx
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00344	3b f4		 cmp	 esi, esp
  00346	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  00351	8b f4		 mov	 esi, esp
  00353	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  0035a	50		 push	 eax
  0035b	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00367	3b f4		 cmp	 esi, esp
  00369	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036e	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00374	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0037a	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0038b	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00391	52		 push	 edx
  00392	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0039e	83 c4 08	 add	 esp, 8
  003a1	0f b6 c8	 movzx	 ecx, al
  003a4	85 c9		 test	 ecx, ecx
  003a6	74 0b		 je	 SHORT $LN15@operator

; 800  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 801  : 					{	// insertion failed, quit
; 802  : 					_State |= ios_base::badbit;

  003a8	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003ab	83 c8 04	 or	 eax, 4
  003ae	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 803  : 					break;

  003b1	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 804  : 					}

  003b3	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 805  : 		_Ostr.width(0);

  003b8	8b f4		 mov	 esi, esp
  003ba	6a 00		 push	 0
  003bc	6a 00		 push	 0
  003be	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c9	8b ca		 mov	 ecx, edx
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003d1	3b f4		 cmp	 esi, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 806  : 		_CATCH_IO_(_Ostr)

  003da	8b f4		 mov	 esi, esp
  003dc	6a 01		 push	 1
  003de	6a 04		 push	 4
  003e0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003e8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003eb	8b ca		 mov	 ecx, edx
  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003f3	3b f4		 cmp	 esi, esp
  003f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fa	b8 00 00 00 00	 mov	 eax, $LN23@operator
  003ff	c3		 ret	 0
$LN19@operator:
  00400	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00407	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00409	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 807  : 		}
; 808  : 
; 809  : 	_Ostr.setstate(_State);

  00410	8b f4		 mov	 esi, esp
  00412	6a 00		 push	 0
  00414	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00417	50		 push	 eax
  00418	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0041b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0041d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00420	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00423	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00429	3b f4		 cmp	 esi, esp
  0042b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 810  : 	return (_Ostr);

  00430	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00433	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00439	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00440	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00443	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00448	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 811  : 	}

  0044e	52		 push	 edx
  0044f	8b cd		 mov	 ecx, ebp
  00451	50		 push	 eax
  00452	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00458	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045d	58		 pop	 eax
  0045e	5a		 pop	 edx
  0045f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00462	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00469	59		 pop	 ecx
  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00470	33 cd		 xor	 ecx, ebp
  00472	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00477	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  0047d	3b ec		 cmp	 ebp, esp
  0047f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00484	8b e5		 mov	 esp, ebp
  00486	5d		 pop	 ebp
  00487	c3		 ret	 0
$LN32@operator:
  00488	01 00 00 00	 DD	 1
  0048c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00490	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00494	08 00 00 00	 DD	 8
  00498	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0049c	5f		 DB	 95			; 0000005fH
  0049d	4f		 DB	 79			; 0000004fH
  0049e	6b		 DB	 107			; 0000006bH
  0049f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@Window@Engine@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@Window@Engine@@QAEXI@Z PROC		; Engine::Window::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@Window@Engine@@QAEXI@Z ENDP		; Engine::Window::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\window\window.cpp
;	COMDAT ?createDefaultWindow@Window@Engine@@SAPAV12@PBD@Z
_TEXT	SEGMENT
_title$ = 8						; size = 4
?createDefaultWindow@Window@Engine@@SAPAV12@PBD@Z PROC	; Engine::Window::createDefaultWindow, COMDAT

; 18   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 19   : 		return Window::createWindow(800, 600, title);

  0001e	8b 45 08	 mov	 eax, DWORD PTR _title$[ebp]
  00021	50		 push	 eax
  00022	68 58 02 00 00	 push	 600			; 00000258H
  00027	68 20 03 00 00	 push	 800			; 00000320H
  0002c	e8 00 00 00 00	 call	 ?createWindow@Window@Engine@@SAPAV12@HHPBD@Z ; Engine::Window::createWindow
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 20   : 	}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?createDefaultWindow@Window@Engine@@SAPAV12@PBD@Z ENDP	; Engine::Window::createDefaultWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\window\window.cpp
;	COMDAT ?createWindow@Window@Engine@@SAPAV12@HHPBD@Z
_TEXT	SEGMENT
tv77 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_window$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_title$ = 16						; size = 4
?createWindow@Window@Engine@@SAPAV12@HHPBD@Z PROC	; Engine::Window::createWindow, COMDAT

; 22   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 23   : 		Window* window = new Window;

  0003d	6a 04		 push	 4
  0003f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00044	83 c4 04	 add	 esp, 4
  00047	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR $T2[ebp], 0
  0005b	74 20		 je	 SHORT $LN5@createWind
  0005d	6a 04		 push	 4
  0005f	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00065	e8 00 00 00 00	 call	 ?__autoclassinit2@Window@Engine@@QAEXI@Z
  0006a	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00070	e8 00 00 00 00	 call	 ??0Window@Engine@@AAE@XZ ; Engine::Window::Window
  00075	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv77[ebp], eax
  0007b	eb 0a		 jmp	 SHORT $LN6@createWind
$LN5@createWind:
  0007d	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN6@createWind:
  00087	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv77[ebp]
  0008d	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00093	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009a	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  000a0	89 4d ec	 mov	 DWORD PTR _window$[ebp], ecx

; 24   : 		if (!glfwInit())

  000a3	e8 00 00 00 00	 call	 _glfwInit
  000a8	85 c0		 test	 eax, eax
  000aa	75 2d		 jne	 SHORT $LN2@createWind

; 25   : 		{
; 26   : 			std::cout << "glfw did not init" << std::endl;

  000ac	8b f4		 mov	 esi, esp
  000ae	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FHJLEEJB@glfw?5did?5not?5init?$AA@
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c3	83 c4 08	 add	 esp, 8
  000c6	8b c8		 mov	 ecx, eax
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 27   : 			return nullptr;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 64		 jmp	 SHORT $LN1@createWind
$LN2@createWind:

; 28   : 		}
; 29   : 
; 30   : 		window->m_Windowptr = glfwCreateWindow(width, height, title, NULL, NULL);

  000d9	6a 00		 push	 0
  000db	6a 00		 push	 0
  000dd	8b 45 10	 mov	 eax, DWORD PTR _title$[ebp]
  000e0	50		 push	 eax
  000e1	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  000e4	51		 push	 ecx
  000e5	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 _glfwCreateWindow
  000ee	83 c4 14	 add	 esp, 20			; 00000014H
  000f1	8b 4d ec	 mov	 ecx, DWORD PTR _window$[ebp]
  000f4	89 01		 mov	 DWORD PTR [ecx], eax

; 31   : 		glfwMakeContextCurrent(window->m_Windowptr);

  000f6	8b 45 ec	 mov	 eax, DWORD PTR _window$[ebp]
  000f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 _glfwMakeContextCurrent
  00101	83 c4 04	 add	 esp, 4

; 32   : 
; 33   : 		
; 34   : 		if (glewInit() != GLEW_OK)

  00104	e8 00 00 00 00	 call	 _glewInit@0
  00109	85 c0		 test	 eax, eax
  0010b	74 2d		 je	 SHORT $LN3@createWind

; 35   : 		{
; 36   : 			std::cout << "GLEW not ok" << std::endl;

  0010d	8b f4		 mov	 esi, esp
  0010f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MAJMDDLN@GLEW?5not?5ok?$AA@
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00124	83 c4 08	 add	 esp, 8
  00127	8b c8		 mov	 ecx, eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0012f	3b f4		 cmp	 esi, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : 			return nullptr;

  00136	33 c0		 xor	 eax, eax
  00138	eb 03		 jmp	 SHORT $LN1@createWind
$LN3@createWind:

; 38   : 		}
; 39   : 		return window;

  0013a	8b 45 ec	 mov	 eax, DWORD PTR _window$[ebp]
$LN1@createWind:

; 40   : 	}

  0013d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00140	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00147	59		 pop	 ecx
  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00151	3b ec		 cmp	 ebp, esp
  00153	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z$0:
  00000	6a 04		 push	 4
  00002	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?createWindow@Window@Engine@@SAPAV12@HHPBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?createWindow@Window@Engine@@SAPAV12@HHPBD@Z ENDP	; Engine::Window::createWindow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\window\window.cpp
;	COMDAT ??1Window@Engine@@AAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Window@Engine@@AAE@XZ PROC				; Engine::Window::~Window, COMDAT
; _this$ = ecx

; 14   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 15   : 		glfwDestroyWindow(m_Windowptr);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _glfwDestroyWindow
  0002e	83 c4 04	 add	 esp, 4

; 16   : 	}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??1Window@Engine@@AAE@XZ ENDP				; Engine::Window::~Window
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\window\window.cpp
;	COMDAT ??0Window@Engine@@AAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Window@Engine@@AAE@XZ PROC				; Engine::Window::Window, COMDAT
; _this$ = ecx

; 10   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 9    : 		: m_Windowptr(nullptr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 11   : 	}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0Window@Engine@@AAE@XZ ENDP				; Engine::Window::Window
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 476  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 477  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 478  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 466  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 467  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002a	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00034	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00036	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00040	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 468  : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 404  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 405  : 		return (_CSTD strlen(_First));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _strlen
  00027	83 c4 04	 add	 esp, 4

; 406  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\window\window.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\window\window.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
