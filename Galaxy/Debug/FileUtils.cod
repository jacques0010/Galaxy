; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Repos\Galaxy\Galaxy\Engine\FileUtils\FileUtils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPADQADID@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z	; std::_Container_base12::_Swap_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Deallocate@std@@YAXPAXIII@Z			; std::_Deallocate
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Engine::Util::loadAsString
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ifstream<char,std::char_traits<char> >::is_open
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
PUBLIC	??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
PUBLIC	?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ	; std::fpos<_Mbstatet>::seekpos
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Refancy@PAD$0A@@std@@YAPADPAD@Z		; std::_Refancy<char *,0>
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Unfancy@$$CBD@std@@YAPBDPBD@Z		; std::_Unfancy<char const >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
PUBLIC	?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ; std::_Default_allocate_traits<1>::_Get_bytes
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception?$AA@	; `string'
PUBLIC	??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA ; `std::_Deallocate'::`1'::__LINE__Var
PUBLIC	??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@ ; `string'
PUBLIC	??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@	; `string'
PUBLIC	??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___invalid_parameter_noinfo:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp___errno:PROC
EXTRN	__imp___get_stream_buffer_pointers:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__fgetc:PROC
EXTRN	__imp__fgetpos:PROC
EXTRN	__imp__fputc:PROC
EXTRN	__imp__fsetpos:PROC
EXTRN	__imp___fseeki64:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp__setvbuf:PROC
EXTRN	__imp__ungetc:PROC
EXTRN	__imp___lock_file:PROC
EXTRN	__imp___unlock_file:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exceptions@std@@YAHXZ:PROC		; std::uncaught_exceptions
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?always_noconv@codecvt_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_??Bios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
EXTRN	__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:PROC
EXTRN	__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC		; std::_Fiopen
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	__imp_?_BADOFF@std@@3_JB:QWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	070H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	03H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@
CONST	SEGMENT
??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, '_'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, '<', 00H, '1', 00H, '>', 00H, ':', 00H
	DB	':', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H, '_', 00H, 'b'
	DB	00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p'
	DB	00H, 't', 00H, 'r', 00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@
CONST	SEGMENT
??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@ DB '_Ptr != nullptr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
CONST	SEGMENT
??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' '
	DB	00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.', 00H, 'g'
	DB	00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
CONST	SEGMENT
??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H
	DB	's', 00H, '"', 00H, ' ', 00H, '"', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, ' ', 00H, 'd', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'y', 00H, 'e'
	DB	00H, 'd', 00H, ')', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'(', 00H, 'e', 00H, '.', 00H, 'g', 00H, '.', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o'
	DB	00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'y', 00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@
CONST	SEGMENT
??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@
CONST	SEGMENT
??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	058H
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA DD 08fH ; `std::_Deallocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception?$AA@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0
__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3
__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0
__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3
__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$2
__ehfuncinfo$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 120  : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 122  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 115  : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 			: _Sentry_base(_Istr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 116  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00055	8b f4		 mov	 esi, esp
  00057	0f b6 45 0c	 movzx	 eax, BYTE PTR __Noskip$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00071	88 42 04	 mov	 BYTE PTR [edx+4], al

; 117  : 			}

  00074	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 			if (_Myistr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 101  : 				_Myistr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 102  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 93   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 			: _Myistr(_Istr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 94   : 			if (_Myistr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 95   : 				_Myistr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 96   : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Bytes$ = 8						; size = 4
__Align$ = 12						; size = 4
?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z PROC ; std::_Default_allocate_traits<1>::_Get_bytes, COMDAT

; 55   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 56   : 		(void)_Align;
; 57   : 
; 58   : 		void * _Ptr = nullptr;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 59   :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 60   : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 61   : 			{
; 62   : 			_Ptr = ::operator new(_Bytes, align_val_t{_Align});
; 63   : 			}
; 64   : 		else
; 65   :  #endif /* _HAS_ALIGNED_NEW */
; 66   : 			{
; 67   : 			_Ptr = ::operator new(_Bytes);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 68   : 			}
; 69   : 
; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != nullptr);

  00034	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00038	75 5f		 jne	 SHORT $LN2@Get_bytes
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@
  0003f	85 c0		 test	 eax, eax
  00041	74 04		 je	 SHORT $LN4@Get_bytes
  00043	33 c9		 xor	 ecx, ecx
  00045	75 2d		 jne	 SHORT $LN5@Get_bytes
$LN4@Get_bytes:
  00047	8b f4		 mov	 esi, esp
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00053	6a 00		 push	 0
  00055	6a 46		 push	 70			; 00000046H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005c	6a 02		 push	 2
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00064	83 c4 18	 add	 esp, 24			; 00000018H
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	83 f8 01	 cmp	 eax, 1
  00071	75 01		 jne	 SHORT $LN5@Get_bytes
  00073	cc		 int	 3
$LN5@Get_bytes:
  00074	8b f4		 mov	 esi, esp
  00076	6a 00		 push	 0
  00078	6a 46		 push	 70			; 00000046H
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Get_bytes:

; 71   : 		return (_Ptr);

  00099	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 72   : 		}

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ENDP ; std::_Default_allocate_traits<1>::_Get_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ
_TEXT	SEGMENT
?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ PROC	; std::_Default_allocate_traits<1>::_Fail, COMDAT

; 50   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 51   : 		_Xbad_alloc();

  0001e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Fail:

; 52   : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ENDP	; std::_Default_allocate_traits<1>::_Fail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 319  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  0002c	83 c4 04	 add	 esp, 4

; 320  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 321  : 		{	// construct from forwarded values
; 322  : 		}

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring_insert.h
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
_TEXT	SEGMENT
tv406 = -332						; size = 8
tv290 = -324						; size = 4
tv287 = -324						; size = 8
tv285 = -324						; size = 4
tv134 = -324						; size = 4
tv324 = -320						; size = 8
tv289 = -320						; size = 4
tv284 = -320						; size = 4
tv286 = -316						; size = 4
tv136 = -316						; size = 4
tv288 = -313						; size = 1
tv283 = -313						; size = 1
$T2 = -308						; size = 4
$T3 = -296						; size = 4
$T4 = -284						; size = 4
$T5 = -272						; size = 4
$T6 = -260						; size = 4
__Ok$ = -56						; size = 8
__Pad$ = -40						; size = 4
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned int>, COMDAT

; 24   : 	{	// insert a character-type sequence into _Ostr as if through a basic_string copy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd b4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-332]
  00021	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 25   : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 26   : 	_SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size

  0004b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00053	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00056	8b f4		 mov	 esi, esp
  00058	8b ca		 mov	 ecx, edx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  0006d	89 95 c4 fe ff
	ff		 mov	 DWORD PTR tv324[ebp+4], edx
  00073	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp+4], 0
  0007a	7c 53		 jl	 SHORT $LN17@Insert_str
  0007c	7f 09		 jg	 SHORT $LN24@Insert_str
  0007e	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp], 0
  00085	76 48		 jbe	 SHORT $LN17@Insert_str
$LN24@Insert_str:
  00087	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0008f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00092	8b f4		 mov	 esi, esp
  00094	8b ca		 mov	 ecx, edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  000a6	76 27		 jbe	 SHORT $LN17@Insert_str
  000a8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ad	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000b0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b3	8b f4		 mov	 esi, esp
  000b5	8b ca		 mov	 ecx, edx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000bd	3b f4		 cmp	 esi, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	2b 45 10	 sub	 eax, DWORD PTR __Size$[ebp]
  000c7	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
  000cd	eb 0a		 jmp	 SHORT $LN18@Insert_str
$LN17@Insert_str:
  000cf	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
$LN18@Insert_str:
  000d9	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv134[ebp]
  000df	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax

; 27   : 		? 0 : static_cast<_SizeT>(_Ostr.width()) - _Size;
; 28   : 	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  000e2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e9	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 29   : 
; 30   : 	if (!_Ok)

  000f5	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000f8	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000fd	0f b6 c0	 movzx	 eax, al
  00100	85 c0		 test	 eax, eax
  00102	75 0e		 jne	 SHORT $LN8@Insert_str

; 31   : 		_State |= ios_base::badbit;

  00104	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00107	83 c8 04	 or	 eax, 4
  0010a	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 32   : 	else

  0010d	e9 a5 02 00 00	 jmp	 $LN9@Insert_str
$LN8@Insert_str:

; 33   : 		{	// state okay, insert characters
; 34   : 		_TRY_IO_BEGIN

  00112	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 35   : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00116	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00119	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0011e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00121	8b f4		 mov	 esi, esp
  00123	8b ca		 mov	 ecx, edx
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv136[ebp], eax
  00138	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0013e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00143	83 f8 40	 cmp	 eax, 64			; 00000040H
  00146	0f 84 c0 00 00
	00		 je	 $LN11@Insert_str

; 36   : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0014c	eb 09		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  0014e	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  00151	83 e8 01	 sub	 eax, 1
  00154	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN4@Insert_str:
  00157	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0015b	0f 86 ab 00 00
	00		 jbe	 $LN11@Insert_str

; 37   : 				if (_Traits::eq_int_type(_Traits::eof(),

  00161	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00169	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016c	8b f4		 mov	 esi, esp
  0016e	8b ca		 mov	 ecx, edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  00183	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00186	8b 08		 mov	 ecx, DWORD PTR [eax]
  00188	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0018b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0018e	8b f4		 mov	 esi, esp
  00190	8b ca		 mov	 ecx, edx
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00198	3b f4		 cmp	 esi, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001a5	8b f4		 mov	 esi, esp
  001a7	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  001ae	50		 push	 eax
  001af	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001bb	3b f4		 cmp	 esi, esp
  001bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c2	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  001c8	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  001ce	89 8d fc fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  001d4	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001d9	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  001df	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  001e5	52		 push	 edx
  001e6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  001f2	83 c4 08	 add	 esp, 8
  001f5	0f b6 c8	 movzx	 ecx, al
  001f8	85 c9		 test	 ecx, ecx
  001fa	74 0b		 je	 SHORT $LN12@Insert_str

; 38   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 39   : 					{	// insertion failed, quit
; 40   : 					_State |= ios_base::badbit;

  001fc	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001ff	83 c8 04	 or	 eax, 4
  00202	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 41   : 					break;

  00205	eb 05		 jmp	 SHORT $LN11@Insert_str
$LN12@Insert_str:

; 42   : 					}
; 43   : 
; 44   : 		if (_State == ios_base::goodbit

  00207	e9 42 ff ff ff	 jmp	 $LN2@Insert_str
$LN11@Insert_str:

; 45   : 			&& _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size)

  0020c	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00210	0f 85 89 00 00
	00		 jne	 $LN13@Insert_str
  00216	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00219	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0021e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00221	8b f4		 mov	 esi, esp
  00223	8b ca		 mov	 ecx, edx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0022b	3b f4		 cmp	 esi, esp
  0022d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00232	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  00238	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  0023b	33 c9		 xor	 ecx, ecx
  0023d	8b f4		 mov	 esi, esp
  0023f	51		 push	 ecx
  00240	50		 push	 eax
  00241	8b 55 0c	 mov	 edx, DWORD PTR __Data$[ebp]
  00244	52		 push	 edx
  00245	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  0024b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00251	3b f4		 cmp	 esi, esp
  00253	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00258	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  0025e	89 95 c0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  00264	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00267	33 c9		 xor	 ecx, ecx
  00269	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv406[ebp], eax
  0026f	89 8d b8 fe ff
	ff		 mov	 DWORD PTR tv406[ebp+4], ecx
  00275	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR tv287[ebp]
  0027b	3b 95 b4 fe ff
	ff		 cmp	 edx, DWORD PTR tv406[ebp]
  00281	75 0e		 jne	 SHORT $LN25@Insert_str
  00283	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp+4]
  00289	3b 85 b8 fe ff
	ff		 cmp	 eax, DWORD PTR tv406[ebp+4]
  0028f	74 0e		 je	 SHORT $LN13@Insert_str
$LN25@Insert_str:

; 46   : 				!= (streamsize)_Size)
; 47   : 				_State |= ios_base::badbit;

  00291	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00294	83 c8 04	 or	 eax, 4
  00297	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 48   : 		else

  0029a	e9 c0 00 00 00	 jmp	 $LN14@Insert_str
$LN13@Insert_str:

; 49   : 			for (; 0 < _Pad; --_Pad)	// pad on right

  0029f	eb 09		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  002a1	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  002a4	83 e8 01	 sub	 eax, 1
  002a7	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN7@Insert_str:
  002aa	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002ae	0f 86 ab 00 00
	00		 jbe	 $LN14@Insert_str

; 50   : 				if (_Traits::eq_int_type(_Traits::eof(),

  002b4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002bc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002bf	8b f4		 mov	 esi, esp
  002c1	8b ca		 mov	 ecx, edx
  002c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002c9	3b f4		 cmp	 esi, esp
  002cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d0	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  002d6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002de	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e1	8b f4		 mov	 esi, esp
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  002f8	8b f4		 mov	 esi, esp
  002fa	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  00301	50		 push	 eax
  00302	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00308	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0030e	3b f4		 cmp	 esi, esp
  00310	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00315	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0031b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  00321	89 8d e4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00327	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0032c	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00332	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00338	52		 push	 edx
  00339	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0033f	50		 push	 eax
  00340	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00345	83 c4 08	 add	 esp, 8
  00348	0f b6 c8	 movzx	 ecx, al
  0034b	85 c9		 test	 ecx, ecx
  0034d	74 0b		 je	 SHORT $LN15@Insert_str

; 51   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 52   : 					{	// insertion failed, quit
; 53   : 					_State |= ios_base::badbit;

  0034f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00352	83 c8 04	 or	 eax, 4
  00355	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 54   : 					break;

  00358	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 55   : 					}

  0035a	e9 42 ff ff ff	 jmp	 $LN5@Insert_str
$LN14@Insert_str:

; 56   : 		_Ostr.width(0);

  0035f	8b f4		 mov	 esi, esp
  00361	6a 00		 push	 0
  00363	6a 00		 push	 0
  00365	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00368	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0036d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00370	8b ca		 mov	 ecx, edx
  00372	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00378	3b f4		 cmp	 esi, esp
  0037a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037f	eb 26		 jmp	 SHORT $LN19@Insert_str
__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0:

; 57   : 		_CATCH_IO_(_Ostr)

  00381	8b f4		 mov	 esi, esp
  00383	6a 01		 push	 1
  00385	6a 04		 push	 4
  00387	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0038a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00392	8b ca		 mov	 ecx, edx
  00394	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0039a	3b f4		 cmp	 esi, esp
  0039c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a1	b8 00 00 00 00	 mov	 eax, $LN23@Insert_str
  003a6	c3		 ret	 0
$LN19@Insert_str:
  003a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003ae	eb 07		 jmp	 SHORT $LN9@Insert_str
$LN23@Insert_str:
  003b0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@Insert_str:

; 58   : 		}
; 59   : 
; 60   : 	_Ostr.setstate(_State);

  003b7	8b f4		 mov	 esi, esp
  003b9	6a 00		 push	 0
  003bb	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003be	50		 push	 eax
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003c4	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c7	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003d0	3b f4		 cmp	 esi, esp
  003d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 61   : 	return (_Ostr);

  003d7	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003da	89 85 cc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003e7	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003ea	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003ef	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 62   : 	}

  003f5	52		 push	 edx
  003f6	8b cd		 mov	 ecx, ebp
  003f8	50		 push	 eax
  003f9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@Insert_str
  003ff	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00404	58		 pop	 eax
  00405	5a		 pop	 edx
  00406	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00409	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00410	59		 pop	 ecx
  00411	5f		 pop	 edi
  00412	5e		 pop	 esi
  00413	5b		 pop	 ebx
  00414	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00417	33 cd		 xor	 ecx, ebp
  00419	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0041e	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  00424	3b ec		 cmp	 ebp, esp
  00426	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0042b	8b e5		 mov	 esp, ebp
  0042d	5d		 pop	 ebp
  0042e	c3		 ret	 0
  0042f	90		 npad	 1
$LN29@Insert_str:
  00430	01 00 00 00	 DD	 1
  00434	00 00 00 00	 DD	 $LN28@Insert_str
$LN28@Insert_str:
  00438	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0043c	08 00 00 00	 DD	 8
  00440	00 00 00 00	 DD	 $LN26@Insert_str
$LN26@Insert_str:
  00444	5f		 DB	 95			; 0000005fH
  00445	4f		 DB	 79			; 0000004fH
  00446	6b		 DB	 107			; 0000006bH
  00447	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 140  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 142  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 128  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 129  :  #if _HAS_EXCEPTIONS
; 130  : 			if (_STD uncaught_exceptions() == 0)

  00042	e8 00 00 00 00	 call	 ?uncaught_exceptions@std@@YAHXZ ; std::uncaught_exceptions
  00047	85 c0		 test	 eax, eax
  00049	75 14		 jne	 SHORT $LN1@sentry

; 131  : 				{
; 132  : 				this->_Myostr._Osfx();

  0004b	8b f4		 mov	 esi, esp
  0004d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 133  : 				}
; 134  :  #else /* _HAS_EXCEPTIONS */
; 135  : 			this->_Myostr._Osfx();
; 136  :  #endif /* _HAS_EXCEPTIONS */
; 137  : 			}

  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 			: _Sentry_base(_Ostr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 6e		 je	 SHORT $LN2@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 4e		 je	 SHORT $LN2@sentry
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b7	74 2d		 je	 SHORT $LN2@sentry

; 123  : 				_Ostr.tie()->flush();

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b ca		 mov	 ecx, edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b f4		 mov	 esi, esp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 125  : 			}

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 			if (_Myostr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 108  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 			: _Myostr(_Ostr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 100  : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 102  : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
tv201 = -308						; size = 4
tv199 = -308						; size = 4
tv202 = -304						; size = 4
tv200 = -304						; size = 4
tv65 = -304						; size = 4
$T2 = -296						; size = 4
$T3 = -284						; size = 4
__Meta$4 = -80						; size = 4
__Metadelim$5 = -68					; size = 4
__Ok$ = -56						; size = 8
__Changed$ = -37					; size = 1
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 75   : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-308]
  00021	b9 49 00 00 00	 mov	 ecx, 73			; 00000049H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 76   : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 77   : 
; 78   : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 79   : 	bool _Changed = false;

  0004b	c6 45 db 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 80   : 	const typename _Myis::sentry _Ok(_Istr, true);

  0004f	6a 01		 push	 1
  00051	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00054	50		 push	 eax
  00055	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00058	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 81   : 
; 82   : 	if (_Ok)

  00064	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00067	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  0006c	0f b6 c0	 movzx	 eax, al
  0006f	85 c0		 test	 eax, eax
  00071	0f 84 b5 01 00
	00		 je	 $LN5@getline

; 83   : 		{	// state okay, extract characters
; 84   : 		_TRY_IO_BEGIN

  00077	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 85   : 		_Str.erase();

  0007b	6a 00		 push	 0
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00080	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 86   : 		const typename _Traits::int_type _Metadelim =
; 87   : 			_Traits::to_int_type(_Delim);

  00085	8d 45 10	 lea	 eax, DWORD PTR __Delim$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0008e	83 c4 04	 add	 esp, 4
  00091	89 45 bc	 mov	 DWORD PTR __Metadelim$5[ebp], eax

; 88   : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  00094	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0009c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009f	8b f4		 mov	 esi, esp
  000a1	8b ca		 mov	 ecx, edx
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  000b6	8b f4		 mov	 esi, esp
  000b8	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv199[ebp], eax
  000d1	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR tv199[ebp]
  000d7	89 45 b0	 mov	 DWORD PTR __Meta$4[ebp], eax
  000da	eb 46		 jmp	 SHORT $LN4@getline
$LN2@getline:

; 89   : 
; 90   : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000dc	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000e7	8b f4		 mov	 esi, esp
  000e9	8b ca		 mov	 ecx, edx
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv200[ebp], eax
  000fe	8b f4		 mov	 esi, esp
  00100	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv200[ebp]
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv201[ebp], eax
  00119	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR tv201[ebp]
  0011f	89 45 b0	 mov	 DWORD PTR __Meta$4[ebp], eax
$LN4@getline:

; 91   : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00122	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00127	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0012d	8d 45 b0	 lea	 eax, DWORD PTR __Meta$4[ebp]
  00130	50		 push	 eax
  00131	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0013d	83 c4 08	 add	 esp, 8
  00140	0f b6 d0	 movzx	 edx, al
  00143	85 d2		 test	 edx, edx
  00145	74 13		 je	 SHORT $LN7@getline

; 92   : 				{	// end of file, quit
; 93   : 				_State |= ios_base::eofbit;

  00147	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0014a	83 c8 01	 or	 eax, 1
  0014d	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 94   : 				break;

  00150	e9 9f 00 00 00	 jmp	 $LN3@getline
  00155	e9 95 00 00 00	 jmp	 $LN8@getline
$LN7@getline:

; 95   : 				}
; 96   : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  0015a	8d 45 bc	 lea	 eax, DWORD PTR __Metadelim$5[ebp]
  0015d	50		 push	 eax
  0015e	8d 4d b0	 lea	 ecx, DWORD PTR __Meta$4[ebp]
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00167	83 c4 08	 add	 esp, 8
  0016a	0f b6 d0	 movzx	 edx, al
  0016d	85 d2		 test	 edx, edx
  0016f	74 3f		 je	 SHORT $LN9@getline

; 97   : 				{	// got a delimiter, discard it and quit
; 98   : 				_Changed = true;

  00171	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 99   : 				_Istr.rdbuf()->sbumpc();

  00175	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017a	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0017d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00180	8b f4		 mov	 esi, esp
  00182	8b ca		 mov	 ecx, edx
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0018a	3b f4		 cmp	 esi, esp
  0018c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00191	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv202[ebp], eax
  00197	8b f4		 mov	 esi, esp
  00199	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv202[ebp]
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001a5	3b f4		 cmp	 esi, esp
  001a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 100  : 				break;

  001ac	eb 46		 jmp	 SHORT $LN3@getline
  001ae	eb 3f		 jmp	 SHORT $LN8@getline
$LN9@getline:

; 101  : 				}
; 102  : 			else if (_Str.max_size() <= _Str.size())

  001b0	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001b3	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001b8	8b f0		 mov	 esi, eax
  001ba	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001bd	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  001c2	3b c6		 cmp	 eax, esi
  001c4	77 0d		 ja	 SHORT $LN11@getline

; 103  : 				{	// string too large, quit
; 104  : 				_State |= ios_base::failbit;

  001c6	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001c9	83 c8 02	 or	 eax, 2
  001cc	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 105  : 				break;

  001cf	eb 23		 jmp	 SHORT $LN3@getline

; 106  : 				}
; 107  : 			else

  001d1	eb 1c		 jmp	 SHORT $LN8@getline
$LN11@getline:

; 108  : 				{	// got a character, add it to string
; 109  : 				_Str += _Traits::to_char_type(_Meta);

  001d3	8d 45 b0	 lea	 eax, DWORD PTR __Meta$4[ebp]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  001dc	83 c4 04	 add	 esp, 4
  001df	0f b6 c8	 movzx	 ecx, al
  001e2	51		 push	 ecx
  001e3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001e6	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 110  : 				_Changed = true;

  001eb	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1
$LN8@getline:

; 111  : 				}

  001ef	e9 e8 fe ff ff	 jmp	 $LN2@getline
$LN3@getline:
  001f4	eb 26		 jmp	 SHORT $LN15@getline
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:

; 112  : 		_CATCH_IO_(_Istr)

  001f6	8b f4		 mov	 esi, esp
  001f8	6a 01		 push	 1
  001fa	6a 04		 push	 4
  001fc	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  001ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00201	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00204	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00207	8b ca		 mov	 ecx, edx
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0020f	3b f4		 cmp	 esi, esp
  00211	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00216	b8 00 00 00 00	 mov	 eax, $LN19@getline
  0021b	c3		 ret	 0
$LN15@getline:
  0021c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00223	eb 07		 jmp	 SHORT $LN5@getline
$LN19@getline:
  00225	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN5@getline:

; 113  : 		}
; 114  : 
; 115  : 	if (!_Changed)

  0022c	0f b6 45 db	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00230	85 c0		 test	 eax, eax
  00232	75 09		 jne	 SHORT $LN13@getline

; 116  : 		_State |= ios_base::failbit;

  00234	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00237	83 c8 02	 or	 eax, 2
  0023a	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@getline:

; 117  : 	_Istr.setstate(_State);

  0023d	8b f4		 mov	 esi, esp
  0023f	6a 00		 push	 0
  00241	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00244	50		 push	 eax
  00245	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00248	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0024d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00256	3b f4		 cmp	 esi, esp
  00258	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 118  : 	return (_Istr);

  0025d	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00260	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00266	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0026d	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00270	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00275	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 119  : 	}

  0027b	52		 push	 edx
  0027c	8b cd		 mov	 ecx, ebp
  0027e	50		 push	 eax
  0027f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@getline
  00285	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0028a	58		 pop	 eax
  0028b	5a		 pop	 edx
  0028c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0028f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00296	59		 pop	 ecx
  00297	5f		 pop	 edi
  00298	5e		 pop	 esi
  00299	5b		 pop	 ebx
  0029a	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029d	33 cd		 xor	 ecx, ebp
  0029f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a4	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  002aa	3b ec		 cmp	 ebp, esp
  002ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b1	8b e5		 mov	 esp, ebp
  002b3	5d		 pop	 ebp
  002b4	c3		 ret	 0
  002b5	0f 1f 00	 npad	 3
$LN25@getline:
  002b8	03 00 00 00	 DD	 3
  002bc	00 00 00 00	 DD	 $LN24@getline
$LN24@getline:
  002c0	c8 ff ff ff	 DD	 -56			; ffffffc8H
  002c4	08 00 00 00	 DD	 8
  002c8	00 00 00 00	 DD	 $LN20@getline
  002cc	bc ff ff ff	 DD	 -68			; ffffffbcH
  002d0	04 00 00 00	 DD	 4
  002d4	00 00 00 00	 DD	 $LN21@getline
  002d8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  002dc	04 00 00 00	 DD	 4
  002e0	00 00 00 00	 DD	 $LN22@getline
$LN22@getline:
  002e4	5f		 DB	 95			; 0000005fH
  002e5	4d		 DB	 77			; 0000004dH
  002e6	65		 DB	 101			; 00000065H
  002e7	74		 DB	 116			; 00000074H
  002e8	61		 DB	 97			; 00000061H
  002e9	00		 DB	 0
$LN21@getline:
  002ea	5f		 DB	 95			; 0000005fH
  002eb	4d		 DB	 77			; 0000004dH
  002ec	65		 DB	 101			; 00000065H
  002ed	74		 DB	 116			; 00000074H
  002ee	61		 DB	 97			; 00000061H
  002ef	64		 DB	 100			; 00000064H
  002f0	65		 DB	 101			; 00000065H
  002f1	6c		 DB	 108			; 0000006cH
  002f2	69		 DB	 105			; 00000069H
  002f3	6d		 DB	 109			; 0000006dH
  002f4	00		 DB	 0
$LN20@getline:
  002f5	5f		 DB	 95			; 0000005fH
  002f6	4f		 DB	 79			; 0000004fH
  002f7	6b		 DB	 107			; 0000006bH
  002f8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::move<std::basic_istream<char,std::char_traits<char> > &>, COMDAT

; 1552 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1553 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1554 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::move<std::basic_istream<char,std::char_traits<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>, COMDAT
; _this$ = ecx

; 3626 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3627 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3628 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3629 : 		const size_type _Old_size = _My_data._Mysize;

  00038	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3630 : 		if (max_size() - _Old_size < _Size_increase)

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00049	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004c	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0004f	73 05		 jae	 SHORT $LN2@Reallocate

; 3631 : 			{
; 3632 : 			_Xlen();	// result too long

  00051	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3633 : 			}
; 3634 : 
; 3635 : 		const size_type _New_size = _Old_size + _Size_increase;

  00056	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00059	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005c	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 3636 : 		const size_type _Old_capacity = _My_data._Myres;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3637 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00068	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00074	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3638 : 		auto& _Al = this->_Getal();

  00077	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007f	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 3639 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00082	33 c0		 xor	 eax, eax
  00084	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	83 c1 01	 add	 ecx, 1
  0008a	0f 92 c0	 setb	 al
  0008d	f7 d8		 neg	 eax
  0008f	0b c1		 or	 eax, ecx
  00091	50		 push	 eax
  00092	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00095	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009a	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3640 : 		_My_data._Orphan_all();

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3641 : 		_My_data._Mysize = _New_size;

  000a5	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3642 : 		_My_data._Myres = _New_capacity;

  000ae	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b1	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3643 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b7	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3644 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c6	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000ca	72 49		 jb	 SHORT $LN3@Reallocate

; 3645 : 			{
; 3646 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3647 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d5	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d dc	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 88	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000e7	83 c4 04	 add	 esp, 4
  000ea	50		 push	 eax
  000eb	8b 45 94	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000ee	50		 push	 eax
  000ef	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f2	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 3648 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000f7	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000fa	83 c0 01	 add	 eax, 1
  000fd	50		 push	 eax
  000fe	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  00101	51		 push	 ecx
  00102	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00105	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3649 : 			_My_data._Bx._Ptr = _New_ptr;

  0010a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0010d	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00110	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3650 : 			}
; 3651 : 		else

  00113	eb 3c		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3652 : 			{
; 3653 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00115	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  00119	50		 push	 eax
  0011a	8b 4d dc	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0011d	51		 push	 ecx
  0011e	8b 55 e8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00121	83 c2 04	 add	 edx, 4
  00124	52		 push	 edx
  00125	8b 45 94	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  00128	50		 push	 eax
  00129	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0012c	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 3654 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  00131	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00134	50		 push	 eax
  00135	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00138	83 c1 04	 add	 ecx, 4
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00141	83 c4 04	 add	 esp, 4
  00144	50		 push	 eax
  00145	8b 55 ac	 mov	 edx, DWORD PTR __Al$[ebp]
  00148	52		 push	 edx
  00149	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3655 : 			}
; 3656 : 
; 3657 : 		return (*this);

  00151	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3658 : 		}

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 0c 00	 ret	 12			; 0000000cH
  00185	0f 1f 00	 npad	 3
$LN8@Reallocate:
  00188	01 00 00 00	 DD	 1
  0018c	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00190	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00194	04 00 00 00	 DD	 4
  00198	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  0019c	5f		 DB	 95			; 0000005fH
  0019d	4e		 DB	 78			; 0000004eH
  0019e	65		 DB	 101			; 00000065H
  0019f	77		 DB	 119			; 00000077H
  001a0	5f		 DB	 95			; 0000005fH
  001a1	70		 DB	 112			; 00000070H
  001a2	74		 DB	 116			; 00000074H
  001a3	72		 DB	 114			; 00000072H
  001a4	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ch$ = 20						; size = 1
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z PROC ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator(), COMDAT
; _this$ = ecx

; 2988 : 				const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2989 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2990 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);

  00037	8d 45 14	 lea	 eax, DWORD PTR __Ch$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0003e	03 4d 10	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00047	83 c4 08	 add	 esp, 8

; 2991 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0004a	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00051	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00057	50		 push	 eax
  00058	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0005b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0005e	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00068	83 c4 08	 add	 esp, 8

; 2992 : 			}, _Ch);

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 10 00	 ret	 16			; 00000010H
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z ENDP ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 1045 : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$_Unfancy@$$CBD@std@@YAPBDPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z PROC			; std::_Unfancy<char const >, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z ENDP			; std::_Unfancy<char const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 08		 push	 8
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00049	89 11		 mov	 DWORD PTR [ecx], edx
  0004b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1317 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1318 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

  0001e	6a 01		 push	 1
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1319 : 	}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 950  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  : 		_Ptr->~_Uty();
; 952  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 936  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 937  : 		_Deallocate(_Ptr, _Count, sizeof(value_type), alignof(value_type));

  0001e	6a 04		 push	 4
  00020	6a 08		 push	 8
  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 04		 push	 4
  00025	6a 08		 push	 8
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z
_TEXT	SEGMENT
__Ptr$1 = -44						; size = 4
__Ptr_container$2 = -32					; size = 4
__Block_size$3 = -20					; size = 4
__User_size$ = -8					; size = 4
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Align$ = 16						; size = 4
??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z PROC ; std::_Allocate<std::_Default_allocate_traits<1> >, COMDAT

; 77   : 	{	// allocate storage for _Count elements of size _Sz with alignment _Align

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 78   : 	if (_Count == 0)

  0001e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00022	75 07		 jne	 SHORT $LN2@Allocate

; 79   : 		{
; 80   : 		return (nullptr);

  00024	33 c0		 xor	 eax, eax
  00026	e9 04 01 00 00	 jmp	 $LN7@Allocate
$LN2@Allocate:

; 81   : 		}
; 82   : 
; 83   : 	// check overflow of multiply
; 84   : 	if (static_cast<size_t>(-1) / _Sz < _Count)

  0002b	83 c8 ff	 or	 eax, -1
  0002e	33 d2		 xor	 edx, edx
  00030	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00033	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00036	73 05		 jae	 SHORT $LN3@Allocate

; 85   : 		{
; 86   : 		_Traits::_Fail();	// report no memory

  00038	e8 00 00 00 00	 call	 ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
$LN3@Allocate:

; 87   : 		}
; 88   : 
; 89   : 	const size_t _User_size = _Count * _Sz;

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00040	0f af 45 0c	 imul	 eax, DWORD PTR __Sz$[ebp]
  00044	89 45 f8	 mov	 DWORD PTR __User_size$[ebp], eax

; 90   : 
; 91   : #if defined(_M_IX86) || defined(_M_X64)
; 92   : 	// Boost the alignment of big allocations to help autovectorization.
; 93   :  #pragma warning(push)
; 94   :  #pragma warning(disable: 4127) // conditional expression is constant
; 95   :  #pragma warning(disable: 6326) // Potential comparison of a constant with another constant
; 96   : 	if (_Traits::_Try_aligned_allocation && _User_size >= _Big_allocation_threshold)

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 cb 00 00
	00		 je	 $LN4@Allocate
  00054	81 7d f8 00 10
	00 00		 cmp	 DWORD PTR __User_size$[ebp], 4096 ; 00001000H
  0005b	0f 82 be 00 00
	00		 jb	 $LN4@Allocate

; 97   : 		{
; 98   :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 99   : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 100  : 			{	// allocation will use aligned new
; 101  : 			if /* constexpr */ (__STDCPP_DEFAULT_NEW_ALIGNMENT__ * 2 >= _Big_allocation_alignment)
; 102  : 				{	// There are no valid alignments between __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 103  : 					// and _Big_allocation_alignment; the below conditional is dead.
; 104  : 				}
; 105  : 			else
; 106  : 				{
; 107  : 				if (_Align < _Big_allocation_alignment)
; 108  : 					{	// boost alignment
; 109  : 					_Align = _Big_allocation_alignment;
; 110  : 					}
; 111  : 				}
; 112  : 			}
; 113  : 		else
; 114  :  #endif /* _HAS_ALIGNED_NEW */
; 115  : 			{	// allocation will use unaligned new; boost alignment manually
; 116  : 			const size_t _Block_size = _Non_user_size + _User_size;

  00061	8b 45 f8	 mov	 eax, DWORD PTR __User_size$[ebp]
  00064	83 c0 27	 add	 eax, 39			; 00000027H
  00067	89 45 ec	 mov	 DWORD PTR __Block_size$3[ebp], eax

; 117  : 			if (_Block_size <= _User_size)

  0006a	8b 45 ec	 mov	 eax, DWORD PTR __Block_size$3[ebp]
  0006d	3b 45 f8	 cmp	 eax, DWORD PTR __User_size$[ebp]
  00070	77 05		 ja	 SHORT $LN5@Allocate

; 118  : 				{
; 119  : 				_Traits::_Fail();	// report no memory

  00072	e8 00 00 00 00	 call	 ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
$LN5@Allocate:

; 120  : 				}
; 121  : 
; 122  : 			const uintptr_t _Ptr_container =
; 123  : 				reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00077	8b 45 ec	 mov	 eax, DWORD PTR __Block_size$3[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00080	83 c4 04	 add	 esp, 4
  00083	89 45 e0	 mov	 DWORD PTR __Ptr_container$2[ebp], eax

; 124  : 			_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00086	83 7d e0 00	 cmp	 DWORD PTR __Ptr_container$2[ebp], 0
  0008a	75 5f		 jne	 SHORT $LN6@Allocate
  0008c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
  00091	85 c0		 test	 eax, eax
  00093	74 04		 je	 SHORT $LN8@Allocate
  00095	33 c9		 xor	 ecx, ecx
  00097	75 2d		 jne	 SHORT $LN9@Allocate
$LN8@Allocate:
  00099	8b f4		 mov	 esi, esp
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  000a5	6a 00		 push	 0
  000a7	6a 7c		 push	 124			; 0000007cH
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000ae	6a 02		 push	 2
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000b6	83 c4 18	 add	 esp, 24			; 00000018H
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	83 f8 01	 cmp	 eax, 1
  000c3	75 01		 jne	 SHORT $LN9@Allocate
  000c5	cc		 int	 3
$LN9@Allocate:
  000c6	8b f4		 mov	 esi, esp
  000c8	6a 00		 push	 0
  000ca	6a 7c		 push	 124			; 0000007cH
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000e1	83 c4 14	 add	 esp, 20			; 00000014H
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Allocate:

; 125  : 			void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 126  : 				& ~(_Big_allocation_alignment - 1));

  000eb	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$2[ebp]
  000ee	83 c0 27	 add	 eax, 39			; 00000027H
  000f1	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000f4	89 45 d4	 mov	 DWORD PTR __Ptr$1[ebp], eax

; 127  : 			static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000f7	b8 04 00 00 00	 mov	 eax, 4
  000fc	6b c8 ff	 imul	 ecx, eax, -1
  000ff	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$1[ebp]
  00102	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$2[ebp]
  00105	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 128  : 
; 129  :  #ifdef _DEBUG
; 130  : 			static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	6b c8 fe	 imul	 ecx, eax, -2
  00110	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$1[ebp]
  00113	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 131  :  #endif /* _DEBUG */
; 132  : 			return (_Ptr);

  0011a	8b 45 d4	 mov	 eax, DWORD PTR __Ptr$1[ebp]
  0011d	eb 10		 jmp	 SHORT $LN7@Allocate
$LN4@Allocate:

; 133  : 			}
; 134  : 		}
; 135  :  #pragma warning(pop)
; 136  : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	return (_Traits::_Get_bytes(_User_size, _Align));

  0011f	8b 45 10	 mov	 eax, DWORD PTR __Align$[ebp]
  00122	50		 push	 eax
  00123	8b 4d f8	 mov	 ecx, DWORD PTR __User_size$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ; std::_Default_allocate_traits<1>::_Get_bytes
  0012c	83 c4 08	 add	 esp, 8
$LN7@Allocate:

; 139  : 	}

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ENDP ; std::_Allocate<std::_Default_allocate_traits<1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	89 02		 mov	 DWORD PTR [edx], eax

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 1
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>, COMDAT
; _this$ = ecx

; 3626 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3627 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3628 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3629 : 		const size_type _Old_size = _My_data._Mysize;

  00038	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3630 : 		if (max_size() - _Old_size < _Size_increase)

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00049	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004c	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0004f	73 05		 jae	 SHORT $LN2@Reallocate

; 3631 : 			{
; 3632 : 			_Xlen();	// result too long

  00051	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3633 : 			}
; 3634 : 
; 3635 : 		const size_type _New_size = _Old_size + _Size_increase;

  00056	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00059	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005c	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 3636 : 		const size_type _Old_capacity = _My_data._Myres;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3637 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00068	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00074	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3638 : 		auto& _Al = this->_Getal();

  00077	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007f	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 3639 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00082	33 c0		 xor	 eax, eax
  00084	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	83 c1 01	 add	 ecx, 1
  0008a	0f 92 c0	 setb	 al
  0008d	f7 d8		 neg	 eax
  0008f	0b c1		 or	 eax, ecx
  00091	50		 push	 eax
  00092	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00095	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009a	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3640 : 		_My_data._Orphan_all();

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3641 : 		_My_data._Mysize = _New_size;

  000a5	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3642 : 		_My_data._Myres = _New_capacity;

  000ae	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b1	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3643 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b7	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3644 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c6	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000ca	72 4d		 jb	 SHORT $LN3@Reallocate

; 3645 : 			{
; 3646 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3647 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d5	0f b6 45 14	 movzx	 eax, BYTE PTR _<_Args_1>$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 dc	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000e1	52		 push	 edx
  000e2	8b 45 88	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000eb	83 c4 04	 add	 esp, 4
  000ee	50		 push	 eax
  000ef	8b 4d 94	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000f2	51		 push	 ecx
  000f3	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f6	e8 00 00 00 00	 call	 ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()

; 3648 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000fb	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000fe	83 c0 01	 add	 eax, 1
  00101	50		 push	 eax
  00102	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  00105	51		 push	 ecx
  00106	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00109	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3649 : 			_My_data._Bx._Ptr = _New_ptr;

  0010e	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00111	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00114	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3650 : 			}
; 3651 : 		else

  00117	eb 40		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3652 : 			{
; 3653 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00119	0f b6 45 14	 movzx	 eax, BYTE PTR _<_Args_1>$[ebp]
  0011d	50		 push	 eax
  0011e	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00121	51		 push	 ecx
  00122	8b 55 dc	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00125	52		 push	 edx
  00126	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00129	83 c0 04	 add	 eax, 4
  0012c	50		 push	 eax
  0012d	8b 4d 94	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  00130	51		 push	 ecx
  00131	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00134	e8 00 00 00 00	 call	 ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()

; 3654 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  00139	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00140	83 c1 04	 add	 ecx, 4
  00143	51		 push	 ecx
  00144	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00149	83 c4 04	 add	 esp, 4
  0014c	50		 push	 eax
  0014d	8b 55 ac	 mov	 edx, DWORD PTR __Al$[ebp]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3655 : 			}
; 3656 : 
; 3657 : 		return (*this);

  00159	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3658 : 		}

  0015c	52		 push	 edx
  0015d	8b cd		 mov	 ecx, ebp
  0015f	50		 push	 eax
  00160	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00166	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016b	58		 pop	 eax
  0016c	5a		 pop	 edx
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00173	33 cd		 xor	 ecx, ebp
  00175	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017a	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00180	3b ec		 cmp	 ebp, esp
  00182	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 10 00	 ret	 16			; 00000010H
  0018d	0f 1f 00	 npad	 3
$LN8@Reallocate:
  00190	01 00 00 00	 DD	 1
  00194	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00198	a0 ff ff ff	 DD	 -96			; ffffffa0H
  0019c	04 00 00 00	 DD	 4
  001a0	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  001a4	5f		 DB	 95			; 0000005fH
  001a5	4e		 DB	 78			; 0000004eH
  001a6	65		 DB	 101			; 00000065H
  001a7	77		 DB	 119			; 00000077H
  001a8	5f		 DB	 95			; 0000005fH
  001a9	70		 DB	 112			; 00000070H
  001aa	74		 DB	 116			; 00000074H
  001ab	72		 DB	 114			; 00000072H
  001ac	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Count$ = 20						; size = 4
__Ch$ = 24						; size = 1
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z PROC ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator(), COMDAT
; _this$ = ecx

; 2374 : 				const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2375 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2376 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  00037	0f b6 45 18	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00043	03 55 10	 add	 edx, DWORD PTR __Old_size$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2377 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0004f	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00056	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00060	03 4d 14	 add	 ecx, DWORD PTR __Count$[ebp]
  00063	03 4d 08	 add	 ecx, DWORD PTR __New_ptr$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0006c	83 c4 08	 add	 esp, 8

; 2378 : 			}, _Count, _Ch));

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 14 00	 ret	 20			; 00000014H
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ENDP ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -72					; size = 4
__Al$ = -60						; size = 4
__New_capacity$ = -48					; size = 4
__Old_capacity$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3594 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3595 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3596 : 		if (_New_size > max_size())

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00038	76 05		 jbe	 SHORT $LN2@Reallocate

; 3597 : 			{
; 3598 : 			_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3599 : 			}
; 3600 : 
; 3601 : 		auto& _My_data = this->_Get_data();

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00047	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3602 : 		const size_type _Old_capacity = _My_data._Myres;

  0004a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	89 4d dc	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3603 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00053	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005f	89 45 d0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3604 : 		auto& _Al = this->_Getal();

  00062	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0006a	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 3605 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0006d	33 c0		 xor	 eax, eax
  0006f	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00072	83 c1 01	 add	 ecx, 1
  00075	0f 92 c0	 setb	 al
  00078	f7 d8		 neg	 eax
  0007a	0b c1		 or	 eax, ecx
  0007c	50		 push	 eax
  0007d	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00080	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00085	89 45 b8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3606 : 		_My_data._Orphan_all();

  00088	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3607 : 		_My_data._Mysize = _New_size;

  00090	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00096	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3608 : 		_My_data._Myres = _New_capacity;

  00099	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009c	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0009f	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3609 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000a2	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000a9	51		 push	 ecx
  000aa	8b 55 b8	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000ba	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 3610 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000bf	83 7d dc 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000c3	72 21		 jb	 SHORT $LN3@Reallocate

; 3611 : 			{
; 3612 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000c5	8b 45 dc	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000c8	83 c0 01	 add	 eax, 1
  000cb	50		 push	 eax
  000cc	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d2	52		 push	 edx
  000d3	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3613 : 			_My_data._Bx._Ptr = _New_ptr;

  000db	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000de	8b 4d b8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3614 : 			}
; 3615 : 		else

  000e4	eb 20		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3616 : 			{
; 3617 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  000e6	8d 45 b8	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000e9	50		 push	 eax
  000ea	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ed	83 c1 04	 add	 ecx, 4
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000f6	83 c4 04	 add	 esp, 4
  000f9	50		 push	 eax
  000fa	8b 55 c4	 mov	 edx, DWORD PTR __Al$[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3618 : 			}
; 3619 : 
; 3620 : 		return (*this);

  00106	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3621 : 		}

  00109	52		 push	 edx
  0010a	8b cd		 mov	 ecx, ebp
  0010c	50		 push	 eax
  0010d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00113	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00118	58		 pop	 eax
  00119	5a		 pop	 edx
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00120	33 cd		 xor	 ecx, ebp
  00122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00127	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 0c 00	 ret	 12			; 0000000cH
  0013a	66 90		 npad	 2
$LN8@Reallocate:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00144	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00148	04 00 00 00	 DD	 4
  0014c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00150	5f		 DB	 95			; 0000005fH
  00151	4e		 DB	 78			; 0000004eH
  00152	65		 DB	 101			; 00000065H
  00153	77		 DB	 119			; 00000077H
  00154	5f		 DB	 95			; 0000005fH
  00155	70		 DB	 112			; 00000070H
  00156	74		 DB	 116			; 00000074H
  00157	72		 DB	 114			; 00000072H
  00158	00		 DB	 0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2429 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2430 : 			_Traits::copy(_New_ptr, _Ptr, _Count);

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2431 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  00037	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0003e	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00048	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00051	83 c4 08	 add	 esp, 8

; 2432 : 			}, _Ptr));

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z
_TEXT	SEGMENT
__New_ptr$ = -72					; size = 4
__Al$ = -60						; size = 4
__New_capacity$ = -48					; size = 4
__Old_capacity$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>, COMDAT
; _this$ = ecx

; 3594 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3595 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3596 : 		if (_New_size > max_size())

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00038	76 05		 jbe	 SHORT $LN2@Reallocate

; 3597 : 			{
; 3598 : 			_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3599 : 			}
; 3600 : 
; 3601 : 		auto& _My_data = this->_Get_data();

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00047	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3602 : 		const size_type _Old_capacity = _My_data._Myres;

  0004a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	89 4d dc	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3603 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00053	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005f	89 45 d0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3604 : 		auto& _Al = this->_Getal();

  00062	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0006a	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 3605 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0006d	33 c0		 xor	 eax, eax
  0006f	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00072	83 c1 01	 add	 ecx, 1
  00075	0f 92 c0	 setb	 al
  00078	f7 d8		 neg	 eax
  0007a	0b c1		 or	 eax, ecx
  0007c	50		 push	 eax
  0007d	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00080	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00085	89 45 b8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3606 : 		_My_data._Orphan_all();

  00088	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3607 : 		_My_data._Mysize = _New_size;

  00090	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00096	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3608 : 		_My_data._Myres = _New_capacity;

  00099	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009c	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0009f	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3609 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000a2	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 55 b8	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000b4	83 c4 04	 add	 esp, 4
  000b7	50		 push	 eax
  000b8	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000bb	e8 00 00 00 00	 call	 ??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()

; 3610 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c0	83 7d dc 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000c4	72 21		 jb	 SHORT $LN3@Reallocate

; 3611 : 			{
; 3612 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000c6	8b 45 dc	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000c9	83 c0 01	 add	 eax, 1
  000cc	50		 push	 eax
  000cd	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000d0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d3	52		 push	 edx
  000d4	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d7	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3613 : 			_My_data._Bx._Ptr = _New_ptr;

  000dc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000df	8b 4d b8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3614 : 			}
; 3615 : 		else

  000e5	eb 20		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3616 : 			{
; 3617 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  000e7	8d 45 b8	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ee	83 c1 04	 add	 ecx, 4
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000f7	83 c4 04	 add	 esp, 4
  000fa	50		 push	 eax
  000fb	8b 55 c4	 mov	 edx, DWORD PTR __Al$[ebp]
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3618 : 			}
; 3619 : 
; 3620 : 		return (*this);

  00107	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3621 : 		}

  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	33 cd		 xor	 ecx, ebp
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 0c 00	 ret	 12			; 0000000cH
  0013b	90		 npad	 1
$LN8@Reallocate:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00144	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00148	04 00 00 00	 DD	 4
  0014c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00150	5f		 DB	 95			; 0000005fH
  00151	4e		 DB	 78			; 0000004eH
  00152	65		 DB	 101			; 00000065H
  00153	77		 DB	 119			; 00000077H
  00154	5f		 DB	 95			; 0000005fH
  00155	70		 DB	 112			; 00000070H
  00156	74		 DB	 116			; 00000074H
  00157	72		 DB	 114			; 00000072H
  00158	00		 DB	 0
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z PROC ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator(), COMDAT
; _this$ = ecx

; 2452 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2453 : 			_Traits::assign(_New_ptr, _Count, _Ch);

  00023	0f b6 45 10	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2454 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  00038	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0003f	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00049	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00052	83 c4 08	 add	 esp, 8

; 2455 : 			}, _Ch));

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z ENDP ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z PROC		; std::_Refancy<char *,0>, COMDAT

; 399  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 400  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 401  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ENDP		; std::_Refancy<char *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 31   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 32   : 	return (_Left < _Right ? _Right : _Left);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 0b		 jae	 SHORT $LN3@Max_value
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
  0003e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 33   : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 950  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  : 		_Ptr->~_Uty();
; 952  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 311  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 312  : 		{	// construct from forwarded values
; 313  : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z PROC	; std::pointer_traits<char *>::pointer_to, COMDAT

; 378  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 379  : 		return (_STD addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>
  00027	83 c4 04	 add	 esp, 4

; 380  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ENDP	; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1420 : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 : 		return ((reference)**(_Mybase *)this);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 1422 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1414 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1413 : 		: _Mybase(_Parg, _Pstring)

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1415 : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
__Rawptr$ = -44						; size = 4
__Contptr$ = -32					; size = 4
__Mycont$ = -20						; size = 4
_this$ = -8						; size = 4
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1210 : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1211 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1212 : 		_IDL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0002a	75 3f		 jne	 SHORT $LN2@operator
  0002c	68 bc 04 00 00	 push	 1212			; 000004bcH
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@
  0003b	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	8b f4		 mov	 esi, esp
  00045	6a 00		 push	 0
  00047	68 bc 04 00 00	 push	 1212			; 000004bcH
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00061	83 c4 14	 add	 esp, 20			; 00000014H
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 1213 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());

  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00073	89 45 ec	 mov	 DWORD PTR __Mycont$[ebp], eax

; 1214 : 		_IDL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"

  00076	83 7d ec 00	 cmp	 DWORD PTR __Mycont$[ebp], 0
  0007a	75 3f		 jne	 SHORT $LN3@operator
  0007c	68 bf 04 00 00	 push	 1215			; 000004bfH
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  0008b	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	8b f4		 mov	 esi, esp
  00095	6a 00		 push	 0
  00097	68 bf 04 00 00	 push	 1215			; 000004bfH
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b1	83 c4 14	 add	 esp, 20			; 00000014H
  000b4	3b f4		 cmp	 esi, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:

; 1215 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1216 : 		const auto _Contptr = _Mycont->_Myptr();

  000bb	8b 4d ec	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  000be	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000c3	89 45 e0	 mov	 DWORD PTR __Contptr$[ebp], eax

; 1217 : 		const auto _Rawptr = _Unfancy(_Ptr);

  000c6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ??$_Unfancy@$$CBD@std@@YAPBDPBD@Z ; std::_Unfancy<char const >
  000d2	83 c4 04	 add	 esp, 4
  000d5	89 45 d4	 mov	 DWORD PTR __Rawptr$[ebp], eax

; 1218 : 		_IDL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,

  000d8	8b 45 e0	 mov	 eax, DWORD PTR __Contptr$[ebp]
  000db	3b 45 d4	 cmp	 eax, DWORD PTR __Rawptr$[ebp]
  000de	77 0e		 ja	 SHORT $LN5@operator
  000e0	8b 45 ec	 mov	 eax, DWORD PTR __Mycont$[ebp]
  000e3	8b 4d e0	 mov	 ecx, DWORD PTR __Contptr$[ebp]
  000e6	03 48 14	 add	 ecx, DWORD PTR [eax+20]
  000e9	39 4d d4	 cmp	 DWORD PTR __Rawptr$[ebp], ecx
  000ec	72 3f		 jb	 SHORT $LN4@operator
$LN5@operator:
  000ee	68 c3 04 00 00	 push	 1219			; 000004c3H
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  000fd	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	8b f4		 mov	 esi, esp
  00107	6a 00		 push	 0
  00109	68 c3 04 00 00	 push	 1219			; 000004c3H
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@KLHNPPPG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00123	83 c4 14	 add	 esp, 20			; 00000014H
  00126	3b f4		 cmp	 esi, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@operator:

; 1219 : 			"cannot dereference string iterator because it is out of range (e.g. an end iterator)");
; 1220 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1221 : 
; 1222 : 		_Analysis_assume_(_Ptr);
; 1223 : 		return (*_Ptr);

  0012d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00130	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1224 : 		}

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0013c	3b ec		 cmp	 ebp, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1203 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12

; 1202 : 		: _Ptr(_Parg)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00031	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1204 : 		this->_Adopt(_Pstring);

  00034	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  00037	50		 push	 eax
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 1205 : 		}

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -296						; size = 4
$T3 = -284						; size = 12
__Pfmod$4 = -72						; size = 4
__Pf$5 = -60						; size = 4
__Id$6 = -48						; size = 4
__Psave$7 = -36						; size = 4
__Lock$8 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,_Mbstatet> >, COMDAT

; 504  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00020	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 505  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00040	8b f4		 mov	 esi, esp
  00042	6a 00		 push	 0
  00044	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 506  : 		const locale::facet *_Psave =
; 507  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
  00060	89 45 dc	 mov	 DWORD PTR __Psave$7[ebp], eax

; 508  : 
; 509  : 		size_t _Id = _Facet::id;

  00063	8b f4		 mov	 esi, esp
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	89 45 d0	 mov	 DWORD PTR __Id$6[ebp], eax

; 510  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0007b	8b 45 d0	 mov	 eax, DWORD PTR __Id$6[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00082	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00087	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 511  : 
; 512  : 		if (_Pf != 0)

  0008a	83 7d c4 00	 cmp	 DWORD PTR __Pf$5[ebp], 0
  0008e	74 05		 je	 SHORT $LN2@use_facet
  00090	e9 81 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 513  : 			;	// got facet from locale
; 514  : 		else if (_Psave != 0)

  00095	83 7d dc 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  00099	74 08		 je	 SHORT $LN4@use_facet

; 515  : 			_Pf = _Psave;	// lazy facet already allocated

  0009b	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  0009e	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax
  000a1	eb 73		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 516  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000a3	8b f4		 mov	 esi, esp
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000a8	50		 push	 eax
  000a9	8d 4d dc	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  000ac	51		 push	 ecx
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  000b3	83 c4 08	 add	 esp, 8
  000b6	3b f4		 cmp	 esi, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	83 f8 ff	 cmp	 eax, -1
  000c0	75 1e		 jne	 SHORT $LN6@use_facet

; 517  : 
; 518  :  #if _HAS_EXCEPTIONS
; 519  : 
; 520  : 			_THROW(bad_cast{});	// lazy disallowed

  000c2	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c8	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  000cd	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000d2	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8

; 521  : 
; 522  :  #else /* _HAS_EXCEPTIONS */
; 523  : 			abort();	// lazy disallowed
; 524  :  #endif /* _HAS_EXCEPTIONS */
; 525  : 
; 526  : 		else

  000de	eb 36		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 527  : 			{	// queue up lazy facet for destruction
; 528  : 			_Pf = _Psave;

  000e0	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000e3	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 529  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000e6	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000e9	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave

; 530  : 
; 531  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000ee	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000f1	89 45 b8	 mov	 DWORD PTR __Pfmod$4[ebp], eax

; 532  : 			_Pfmod->_Incref();

  000f4	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000f7	8b 10		 mov	 edx, DWORD PTR [eax]
  000f9	8b f4		 mov	 esi, esp
  000fb	8b 4d b8	 mov	 ecx, DWORD PTR __Pfmod$4[ebp]
  000fe	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00101	ff d0		 call	 eax
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 533  : 
; 534  :  #if defined(_M_CEE)
; 535  : 			_Facet_Register_m(_Pfmod);
; 536  : 
; 537  :  #else /* defined(_M_CEE) */
; 538  : 			_Facet_Register(_Pfmod);

  0010a	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00113	83 c4 04	 add	 esp, 4
$LN3@use_facet:

; 539  :  #endif /* defined(_M_CEE) */
; 540  : 			}
; 541  : 
; 542  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00116	8b 45 c4	 mov	 eax, DWORD PTR __Pf$5[ebp]
  00119	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0011f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00126	8b f4		 mov	 esi, esp
  00128	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00131	3b f4		 cmp	 esi, esp
  00133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00138	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN8@use_facet:

; 543  : 	_END_LOCK()
; 544  : 	}	// end of use_facet body

  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	50		 push	 eax
  00142	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@use_facet
  00148	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014d	58		 pop	 eax
  0014e	5a		 pop	 edx
  0014f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00159	59		 pop	 ecx
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN14@use_facet:
  00178	02 00 00 00	 DD	 2
  0017c	00 00 00 00	 DD	 $LN13@use_facet
$LN13@use_facet:
  00180	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00184	04 00 00 00	 DD	 4
  00188	00 00 00 00	 DD	 $LN10@use_facet
  0018c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00190	04 00 00 00	 DD	 4
  00194	00 00 00 00	 DD	 $LN11@use_facet
$LN11@use_facet:
  00198	5f		 DB	 95			; 0000005fH
  00199	50		 DB	 80			; 00000050H
  0019a	73		 DB	 115			; 00000073H
  0019b	61		 DB	 97			; 00000061H
  0019c	76		 DB	 118			; 00000076H
  0019d	65		 DB	 101			; 00000065H
  0019e	00		 DB	 0
$LN10@use_facet:
  0019f	5f		 DB	 95			; 0000005fH
  001a0	4c		 DB	 76			; 0000004cH
  001a1	6f		 DB	 111			; 0000006fH
  001a2	63		 DB	 99			; 00000063H
  001a3	6b		 DB	 107			; 0000006bH
  001a4	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a d0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-304]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; _this$ = ecx

; 62   : 		{	// return offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return (_Myoff + _Fpos);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  0002e	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00031	13 71 0c	 adc	 esi, DWORD PTR [ecx+12]
  00034	8b c2		 mov	 eax, edx
  00036	8b d6		 mov	 edx, esi

; 64   : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::seekpos, COMDAT
; _this$ = ecx

; 57   : 		{	// return C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 		return (_Fpos);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00029	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 59   : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ PROC ; std::fpos<_Mbstatet>::state, COMDAT
; _this$ = ecx

; 47   : 		{	// return conversion state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 		return (_Mystate);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00029	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0002c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	89 08		 mov	 DWORD PTR [eax], ecx
  00031	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00034	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 49   : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ENDP ; std::fpos<_Mbstatet>::state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__State$ = 8						; size = 8
__Fileposition$ = 16					; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z PROC	; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 10	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00039	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0003c	8b 55 14	 mov	 edx, DWORD PTR __Fileposition$[ebp+4]
  0003f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  00048	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004b	8b 55 0c	 mov	 edx, DWORD PTR __State$[ebp+4]
  0004e	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 44   : 		}

  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 10 00	 ret	 16			; 00000010H
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ENDP	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp+4]
  0002e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0003b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00042	33 c0		 xor	 eax, eax
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 10	 add	 ecx, 16			; 00000010H
  0004a	89 01		 mov	 DWORD PTR [ecx], eax
  0004c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 39   : 		}

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1552 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1553 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1554 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1722 : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1720 : 		: _Mypair(_One_then_variadic_args_t(),

  00042	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  0004b	83 c4 04	 add	 esp, 4
  0004e	50		 push	 eax
  0004f	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  00056	51		 push	 ecx
  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1723 : 		_Alloc_proxy();

  00066	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 1724 : 		}

  0006e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1552 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1553 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1554 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 23   : 	return (_Right < _Left ? _Right : _Left);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 0b		 jae	 SHORT $LN3@Min_value
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0003e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 24   : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\string
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 168  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 169  : 	return (_Insert_string(_Ostr, _Str.data(), _Str.size()));

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00021	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0002a	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  0002f	50		 push	 eax
  00030	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 	}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv342 = -348						; size = 8
tv290 = -344						; size = 4
tv287 = -344						; size = 8
tv285 = -344						; size = 4
tv328 = -340						; size = 8
tv289 = -340						; size = 4
tv284 = -340						; size = 4
tv286 = -336						; size = 4
tv137 = -336						; size = 4
tv288 = -333						; size = 1
tv283 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 770  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 771  : 	typedef char _Elem;
; 772  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 773  : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 774  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0004b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00054	83 c4 04	 add	 esp, 4
  00057	33 c9		 xor	 ecx, ecx
  00059	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0005c	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 775  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv328[ebp], eax
  00081	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv328[ebp+4], edx
  00087	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp+4], 0
  0008e	7c 79		 jl	 SHORT $LN17@operator
  00090	7f 09		 jg	 SHORT $LN24@operator
  00092	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp], 0
  00099	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  0009b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a6	8b f4		 mov	 esi, esp
  000a8	8b ca		 mov	 ecx, edx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  000bd	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  000c3	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp+4]
  000c9	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000cc	7c 3b		 jl	 SHORT $LN17@operator
  000ce	7f 0b		 jg	 SHORT $LN25@operator
  000d0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv342[ebp]
  000d6	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000d9	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000de	8b 02		 mov	 eax, DWORD PTR [edx]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e3	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000e6	8b f4		 mov	 esi, esp
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000f8	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000fb	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00101	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00107	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00109	0f 57 c0	 xorps	 xmm0, xmm0
  0010c	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  00114	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  0011a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0011d	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00123	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 776  : 		? 0 : _Ostr.width() - _Count;
; 777  : 	const typename _Myos::sentry _Ok(_Ostr);

  00126	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0012d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00132	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 778  : 
; 779  : 	if (!_Ok)

  00139	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0013c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00141	0f b6 c0	 movzx	 eax, al
  00144	85 c0		 test	 eax, eax
  00146	75 0e		 jne	 SHORT $LN8@operator

; 780  : 		_State |= ios_base::badbit;

  00148	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0014b	83 c8 04	 or	 eax, 4
  0014e	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 781  : 	else

  00151	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 782  : 		{	// state okay, insert
; 783  : 		_TRY_IO_BEGIN

  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 784  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0015a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00162	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00165	8b f4		 mov	 esi, esp
  00167	8b ca		 mov	 ecx, edx
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0016f	3b f4		 cmp	 esi, esp
  00171	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00176	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  0017c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00182	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00187	83 f8 40	 cmp	 eax, 64			; 00000040H
  0018a	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 785  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00190	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00192	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00195	83 e8 01	 sub	 eax, 1
  00198	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0019b	83 d9 00	 sbb	 ecx, 0
  0019e	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001a1	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001a4	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a8	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001ae	7f 0a		 jg	 SHORT $LN26@operator
  001b0	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001b4	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 786  : 				if (_Traits::eq_int_type(_Traits::eof(),

  001ba	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c5	8b f4		 mov	 esi, esp
  001c7	8b ca		 mov	 ecx, edx
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d6	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  001dc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001e7	8b f4		 mov	 esi, esp
  001e9	8b ca		 mov	 ecx, edx
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001fe	8b f4		 mov	 esi, esp
  00200	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  00207	50		 push	 eax
  00208	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00214	3b f4		 cmp	 esi, esp
  00216	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021b	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00221	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00227	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0022d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00232	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00238	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0023e	52		 push	 edx
  0023f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0024b	83 c4 08	 add	 esp, 8
  0024e	0f b6 c8	 movzx	 ecx, al
  00251	85 c9		 test	 ecx, ecx
  00253	74 0b		 je	 SHORT $LN12@operator

; 787  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 788  : 					{	// insertion failed, quit
; 789  : 					_State |= ios_base::badbit;

  00255	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00258	83 c8 04	 or	 eax, 4
  0025b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 790  : 					break;

  0025e	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 791  : 					}
; 792  : 
; 793  : 		if (_State == ios_base::goodbit

  00260	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 794  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00265	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00269	75 6e		 jne	 SHORT $LN13@operator
  0026b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0026e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00270	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00273	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00276	8b f4		 mov	 esi, esp
  00278	8b ca		 mov	 ecx, edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0028d	8b f4		 mov	 esi, esp
  0028f	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00292	50		 push	 eax
  00293	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00296	51		 push	 ecx
  00297	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0029a	52		 push	 edx
  0029b	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002a7	3b f4		 cmp	 esi, esp
  002a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ae	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  002b4	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  002ba	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  002c0	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002c3	75 0b		 jne	 SHORT $LN27@operator
  002c5	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp+4]
  002cb	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002ce	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 795  : 			_State |= ios_base::badbit;

  002d0	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002d3	83 c8 04	 or	 eax, 4
  002d6	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 796  : 
; 797  : 		if (_State == ios_base::goodbit)

  002d9	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002dd	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 798  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002e3	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002e5	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002e8	83 e8 01	 sub	 eax, 1
  002eb	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ee	83 d9 00	 sbb	 ecx, 0
  002f1	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002f4	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002f7	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002fb	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  00301	7f 0a		 jg	 SHORT $LN28@operator
  00303	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00307	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 799  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0030d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00310	8b 08		 mov	 ecx, DWORD PTR [eax]
  00312	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00315	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00318	8b f4		 mov	 esi, esp
  0031a	8b ca		 mov	 ecx, edx
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00322	3b f4		 cmp	 esi, esp
  00324	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00329	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  0032f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00332	8b 08		 mov	 ecx, DWORD PTR [eax]
  00334	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00337	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0033a	8b f4		 mov	 esi, esp
  0033c	8b ca		 mov	 ecx, edx
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00344	3b f4		 cmp	 esi, esp
  00346	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  00351	8b f4		 mov	 esi, esp
  00353	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  0035a	50		 push	 eax
  0035b	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00367	3b f4		 cmp	 esi, esp
  00369	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036e	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00374	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0037a	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0038b	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00391	52		 push	 edx
  00392	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0039e	83 c4 08	 add	 esp, 8
  003a1	0f b6 c8	 movzx	 ecx, al
  003a4	85 c9		 test	 ecx, ecx
  003a6	74 0b		 je	 SHORT $LN15@operator

; 800  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 801  : 					{	// insertion failed, quit
; 802  : 					_State |= ios_base::badbit;

  003a8	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003ab	83 c8 04	 or	 eax, 4
  003ae	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 803  : 					break;

  003b1	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 804  : 					}

  003b3	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 805  : 		_Ostr.width(0);

  003b8	8b f4		 mov	 esi, esp
  003ba	6a 00		 push	 0
  003bc	6a 00		 push	 0
  003be	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c9	8b ca		 mov	 ecx, edx
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003d1	3b f4		 cmp	 esi, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 806  : 		_CATCH_IO_(_Ostr)

  003da	8b f4		 mov	 esi, esp
  003dc	6a 01		 push	 1
  003de	6a 04		 push	 4
  003e0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003e8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003eb	8b ca		 mov	 ecx, edx
  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003f3	3b f4		 cmp	 esi, esp
  003f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fa	b8 00 00 00 00	 mov	 eax, $LN23@operator
  003ff	c3		 ret	 0
$LN19@operator:
  00400	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00407	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00409	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 807  : 		}
; 808  : 
; 809  : 	_Ostr.setstate(_State);

  00410	8b f4		 mov	 esi, esp
  00412	6a 00		 push	 0
  00414	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00417	50		 push	 eax
  00418	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0041b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0041d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00420	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00423	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00429	3b f4		 cmp	 esi, esp
  0042b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 810  : 	return (_Ostr);

  00430	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00433	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00439	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00440	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00443	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00448	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 811  : 	}

  0044e	52		 push	 edx
  0044f	8b cd		 mov	 ecx, ebp
  00451	50		 push	 eax
  00452	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00458	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045d	58		 pop	 eax
  0045e	5a		 pop	 edx
  0045f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00462	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00469	59		 pop	 ecx
  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00470	33 cd		 xor	 ecx, ebp
  00472	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00477	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  0047d	3b ec		 cmp	 ebp, esp
  0047f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00484	8b e5		 mov	 esp, ebp
  00486	5d		 pop	 ebp
  00487	c3		 ret	 0
$LN32@operator:
  00488	01 00 00 00	 DD	 1
  0048c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00490	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00494	08 00 00 00	 DD	 8
  00498	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0049c	5f		 DB	 95			; 0000005fH
  0049d	4f		 DB	 79			; 0000004fH
  0049e	6b		 DB	 107			; 0000006bH
  0049f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 158  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 159  : 	return (getline(_STD move(_Istr), _Str, _Istr.widen('\n')));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	50		 push	 eax
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
  0004d	83 c4 04	 add	 esp, 4
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 160  : 	}

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 68	 add	 ecx, 104		; 00000068H
  00029	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 68	 add	 ecx, 104		; 00000068H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 68	 sub	 ecx, 104		; 00000068H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 14		 je	 SHORT $LN2@scalar
  00036	68 b0 00 00 00	 push	 176			; 000000b0H
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 e8 68	 sub	 eax, 104		; 00000068H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 e8 68	 sub	 eax, 104		; 00000068H
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 44		 push	 68			; 00000044H
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__State$ = -20						; size = 4
_this$ = -8						; size = 4
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 356  : 		{	// convert open mode to stream state bits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 		_Strstate _State = (_Strstate)0;

  00023	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 358  : 		if (!(_Mode & ios_base::in))

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  0002d	83 e0 01	 and	 eax, 1
  00030	75 09		 jne	 SHORT $LN2@Getstate

; 359  : 			_State |= _Noread;

  00032	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00035	83 c8 04	 or	 eax, 4
  00038	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN2@Getstate:

; 360  : 		if (!(_Mode & ios_base::out))

  0003b	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  0003e	83 e0 02	 and	 eax, 2
  00041	75 09		 jne	 SHORT $LN3@Getstate

; 361  : 			_State |= _Constant;

  00043	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00046	83 c8 02	 or	 eax, 2
  00049	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN3@Getstate:

; 362  : 		if (_Mode & ios_base::app)

  0004c	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  0004f	83 e0 08	 and	 eax, 8
  00052	74 09		 je	 SHORT $LN4@Getstate

; 363  : 			_State |= _Append;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00057	83 c8 08	 or	 eax, 8
  0005a	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN4@Getstate:

; 364  : 		if (_Mode & ios_base::ate)

  0005d	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  00060	83 e0 04	 and	 eax, 4
  00063	74 09		 je	 SHORT $LN5@Getstate

; 365  : 			_State |= _Atend;

  00065	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00068	83 c8 10	 or	 eax, 16			; 00000010H
  0006b	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN5@Getstate:

; 366  : 		return (_State);

  0006e	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]

; 367  : 		}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 337  : 		{	// discard any allocated buffer and clear pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 338  : 		if (_Mystate & _Allocated)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00029	83 e1 01	 and	 ecx, 1
  0002c	0f 84 8a 00 00
	00		 je	 $LN2@Tidy

; 339  : 			_Al.deallocate(pointer_traits<_Ptrty>::pointer_to(*_Mysb::eback()),

  00032	8b f4		 mov	 esi, esp
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	85 c0		 test	 eax, eax
  00046	74 1a		 je	 SHORT $LN4@Tidy
  00048	8b f4		 mov	 esi, esp
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
  00060	eb 18		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  00062	8b f4		 mov	 esi, esp
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
$LN5@Tidy:
  0007a	8b f4		 mov	 esi, esp
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv88[ebp]
  00092	2b c8		 sub	 ecx, eax
  00094	51		 push	 ecx
  00095	8b f4		 mov	 esi, esp
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
  000ad	83 c4 04	 add	 esp, 4
  000b0	50		 push	 eax
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	83 c1 40	 add	 ecx, 64			; 00000040H
  000b7	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy:

; 340  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 341  : 					: _Mysb::egptr()) - _Mysb::eback());
; 342  : 		_Mysb::setg(0, 0, 0);

  000bc	8b f4		 mov	 esi, esp
  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	6a 00		 push	 0
  000c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  000cd	3b f4		 cmp	 esi, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Mysb::setp(0, 0);

  000d4	8b f4		 mov	 esi, esp
  000d6	6a 00		 push	 0
  000d8	6a 00		 push	 0
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
  000e3	3b f4		 cmp	 esi, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 344  : 		_Seekhigh = 0;

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 345  : 		_Mystate &= ~_Allocated;

  000f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000fa	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000fd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00100	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 346  : 		}

  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0010c	3b ec		 cmp	 ebp, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
tv142 = -220						; size = 4
__Pnew$1 = -20						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 310  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 311  : 		_Seekhigh = 0;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 312  : 		_Mystate = _State;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 10	 mov	 ecx, DWORD PTR __State$[ebp]
  00033	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 313  : 
; 314  : 		if (_Count != 0
; 315  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00036	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0003a	0f 84 0b 01 00
	00		 je	 $LN1@Init
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00046	83 e1 06	 and	 ecx, 6
  00049	83 f9 06	 cmp	 ecx, 6
  0004c	0f 84 f9 00 00
	00		 je	 $LN1@Init

; 316  : 			{	// finite buffer that can be read or written, set it up
; 317  : 			_Elem *_Pnew = _Unfancy(_Al.allocate(_Count));

  00052	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00055	50		 push	 eax
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	83 c1 40	 add	 ecx, 64			; 00000040H
  0005c	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00067	83 c4 04	 add	 esp, 4
  0006a	89 45 ec	 mov	 DWORD PTR __Pnew$1[ebp], eax

; 318  : 			_Traits::copy(_Pnew, _Ptr, _Count);

  0006d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 ec	 mov	 edx, DWORD PTR __Pnew$1[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 319  : 			_Seekhigh = _Pnew + _Count;

  00081	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 320  : 
; 321  : 			if (!(_Mystate & _Noread))

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00090	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00093	83 e1 04	 and	 ecx, 4
  00096	75 21		 jne	 SHORT $LN3@Init

; 322  : 				_Mysb::setg(_Pnew, _Pnew,

  00098	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  0009b	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0009e	8b f4		 mov	 esi, esp
  000a0	50		 push	 eax
  000a1	8b 4d ec	 mov	 ecx, DWORD PTR __Pnew$1[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 ec	 mov	 edx, DWORD PTR __Pnew$1[ebp]
  000a8	52		 push	 edx
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  000b2	3b f4		 cmp	 esi, esp
  000b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Init:

; 323  : 					_Pnew + _Count);	// setup read buffer
; 324  : 			if (!(_Mystate & _Constant))

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000bf	83 e1 02	 and	 ecx, 2
  000c2	75 78		 jne	 SHORT $LN4@Init

; 325  : 				{	// setup write buffer, and maybe read buffer
; 326  : 				_Mysb::setp(_Pnew,

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000ca	83 e1 18	 and	 ecx, 24			; 00000018H
  000cd	74 0e		 je	 SHORT $LN7@Init
  000cf	8b 55 ec	 mov	 edx, DWORD PTR __Pnew$1[ebp]
  000d2	03 55 0c	 add	 edx, DWORD PTR __Count$[ebp]
  000d5	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv142[ebp], edx
  000db	eb 09		 jmp	 SHORT $LN8@Init
$LN7@Init:
  000dd	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  000e0	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv142[ebp], eax
$LN8@Init:
  000e6	8b 4d ec	 mov	 ecx, DWORD PTR __Pnew$1[ebp]
  000e9	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  000ec	8b f4		 mov	 esi, esp
  000ee	51		 push	 ecx
  000ef	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv142[ebp]
  000f5	52		 push	 edx
  000f6	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 327  : 					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
; 328  : 					_Pnew + _Count);
; 329  : 				if (_Mysb::gptr() == 0)

  0010a	8b f4		 mov	 esi, esp
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00115	3b f4		 cmp	 esi, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	85 c0		 test	 eax, eax
  0011e	75 1c		 jne	 SHORT $LN4@Init

; 330  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00120	8b f4		 mov	 esi, esp
  00122	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  00125	50		 push	 eax
  00126	6a 00		 push	 0
  00128	8b 4d ec	 mov	 ecx, DWORD PTR __Pnew$1[ebp]
  0012b	51		 push	 ecx
  0012c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00135	3b f4		 cmp	 esi, esp
  00137	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@Init:

; 331  : 				}
; 332  : 			_Mystate |= _Allocated;

  0013c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00142	83 c9 01	 or	 ecx, 1
  00145	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00148	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx
$LN1@Init:

; 333  : 			}
; 334  : 		}

  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00154	3b ec		 cmp	 ebp, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
tv342 = -228						; size = 8
tv282 = -228						; size = 8
tv259 = -224						; size = 4
__Off$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 276  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		streamoff _Off = (streamoff)_Ptr;

  00023	8d 4d 0c	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00026	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::operator __int64
  0002b	89 45 e8	 mov	 DWORD PTR __Off$[ebp], eax
  0002e	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx

; 278  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00031	8b f4		 mov	 esi, esp
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	85 c0		 test	 eax, eax
  00045	74 32		 je	 SHORT $LN2@seekpos
  00047	8b f4		 mov	 esi, esp
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  0005f	73 18		 jae	 SHORT $LN2@seekpos

; 279  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00061	8b f4		 mov	 esi, esp
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$LN2@seekpos:

; 280  : 
; 281  : 		if (_Off == _BADOFF)

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  0007e	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  00084	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv259[ebp]
  0008a	8b 55 e8	 mov	 edx, DWORD PTR __Off$[ebp]
  0008d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0008f	75 13		 jne	 SHORT $LN3@seekpos
  00091	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00097	8b 4d ec	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0009a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0009d	75 05		 jne	 SHORT $LN3@seekpos
  0009f	e9 2e 02 00 00	 jmp	 $LN4@seekpos
$LN3@seekpos:

; 282  : 			;
; 283  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  000a4	8b 45 24	 mov	 eax, DWORD PTR __Mode$[ebp]
  000a7	83 e0 01	 and	 eax, 1
  000aa	0f 84 3d 01 00
	00		 je	 $LN5@seekpos
  000b0	8b f4		 mov	 esi, esp
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	85 c0		 test	 eax, eax
  000c4	0f 84 23 01 00
	00		 je	 $LN5@seekpos

; 284  : 			{	// position within read buffer
; 285  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  000ca	83 7d ec 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  000ce	0f 8c 04 01 00
	00		 jl	 $LN7@seekpos
  000d4	7f 0a		 jg	 SHORT $LN15@seekpos
  000d6	83 7d e8 00	 cmp	 DWORD PTR __Off$[ebp], 0
  000da	0f 82 f8 00 00
	00		 jb	 $LN7@seekpos
$LN15@seekpos:
  000e0	8b f4		 mov	 esi, esp
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000f8	2b d0		 sub	 edx, eax
  000fa	8b c2		 mov	 eax, edx
  000fc	99		 cdq
  000fd	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv282[ebp], eax
  00103	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv282[ebp+4], edx
  00109	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0010c	3b 85 20 ff ff
	ff		 cmp	 eax, DWORD PTR tv282[ebp+4]
  00112	0f 8f c0 00 00
	00		 jg	 $LN7@seekpos
  00118	7c 0f		 jl	 SHORT $LN16@seekpos
  0011a	8b 4d e8	 mov	 ecx, DWORD PTR __Off$[ebp]
  0011d	3b 8d 1c ff ff
	ff		 cmp	 ecx, DWORD PTR tv282[ebp]
  00123	0f 87 af 00 00
	00		 ja	 $LN7@seekpos
$LN16@seekpos:

; 286  : 				{	// change read position
; 287  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00129	8b f4		 mov	 esi, esp
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00134	3b f4		 cmp	 esi, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b f0		 mov	 esi, eax
  0013d	8b fc		 mov	 edi, esp
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00148	3b fc		 cmp	 edi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	2b f0		 sub	 esi, eax
  00151	8b c6		 mov	 eax, esi
  00153	99		 cdq
  00154	03 45 e8	 add	 eax, DWORD PTR __Off$[ebp]
  00157	13 55 ec	 adc	 edx, DWORD PTR __Off$[ebp+4]
  0015a	8b f4		 mov	 esi, esp
  0015c	50		 push	 eax
  0015d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 288  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0016d	8b 45 24	 mov	 eax, DWORD PTR __Mode$[ebp]
  00170	83 e0 02	 and	 eax, 2
  00173	74 61		 je	 SHORT $LN9@seekpos
  00175	8b f4		 mov	 esi, esp
  00177	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00180	3b f4		 cmp	 esi, esp
  00182	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00187	85 c0		 test	 eax, eax
  00189	74 4b		 je	 SHORT $LN9@seekpos

; 289  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  0018b	8b f4		 mov	 esi, esp
  0018d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00196	3b f4		 cmp	 esi, esp
  00198	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019d	8b f4		 mov	 esi, esp
  0019f	50		 push	 eax
  001a0	8b fc		 mov	 edi, esp
  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001ab	3b fc		 cmp	 edi, esp
  001ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b2	50		 push	 eax
  001b3	8b fc		 mov	 edi, esp
  001b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001be	3b fc		 cmp	 edi, esp
  001c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c5	50		 push	 eax
  001c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@seekpos:

; 290  : 						_Mysb::epptr());	// change write position to match
; 291  : 				}
; 292  : 			else

  001d6	eb 10		 jmp	 SHORT $LN8@seekpos
$LN7@seekpos:

; 293  : 				_Off = _BADOFF;

  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  001dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001df	89 4d e8	 mov	 DWORD PTR __Off$[ebp], ecx
  001e2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001e5	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN8@seekpos:
  001e8	e9 e5 00 00 00	 jmp	 $LN4@seekpos
$LN5@seekpos:

; 294  : 			}
; 295  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  001ed	8b 45 24	 mov	 eax, DWORD PTR __Mode$[ebp]
  001f0	83 e0 02	 and	 eax, 2
  001f3	0f 84 c9 00 00
	00		 je	 $LN10@seekpos
  001f9	8b f4		 mov	 esi, esp
  001fb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020b	85 c0		 test	 eax, eax
  0020d	0f 84 af 00 00
	00		 je	 $LN10@seekpos

; 296  : 			{	// position within write buffer
; 297  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00213	83 7d ec 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  00217	0f 8c 93 00 00
	00		 jl	 $LN12@seekpos
  0021d	7f 0a		 jg	 SHORT $LN17@seekpos
  0021f	83 7d e8 00	 cmp	 DWORD PTR __Off$[ebp], 0
  00223	0f 82 87 00 00
	00		 jb	 $LN12@seekpos
$LN17@seekpos:
  00229	8b f4		 mov	 esi, esp
  0022b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00234	3b f4		 cmp	 esi, esp
  00236	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023e	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00241	2b d0		 sub	 edx, eax
  00243	8b c2		 mov	 eax, edx
  00245	99		 cdq
  00246	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  0024c	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  00252	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00255	3b 85 20 ff ff
	ff		 cmp	 eax, DWORD PTR tv342[ebp+4]
  0025b	7f 53		 jg	 SHORT $LN12@seekpos
  0025d	7c 0b		 jl	 SHORT $LN18@seekpos
  0025f	8b 4d e8	 mov	 ecx, DWORD PTR __Off$[ebp]
  00262	3b 8d 1c ff ff
	ff		 cmp	 ecx, DWORD PTR tv342[ebp]
  00268	77 46		 ja	 SHORT $LN12@seekpos
$LN18@seekpos:

; 298  : 				_Mysb::pbump((int)(_Mysb::eback()

  0026a	8b f4		 mov	 esi, esp
  0026c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	8b f0		 mov	 esi, eax
  0027e	8b fc		 mov	 edi, esp
  00280	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00289	3b fc		 cmp	 edi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00290	2b f0		 sub	 esi, eax
  00292	8b c6		 mov	 eax, esi
  00294	99		 cdq
  00295	03 45 e8	 add	 eax, DWORD PTR __Off$[ebp]
  00298	13 55 ec	 adc	 edx, DWORD PTR __Off$[ebp+4]
  0029b	8b f4		 mov	 esi, esp
  0029d	50		 push	 eax
  0029e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  002a7	3b f4		 cmp	 esi, esp
  002a9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 299  : 					- _Mysb::pptr() + _Off));	// change write position
; 300  : 			else

  002ae	eb 10		 jmp	 SHORT $LN13@seekpos
$LN12@seekpos:

; 301  : 				_Off = _BADOFF;

  002b0	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  002b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b7	89 4d e8	 mov	 DWORD PTR __Off$[ebp], ecx
  002ba	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002bd	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN13@seekpos:

; 302  : 			}
; 303  : 		else

  002c0	eb 10		 jmp	 SHORT $LN4@seekpos
$LN10@seekpos:

; 304  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  002c2	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  002c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c9	89 4d e8	 mov	 DWORD PTR __Off$[ebp], ecx
  002cc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002cf	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN4@seekpos:

; 305  : 		return (streampos(_Off));

  002d2	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp+4]
  002d5	50		 push	 eax
  002d6	8b 4d e8	 mov	 ecx, DWORD PTR __Off$[ebp]
  002d9	51		 push	 ecx
  002da	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  002dd	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  002e2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 306  : 		}

  002e5	5f		 pop	 edi
  002e6	5e		 pop	 esi
  002e7	5b		 pop	 ebx
  002e8	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  002ee	3b ec		 cmp	 ebp, esp
  002f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
tv453 = -212						; size = 8
tv360 = -212						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
__Which$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 227  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 228  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	74 32		 je	 SHORT $LN2@seekoff
  00039	8b f4		 mov	 esi, esp
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00051	73 18		 jae	 SHORT $LN2@seekoff

; 229  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00053	8b f4		 mov	 esi, esp
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$LN2@seekoff:

; 230  : 
; 231  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  0006b	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  0006e	83 e0 01	 and	 eax, 1
  00071	0f 84 cb 01 00
	00		 je	 $LN3@seekoff
  00077	8b f4		 mov	 esi, esp
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	85 c0		 test	 eax, eax
  0008b	0f 84 b1 01 00
	00		 je	 $LN3@seekoff

; 232  : 			{	// position within read buffer
; 233  : 			if (_Way == ios_base::end)

  00091	83 7d 14 02	 cmp	 DWORD PTR __Way$[ebp], 2
  00095	75 2b		 jne	 SHORT $LN5@seekoff

; 234  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  00097	8b f4		 mov	 esi, esp
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000af	2b d0		 sub	 edx, eax
  000b1	8b c2		 mov	 eax, edx
  000b3	99		 cdq
  000b4	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  000b7	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  000ba	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  000bd	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx

; 235  : 			else if (_Way == ios_base::cur

  000c0	eb 5d		 jmp	 SHORT $LN6@seekoff
$LN5@seekoff:

; 236  : 				&& (_Which & ios_base::out) == 0)

  000c2	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  000c6	75 41		 jne	 SHORT $LN7@seekoff
  000c8	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  000cb	83 e0 02	 and	 eax, 2
  000ce	75 39		 jne	 SHORT $LN7@seekoff

; 237  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  000d0	8b f4		 mov	 esi, esp
  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	8b f0		 mov	 esi, eax
  000e4	8b fc		 mov	 edi, esp
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ef	3b fc		 cmp	 edi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	2b f0		 sub	 esi, eax
  000f8	8b c6		 mov	 eax, esi
  000fa	99		 cdq
  000fb	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  000fe	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  00101	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00104	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
  00107	eb 16		 jmp	 SHORT $LN6@seekoff
$LN7@seekoff:

; 238  : 			else if (_Way != ios_base::beg)

  00109	83 7d 14 00	 cmp	 DWORD PTR __Way$[ebp], 0
  0010d	74 10		 je	 SHORT $LN6@seekoff

; 239  : 				_Off = _BADOFF;

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  00119	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0011c	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN6@seekoff:

; 240  : 
; 241  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0011f	83 7d 10 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  00123	0f 8c 04 01 00
	00		 jl	 $LN10@seekoff
  00129	7f 0a		 jg	 SHORT $LN24@seekoff
  0012b	83 7d 0c 00	 cmp	 DWORD PTR __Off$[ebp], 0
  0012f	0f 82 f8 00 00
	00		 jb	 $LN10@seekoff
$LN24@seekoff:
  00135	8b f4		 mov	 esi, esp
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00140	3b f4		 cmp	 esi, esp
  00142	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00147	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0014d	2b d0		 sub	 edx, eax
  0014f	8b c2		 mov	 eax, edx
  00151	99		 cdq
  00152	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv360[ebp], eax
  00158	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv360[ebp+4], edx
  0015e	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00161	3b 85 30 ff ff
	ff		 cmp	 eax, DWORD PTR tv360[ebp+4]
  00167	0f 8f c0 00 00
	00		 jg	 $LN10@seekoff
  0016d	7c 0f		 jl	 SHORT $LN25@seekoff
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00172	3b 8d 2c ff ff
	ff		 cmp	 ecx, DWORD PTR tv360[ebp]
  00178	0f 87 af 00 00
	00		 ja	 $LN10@seekoff
$LN25@seekoff:

; 242  : 				{	// change read position
; 243  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0017e	8b f4		 mov	 esi, esp
  00180	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00189	3b f4		 cmp	 esi, esp
  0018b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00190	8b f0		 mov	 esi, eax
  00192	8b fc		 mov	 edi, esp
  00194	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0019d	3b fc		 cmp	 edi, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	2b f0		 sub	 esi, eax
  001a6	8b c6		 mov	 eax, esi
  001a8	99		 cdq
  001a9	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  001ac	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  001af	8b f4		 mov	 esi, esp
  001b1	50		 push	 eax
  001b2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  001bb	3b f4		 cmp	 esi, esp
  001bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  001c2	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  001c5	83 e0 02	 and	 eax, 2
  001c8	74 61		 je	 SHORT $LN12@seekoff
  001ca	8b f4		 mov	 esi, esp
  001cc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001d5	3b f4		 cmp	 esi, esp
  001d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001dc	85 c0		 test	 eax, eax
  001de	74 4b		 je	 SHORT $LN12@seekoff

; 245  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  001e0	8b f4		 mov	 esi, esp
  001e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001eb	3b f4		 cmp	 esi, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	8b f4		 mov	 esi, esp
  001f4	50		 push	 eax
  001f5	8b fc		 mov	 edi, esp
  001f7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00200	3b fc		 cmp	 edi, esp
  00202	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00207	50		 push	 eax
  00208	8b fc		 mov	 edi, esp
  0020a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00213	3b fc		 cmp	 edi, esp
  00215	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021a	50		 push	 eax
  0021b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00224	3b f4		 cmp	 esi, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN12@seekoff:

; 246  : 						_Mysb::epptr());	// change write position to match
; 247  : 				}
; 248  : 			else

  0022b	eb 10		 jmp	 SHORT $LN11@seekoff
$LN10@seekoff:

; 249  : 				_Off = _BADOFF;

  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00232	8b 08		 mov	 ecx, DWORD PTR [eax]
  00234	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  00237	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0023a	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN11@seekoff:
  0023d	e9 73 01 00 00	 jmp	 $LN4@seekoff
$LN3@seekoff:

; 250  : 			}
; 251  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  00242	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  00245	83 e0 02	 and	 eax, 2
  00248	0f 84 4f 01 00
	00		 je	 $LN13@seekoff
  0024e	8b f4		 mov	 esi, esp
  00250	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00259	3b f4		 cmp	 esi, esp
  0025b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00260	85 c0		 test	 eax, eax
  00262	0f 84 35 01 00
	00		 je	 $LN13@seekoff

; 252  : 			{	// position within write buffer
; 253  : 			if (_Way == ios_base::end)

  00268	83 7d 14 02	 cmp	 DWORD PTR __Way$[ebp], 2
  0026c	75 2b		 jne	 SHORT $LN15@seekoff

; 254  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0026e	8b f4		 mov	 esi, esp
  00270	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00273	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00279	3b f4		 cmp	 esi, esp
  0027b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00280	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00283	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00286	2b d0		 sub	 edx, eax
  00288	8b c2		 mov	 eax, edx
  0028a	99		 cdq
  0028b	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  0028e	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  00291	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00294	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
  00297	eb 55		 jmp	 SHORT $LN16@seekoff
$LN15@seekoff:

; 255  : 			else if (_Way == ios_base::cur)

  00299	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0029d	75 39		 jne	 SHORT $LN17@seekoff

; 256  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  0029f	8b f4		 mov	 esi, esp
  002a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  002aa	3b f4		 cmp	 esi, esp
  002ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b1	8b f0		 mov	 esi, eax
  002b3	8b fc		 mov	 edi, esp
  002b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  002be	3b fc		 cmp	 edi, esp
  002c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c5	2b f0		 sub	 esi, eax
  002c7	8b c6		 mov	 eax, esi
  002c9	99		 cdq
  002ca	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  002cd	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  002d0	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  002d3	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
  002d6	eb 16		 jmp	 SHORT $LN16@seekoff
$LN17@seekoff:

; 257  : 			else if (_Way != ios_base::beg)

  002d8	83 7d 14 00	 cmp	 DWORD PTR __Way$[ebp], 0
  002dc	74 10		 je	 SHORT $LN16@seekoff

; 258  : 				_Off = _BADOFF;

  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  002e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e5	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  002e8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002eb	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN16@seekoff:

; 259  : 
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  002ee	83 7d 10 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  002f2	0f 8c 93 00 00
	00		 jl	 $LN20@seekoff
  002f8	7f 0a		 jg	 SHORT $LN26@seekoff
  002fa	83 7d 0c 00	 cmp	 DWORD PTR __Off$[ebp], 0
  002fe	0f 82 87 00 00
	00		 jb	 $LN20@seekoff
$LN26@seekoff:
  00304	8b f4		 mov	 esi, esp
  00306	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0030f	3b f4		 cmp	 esi, esp
  00311	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00316	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00319	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0031c	2b d0		 sub	 edx, eax
  0031e	8b c2		 mov	 eax, edx
  00320	99		 cdq
  00321	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv453[ebp], eax
  00327	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv453[ebp+4], edx
  0032d	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00330	3b 85 30 ff ff
	ff		 cmp	 eax, DWORD PTR tv453[ebp+4]
  00336	7f 53		 jg	 SHORT $LN20@seekoff
  00338	7c 0b		 jl	 SHORT $LN27@seekoff
  0033a	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  0033d	3b 8d 2c ff ff
	ff		 cmp	 ecx, DWORD PTR tv453[ebp]
  00343	77 46		 ja	 SHORT $LN20@seekoff
$LN27@seekoff:

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()

  00345	8b f4		 mov	 esi, esp
  00347	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0034a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00350	3b f4		 cmp	 esi, esp
  00352	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00357	8b f0		 mov	 esi, eax
  00359	8b fc		 mov	 edi, esp
  0035b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00364	3b fc		 cmp	 edi, esp
  00366	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036b	2b f0		 sub	 esi, eax
  0036d	8b c6		 mov	 eax, esi
  0036f	99		 cdq
  00370	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  00373	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  00376	8b f4		 mov	 esi, esp
  00378	50		 push	 eax
  00379	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0037c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  00382	3b f4		 cmp	 esi, esp
  00384	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 262  : 					- _Mysb::pptr() + _Off));	// change write position
; 263  : 			else

  00389	eb 10		 jmp	 SHORT $LN21@seekoff
$LN20@seekoff:

; 264  : 				_Off = _BADOFF;

  0038b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00390	8b 08		 mov	 ecx, DWORD PTR [eax]
  00392	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  00395	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00398	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN21@seekoff:
  0039b	eb 18		 jmp	 SHORT $LN4@seekoff
$LN13@seekoff:

; 265  : 			}
; 266  : 
; 267  : 		else if (_Off != 0)

  0039d	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  003a0	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  003a3	74 10		 je	 SHORT $LN4@seekoff

; 268  : 
; 269  : 
; 270  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  003aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ac	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  003af	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003b2	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN4@seekoff:

; 271  : 		return (pos_type(_Off));

  003b5	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  003b8	50		 push	 eax
  003b9	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  003bc	51		 push	 ecx
  003bd	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  003c0	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  003c5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 272  : 		}

  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	5b		 pop	 ebx
  003cb	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  003d1	3b ec		 cmp	 ebp, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	8b e5		 mov	 esp, ebp
  003da	5d		 pop	 ebp
  003db	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 207  : 		{	// get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		if (_Mysb::gptr() == 0)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	75 0f		 jne	 SHORT $LN2@underflow

; 209  : 			return (_Traits::eof());	// no character buffer, fail

  00039	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003e	e9 54 01 00 00	 jmp	 $LN1@underflow
  00043	e9 4f 01 00 00	 jmp	 $LN1@underflow
$LN2@underflow:

; 210  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00048	8b f4		 mov	 esi, esp
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b f0		 mov	 esi, eax
  0005c	8b fc		 mov	 edi, esp
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00067	3b fc		 cmp	 edi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	3b f0		 cmp	 esi, eax
  00070	73 25		 jae	 SHORT $LN4@underflow

; 211  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00072	8b f4		 mov	 esi, esp
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0008a	83 c4 04	 add	 esp, 4
  0008d	e9 05 01 00 00	 jmp	 $LN1@underflow

; 212  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0

  00092	e9 00 01 00 00	 jmp	 $LN1@underflow
$LN4@underflow:

; 213  : 			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))

  00097	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0009d	83 e1 04	 and	 ecx, 4
  000a0	75 5a		 jne	 SHORT $LN8@underflow
  000a2	8b f4		 mov	 esi, esp
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	85 c0		 test	 eax, eax
  000b6	74 44		 je	 SHORT $LN8@underflow
  000b8	8b f4		 mov	 esi, esp
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b f0		 mov	 esi, eax
  000cc	8b fc		 mov	 edi, esp
  000ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000d7	3b fc		 cmp	 edi, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	3b f0		 cmp	 esi, eax
  000e0	77 29		 ja	 SHORT $LN6@underflow
  000e2	8b f4		 mov	 esi, esp
  000e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ed	3b f4		 cmp	 esi, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  000fa	77 0f		 ja	 SHORT $LN6@underflow
$LN8@underflow:

; 214  : 			return (_Traits::eof());	// can't read, fail

  000fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00101	e9 91 00 00 00	 jmp	 $LN1@underflow

; 215  : 		else

  00106	e9 8c 00 00 00	 jmp	 $LN1@underflow
$LN6@underflow:

; 216  : 			{	// extend read buffer into written area, then return buffered
; 217  : 			if (_Seekhigh < _Mysb::pptr())

  0010b	8b f4		 mov	 esi, esp
  0010d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00116	3b f4		 cmp	 esi, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00123	73 18		 jae	 SHORT $LN9@underflow

; 218  : 				_Seekhigh = _Mysb::pptr();

  00125	8b f4		 mov	 esi, esp
  00127	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00130	3b f4		 cmp	 esi, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$LN9@underflow:

; 219  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  0013d	8b f4		 mov	 esi, esp
  0013f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00142	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00145	51		 push	 ecx
  00146	8b fc		 mov	 edi, esp
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00151	3b fc		 cmp	 edi, esp
  00153	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00158	50		 push	 eax
  00159	8b fc		 mov	 edi, esp
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00164	3b fc		 cmp	 edi, esp
  00166	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016b	50		 push	 eax
  0016c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00175	3b f4		 cmp	 esi, esp
  00177	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  0017c	8b f4		 mov	 esi, esp
  0017e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00187	3b f4		 cmp	 esi, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00194	83 c4 04	 add	 esp, 4
$LN1@underflow:

; 221  : 			}
; 222  : 		}

  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  001a0	3b ec		 cmp	 ebp, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -221						; size = 1
$T3 = -212						; size = 4
_this$ = -8						; size = 4
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 190  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 191  : 		if (_Mysb::gptr() == 0
; 192  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 193  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	0f 84 9f 00 00
	00		 je	 $LN4@pbackfail
  0003d	8b f4		 mov	 esi, esp
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f0		 mov	 esi, eax
  00051	8b fc		 mov	 edi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005c	3b fc		 cmp	 edi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	3b f0		 cmp	 esi, eax
  00065	76 75		 jbe	 SHORT $LN4@pbackfail
  00067	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0006c	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00072	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00075	50		 push	 eax
  00076	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00082	83 c4 08	 add	 esp, 8
  00085	0f b6 d0	 movzx	 edx, al
  00088	85 d2		 test	 edx, edx
  0008a	75 59		 jne	 SHORT $LN2@pbackfail
  0008c	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00095	83 c4 04	 add	 esp, 4
  00098	88 85 23 ff ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  0009e	8b f4		 mov	 esi, esp
  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	b9 01 00 00 00	 mov	 ecx, 1
  000b5	6b d1 ff	 imul	 edx, ecx, -1
  000b8	03 c2		 add	 eax, edx
  000ba	50		 push	 eax
  000bb	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?eq@?$char_traits@D@std@@SA_NABD0@Z ; std::char_traits<char>::eq
  000c7	83 c4 08	 add	 esp, 8
  000ca	0f b6 c8	 movzx	 ecx, al
  000cd	85 c9		 test	 ecx, ecx
  000cf	75 14		 jne	 SHORT $LN2@pbackfail
  000d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000d7	83 e1 02	 and	 ecx, 2
  000da	74 09		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 194  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 195  : 			&& _Mystate & _Constant))
; 196  : 			return (_Traits::eof());	// can't put back, fail

  000dc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000e1	eb 69		 jmp	 SHORT $LN1@pbackfail

; 197  : 		else

  000e3	eb 67		 jmp	 SHORT $LN1@pbackfail
$LN2@pbackfail:

; 198  : 			{	// back up one position and store put-back character
; 199  : 			_Mysb::gbump(-1);

  000e5	8b f4		 mov	 esi, esp
  000e7	6a ff		 push	 -1
  000e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 200  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  000f9	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000fe	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00104	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00107	50		 push	 eax
  00108	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00114	83 c4 08	 add	 esp, 8
  00117	0f b6 d0	 movzx	 edx, al
  0011a	85 d2		 test	 edx, edx
  0011c	75 22		 jne	 SHORT $LN5@pbackfail

; 201  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0011e	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00127	83 c4 04	 add	 esp, 4
  0012a	8a d8		 mov	 bl, al
  0012c	8b f4		 mov	 esi, esp
  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00137	3b f4		 cmp	 esi, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013e	88 18		 mov	 BYTE PTR [eax], bl
$LN5@pbackfail:

; 202  : 			return (_Traits::not_eof(_Meta));

  00140	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  00149	83 c4 04	 add	 esp, 4
$LN1@pbackfail:

; 203  : 			}
; 204  : 		}

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
  0014f	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00155	3b ec		 cmp	 ebp, esp
  00157	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
tv199 = -280						; size = 4
tv195 = -280						; size = 4
$T1 = -272						; size = 4
__Oldptr$2 = -68					; size = 4
__Newptr$3 = -56					; size = 4
__Inc$4 = -44						; size = 4
__Newsize$5 = -32					; size = 4
__Oldsize$6 = -20					; size = 4
_this$ = -8						; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 120  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00013	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 		if (_Mystate & _Constant)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00029	83 e1 02	 and	 ecx, 2
  0002c	74 0c		 je	 SHORT $LN4@overflow

; 122  : 			return (_Traits::eof());	// array nonmutable, fail

  0002e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00033	e9 cb 03 00 00	 jmp	 $LN1@overflow
  00038	eb 36		 jmp	 SHORT $LN5@overflow
$LN4@overflow:

; 123  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0003a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00045	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00048	50		 push	 eax
  00049	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00055	83 c4 08	 add	 esp, 8
  00058	0f b6 d0	 movzx	 edx, al
  0005b	85 d2		 test	 edx, edx
  0005d	74 11		 je	 SHORT $LN5@overflow

; 124  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0005f	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 93 03 00 00	 jmp	 $LN1@overflow
$LN5@overflow:

; 125  : 
; 126  : 		if (_Mystate & _Append
; 127  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00070	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00076	83 e1 08	 and	 ecx, 8
  00079	74 6f		 je	 SHORT $LN7@overflow
  0007b	8b f4		 mov	 esi, esp
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	85 c0		 test	 eax, eax
  0008f	74 59		 je	 SHORT $LN7@overflow
  00091	8b f4		 mov	 esi, esp
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	3b 41 38	 cmp	 eax, DWORD PTR [ecx+56]
  000a9	73 3f		 jae	 SHORT $LN7@overflow

; 128  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  000ab	8b f4		 mov	 esi, esp
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000b6	3b f4		 cmp	 esi, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b f4		 mov	 esi, esp
  000bf	50		 push	 eax
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c6	51		 push	 ecx
  000c7	8b fc		 mov	 edi, esp
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000d2	3b fc		 cmp	 edi, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	50		 push	 eax
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  000e3	3b f4		 cmp	 esi, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@overflow:

; 129  : 
; 130  : 		if (_Mysb::pptr() != 0
; 131  : 			&& _Mysb::pptr() < _Mysb::epptr())

  000ea	8b f4		 mov	 esi, esp
  000ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	85 c0		 test	 eax, eax
  000fe	74 59		 je	 SHORT $LN8@overflow
  00100	8b f4		 mov	 esi, esp
  00102	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0010b	3b f4		 cmp	 esi, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b f0		 mov	 esi, eax
  00114	8b fc		 mov	 edi, esp
  00116	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0011f	3b fc		 cmp	 edi, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	3b f0		 cmp	 esi, eax
  00128	73 2f		 jae	 SHORT $LN8@overflow

; 132  : 			{	// room in buffer, store it
; 133  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0012a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00133	83 c4 04	 add	 esp, 4
  00136	8a d8		 mov	 bl, al
  00138	8b f4		 mov	 esi, esp
  0013a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	88 18		 mov	 BYTE PTR [eax], bl

; 134  : 			return (_Meta);

  0014c	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0014f	e9 af 02 00 00	 jmp	 $LN1@overflow

; 135  : 			}
; 136  : 		else

  00154	e9 aa 02 00 00	 jmp	 $LN1@overflow
$LN8@overflow:

; 137  : 			{	// grow buffer and store element
; 138  : 			size_t _Oldsize = _Mysb::pptr() == 0

  00159	8b f4		 mov	 esi, esp
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00164	3b f4		 cmp	 esi, esp
  00166	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016b	85 c0		 test	 eax, eax
  0016d	75 0c		 jne	 SHORT $LN20@overflow
  0016f	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv195[ebp], 0
  00179	eb 2e		 jmp	 SHORT $LN21@overflow
$LN20@overflow:
  0017b	8b f4		 mov	 esi, esp
  0017d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018d	8b f0		 mov	 esi, eax
  0018f	8b fc		 mov	 edi, esp
  00191	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0019a	3b fc		 cmp	 edi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	2b f0		 sub	 esi, eax
  001a3	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR tv195[ebp], esi
$LN21@overflow:
  001a9	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv195[ebp]
  001af	89 45 ec	 mov	 DWORD PTR __Oldsize$6[ebp], eax

; 139  : 				? 0 : _Mysb::epptr() - _Mysb::eback();
; 140  : 			size_t _Newsize = _Oldsize;

  001b2	8b 45 ec	 mov	 eax, DWORD PTR __Oldsize$6[ebp]
  001b5	89 45 e0	 mov	 DWORD PTR __Newsize$5[ebp], eax

; 141  : 			size_t _Inc = _Newsize / 2 < _MINSIZE

  001b8	8b 45 e0	 mov	 eax, DWORD PTR __Newsize$5[ebp]
  001bb	d1 e8		 shr	 eax, 1
  001bd	83 f8 20	 cmp	 eax, 32			; 00000020H
  001c0	73 0c		 jae	 SHORT $LN22@overflow
  001c2	c7 85 e8 fe ff
	ff 20 00 00 00	 mov	 DWORD PTR tv199[ebp], 32 ; 00000020H
  001cc	eb 0b		 jmp	 SHORT $LN23@overflow
$LN22@overflow:
  001ce	8b 4d e0	 mov	 ecx, DWORD PTR __Newsize$5[ebp]
  001d1	d1 e9		 shr	 ecx, 1
  001d3	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
$LN23@overflow:
  001d9	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR tv199[ebp]
  001df	89 55 d4	 mov	 DWORD PTR __Inc$4[ebp], edx
$LN2@overflow:

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  001e2	83 7d d4 00	 cmp	 DWORD PTR __Inc$4[ebp], 0
  001e6	76 17		 jbe	 SHORT $LN3@overflow
  001e8	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  001ed	2b 45 d4	 sub	 eax, DWORD PTR __Inc$4[ebp]
  001f0	3b 45 e0	 cmp	 eax, DWORD PTR __Newsize$5[ebp]
  001f3	73 0a		 jae	 SHORT $LN3@overflow

; 145  : 				_Inc /= 2;	// increment causes overflow, halve it

  001f5	8b 45 d4	 mov	 eax, DWORD PTR __Inc$4[ebp]
  001f8	d1 e8		 shr	 eax, 1
  001fa	89 45 d4	 mov	 DWORD PTR __Inc$4[ebp], eax
  001fd	eb e3		 jmp	 SHORT $LN2@overflow
$LN3@overflow:

; 146  : 			if (_Inc == 0)

  001ff	83 7d d4 00	 cmp	 DWORD PTR __Inc$4[ebp], 0
  00203	75 0a		 jne	 SHORT $LN10@overflow

; 147  : 				return (_Traits::eof());	// buffer can't grow, fail

  00205	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0020a	e9 f4 01 00 00	 jmp	 $LN1@overflow
$LN10@overflow:

; 148  : 
; 149  : 			_Newsize += _Inc;

  0020f	8b 45 e0	 mov	 eax, DWORD PTR __Newsize$5[ebp]
  00212	03 45 d4	 add	 eax, DWORD PTR __Inc$4[ebp]
  00215	89 45 e0	 mov	 DWORD PTR __Newsize$5[ebp], eax

; 150  : 
; 151  : 			_Elem *_Newptr = _Unfancy(_Al.allocate(_Newsize));

  00218	8b 45 e0	 mov	 eax, DWORD PTR __Newsize$5[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021f	83 c1 40	 add	 ecx, 64			; 00000040H
  00222	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0022d	83 c4 04	 add	 esp, 4
  00230	89 45 c8	 mov	 DWORD PTR __Newptr$3[ebp], eax

; 152  : 			_Elem *_Oldptr = _Mysb::eback();

  00233	8b f4		 mov	 esi, esp
  00235	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0023e	3b f4		 cmp	 esi, esp
  00240	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00245	89 45 bc	 mov	 DWORD PTR __Oldptr$2[ebp], eax

; 153  : 
; 154  : 			if (0 < _Oldsize)

  00248	83 7d ec 00	 cmp	 DWORD PTR __Oldsize$6[ebp], 0
  0024c	76 14		 jbe	 SHORT $LN11@overflow

; 155  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

  0024e	8b 45 ec	 mov	 eax, DWORD PTR __Oldsize$6[ebp]
  00251	50		 push	 eax
  00252	8b 4d bc	 mov	 ecx, DWORD PTR __Oldptr$2[ebp]
  00255	51		 push	 ecx
  00256	8b 55 c8	 mov	 edx, DWORD PTR __Newptr$3[ebp]
  00259	52		 push	 edx
  0025a	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0025f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@overflow:

; 156  : 
; 157  : 			if (_Oldsize == 0)

  00262	83 7d ec 00	 cmp	 DWORD PTR __Oldsize$6[ebp], 0
  00266	75 75		 jne	 SHORT $LN12@overflow

; 158  : 				{	// first growth, set up pointers
; 159  : 				_Seekhigh = _Newptr;

  00268	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0026b	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  0026e	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 160  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  00271	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  00274	03 45 e0	 add	 eax, DWORD PTR __Newsize$5[ebp]
  00277	8b f4		 mov	 esi, esp
  00279	50		 push	 eax
  0027a	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  0027d	51		 push	 ecx
  0027e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00281	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
  00287	3b f4		 cmp	 esi, esp
  00289	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  : 				if (_Mystate & _Noread)

  0028e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00291	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00294	83 e1 04	 and	 ecx, 4
  00297	74 1e		 je	 SHORT $LN14@overflow

; 162  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00299	8b f4		 mov	 esi, esp
  0029b	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  0029e	50		 push	 eax
  0029f	6a 00		 push	 0
  002a1	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  002a4	51		 push	 ecx
  002a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  002ae	3b f4		 cmp	 esi, esp
  002b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  : 				else

  002b5	eb 21		 jmp	 SHORT $LN15@overflow
$LN14@overflow:

; 164  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  002b7	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  002ba	83 c0 01	 add	 eax, 1
  002bd	8b f4		 mov	 esi, esp
  002bf	50		 push	 eax
  002c0	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  002c3	51		 push	 ecx
  002c4	8b 55 c8	 mov	 edx, DWORD PTR __Newptr$3[ebp]
  002c7	52		 push	 edx
  002c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  002d1	3b f4		 cmp	 esi, esp
  002d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@overflow:

; 165  : 				}
; 166  : 			else

  002d8	e9 cb 00 00 00	 jmp	 $LN13@overflow
$LN12@overflow:

; 167  : 				{	// not first growth, adjust pointers
; 168  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  002dd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002e0	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  002e3	2b 4d bc	 sub	 ecx, DWORD PTR __Oldptr$2[ebp]
  002e6	03 4d c8	 add	 ecx, DWORD PTR __Newptr$3[ebp]
  002e9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002ec	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 169  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),

  002ef	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  002f2	03 45 e0	 add	 eax, DWORD PTR __Newsize$5[ebp]
  002f5	8b f4		 mov	 esi, esp
  002f7	50		 push	 eax
  002f8	8b fc		 mov	 edi, esp
  002fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00303	3b fc		 cmp	 edi, esp
  00305	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0030a	2b 45 bc	 sub	 eax, DWORD PTR __Oldptr$2[ebp]
  0030d	03 45 c8	 add	 eax, DWORD PTR __Newptr$3[ebp]
  00310	50		 push	 eax
  00311	8b fc		 mov	 edi, esp
  00313	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00316	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0031c	3b fc		 cmp	 edi, esp
  0031e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00323	2b 45 bc	 sub	 eax, DWORD PTR __Oldptr$2[ebp]
  00326	03 45 c8	 add	 eax, DWORD PTR __Newptr$3[ebp]
  00329	50		 push	 eax
  0032a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0032d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00333	3b f4		 cmp	 esi, esp
  00335	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 170  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 171  : 					_Newptr + _Newsize);
; 172  : 				if (_Mystate & _Noread)

  0033a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0033d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00340	83 e1 04	 and	 ecx, 4
  00343	74 1e		 je	 SHORT $LN16@overflow

; 173  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00345	8b f4		 mov	 esi, esp
  00347	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  0034a	50		 push	 eax
  0034b	6a 00		 push	 0
  0034d	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  00350	51		 push	 ecx
  00351	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0035a	3b f4		 cmp	 esi, esp
  0035c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 174  : 				else

  00361	eb 45		 jmp	 SHORT $LN13@overflow
$LN16@overflow:

; 175  : 					_Mysb::setg(_Newptr,

  00363	8b f4		 mov	 esi, esp
  00365	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00368	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0036e	3b f4		 cmp	 esi, esp
  00370	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00375	83 c0 01	 add	 eax, 1
  00378	8b f4		 mov	 esi, esp
  0037a	50		 push	 eax
  0037b	8b fc		 mov	 edi, esp
  0037d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00386	3b fc		 cmp	 edi, esp
  00388	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0038d	2b 45 bc	 sub	 eax, DWORD PTR __Oldptr$2[ebp]
  00390	03 45 c8	 add	 eax, DWORD PTR __Newptr$3[ebp]
  00393	50		 push	 eax
  00394	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  00397	50		 push	 eax
  00398	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0039b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  003a1	3b f4		 cmp	 esi, esp
  003a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@overflow:

; 176  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 177  : 						_Mysb::pptr() + 1);
; 178  : 				}
; 179  : 
; 180  : 			if (_Mystate & _Allocated)

  003a8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ab	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  003ae	83 e1 01	 and	 ecx, 1
  003b1	74 1c		 je	 SHORT $LN18@overflow

; 181  : 				_Al.deallocate(pointer_traits<_Ptrty>::pointer_to(*_Oldptr), _Oldsize);

  003b3	8b 45 ec	 mov	 eax, DWORD PTR __Oldsize$6[ebp]
  003b6	50		 push	 eax
  003b7	8b 4d bc	 mov	 ecx, DWORD PTR __Oldptr$2[ebp]
  003ba	51		 push	 ecx
  003bb	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
  003c0	83 c4 04	 add	 esp, 4
  003c3	50		 push	 eax
  003c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003c7	83 c1 40	 add	 ecx, 64			; 00000040H
  003ca	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN18@overflow:

; 182  : 			_Mystate |= _Allocated;

  003cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d2	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  003d5	83 c9 01	 or	 ecx, 1
  003d8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003db	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 183  : 
; 184  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  003de	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  003e7	83 c4 04	 add	 esp, 4
  003ea	8a d8		 mov	 bl, al
  003ec	8b f4		 mov	 esi, esp
  003ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  003f7	3b f4		 cmp	 esi, esp
  003f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fe	88 18		 mov	 BYTE PTR [eax], bl

; 185  : 			return (_Meta);

  00400	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN1@overflow:

; 186  : 			}
; 187  : 		}

  00403	5f		 pop	 edi
  00404	5e		 pop	 esi
  00405	5b		 pop	 ebx
  00406	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  0040c	3b ec		 cmp	 ebp, esp
  0040e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00413	8b e5		 mov	 esp, ebp
  00415	5d		 pop	 ebp
  00416	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
tv91 = -332						; size = 4
$T1 = -324						; size = 4
__Nul$2 = -120						; size = 28
__Str$3 = -84						; size = 28
__Str$4 = -48						; size = 28
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 93   : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd b4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-332]
  00013	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 94   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00037	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0003d	83 e1 02	 and	 ecx, 2
  00040	0f 85 c0 00 00
	00		 jne	 $LN2@str
  00046	8b f4		 mov	 esi, esp
  00048	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 a6 00 00
	00		 je	 $LN2@str

; 95   : 			{	// writable, make string from write buffer
; 96   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()

  00060	8b f4		 mov	 esi, esp
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00078	73 1a		 jae	 SHORT $LN7@str
  0007a	8b f4		 mov	 esi, esp
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
  00092	eb 0c		 jmp	 SHORT $LN8@str
$LN7@str:
  00094	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0009a	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
$LN8@str:
  000a0	8b f4		 mov	 esi, esp
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv91[ebp]
  000b8	2b c8		 sub	 ecx, eax
  000ba	51		 push	 ecx
  000bb	8b f4		 mov	 esi, esp
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000c6	3b f4		 cmp	 esi, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	50		 push	 eax
  000ce	8d 4d d0	 lea	 ecx, DWORD PTR __Str$4[ebp]
  000d1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
; 98   : 			return (_Str);

  000d6	8d 45 d0	 lea	 eax, DWORD PTR __Str$4[ebp]
  000d9	50		 push	 eax
  000da	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000dd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e2	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  000e8	83 c9 01	 or	 ecx, 1
  000eb	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  000f1	8d 4d d0	 lea	 ecx, DWORD PTR __Str$4[ebp]
  000f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000fc	e9 c6 00 00 00	 jmp	 $LN1@str
  00101	e9 c1 00 00 00	 jmp	 $LN1@str
$LN2@str:

; 99   : 			}
; 100  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  00106	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0010c	83 e1 04	 and	 ecx, 4
  0010f	0f 85 84 00 00
	00		 jne	 $LN4@str
  00115	8b f4		 mov	 esi, esp
  00117	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00120	3b f4		 cmp	 esi, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	85 c0		 test	 eax, eax
  00129	74 6e		 je	 SHORT $LN4@str

; 101  : 			{	// readable, make string from read buffer
; 102  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  0012b	8b f4		 mov	 esi, esp
  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00136	3b f4		 cmp	 esi, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b f0		 mov	 esi, eax
  0013f	8b fc		 mov	 edi, esp
  00141	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0014a	3b fc		 cmp	 edi, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00151	2b f0		 sub	 esi, eax
  00153	56		 push	 esi
  00154	8b f4		 mov	 esi, esp
  00156	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0015f	3b f4		 cmp	 esi, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00166	50		 push	 eax
  00167	8d 4d ac	 lea	 ecx, DWORD PTR __Str$3[ebp]
  0016a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 103  : 			return (_Str);

  0016f	8d 45 ac	 lea	 eax, DWORD PTR __Str$3[ebp]
  00172	50		 push	 eax
  00173	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00176	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0017b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00181	83 c9 01	 or	 ecx, 1
  00184	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0018a	8d 4d ac	 lea	 ecx, DWORD PTR __Str$3[ebp]
  0018d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00192	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00195	eb 30		 jmp	 SHORT $LN1@str

; 104  : 			}
; 105  : 		else

  00197	eb 2e		 jmp	 SHORT $LN1@str
$LN4@str:

; 106  : 			{	// inaccessible, return empty string
; 107  : 			_Mystr _Nul;

  00199	8d 4d 88	 lea	 ecx, DWORD PTR __Nul$2[ebp]
  0019c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 108  : 			return (_Nul);

  001a1	8d 45 88	 lea	 eax, DWORD PTR __Nul$2[ebp]
  001a4	50		 push	 eax
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001a8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ad	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  001b3	83 c9 01	 or	 ecx, 1
  001b6	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  001bc	8d 4d 88	 lea	 ecx, DWORD PTR __Nul$2[ebp]
  001bf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@str:

; 109  : 			}
; 110  : 		}

  001c7	52		 push	 edx
  001c8	8b cd		 mov	 ecx, ebp
  001ca	50		 push	 eax
  001cb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@str
  001d1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001d6	58		 pop	 eax
  001d7	5a		 pop	 edx
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e5	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  001eb	3b ec		 cmp	 ebp, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c2 04 00	 ret	 4
$LN18@str:
  001f8	03 00 00 00	 DD	 3
  001fc	00 00 00 00	 DD	 $LN17@str
$LN17@str:
  00200	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00204	1c 00 00 00	 DD	 28			; 0000001cH
  00208	00 00 00 00	 DD	 $LN14@str
  0020c	ac ff ff ff	 DD	 -84			; ffffffacH
  00210	1c 00 00 00	 DD	 28			; 0000001cH
  00214	00 00 00 00	 DD	 $LN15@str
  00218	88 ff ff ff	 DD	 -120			; ffffff88H
  0021c	1c 00 00 00	 DD	 28			; 0000001cH
  00220	00 00 00 00	 DD	 $LN16@str
$LN16@str:
  00224	5f		 DB	 95			; 0000005fH
  00225	4e		 DB	 78			; 0000004eH
  00226	75		 DB	 117			; 00000075H
  00227	6c		 DB	 108			; 0000006cH
  00228	00		 DB	 0
$LN15@str:
  00229	5f		 DB	 95			; 0000005fH
  0022a	53		 DB	 83			; 00000053H
  0022b	74		 DB	 116			; 00000074H
  0022c	72		 DB	 114			; 00000072H
  0022d	00		 DB	 0
$LN14@str:
  0022e	5f		 DB	 95			; 0000005fH
  0022f	53		 DB	 83			; 00000053H
  00230	74		 DB	 116			; 00000074H
  00231	72		 DB	 114			; 00000072H
  00232	00		 DB	 0
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 75   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 76   : 		_Tidy();

  0004b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 77   : 		}

  00053	8b f4		 mov	 esi, esp
  00055	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 28   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 		ios_base::in | ios_base::out)
; 30   : 		{	// construct empty character buffer from mode

  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00064	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 40	 add	 ecx, 64			; 00000040H
  0006a	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>

; 31   : 		_Init(0, 0, _Getstate(_Mode));

  0006f	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  00072	50		 push	 eax
  00073	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
  0007b	50		 push	 eax
  0007c	6a 00		 push	 0
  0007e	6a 00		 push	 0
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init

; 32   : 		}

  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 643  : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 644  : 		return (_Stringbuffer.str());

  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 18	 add	 ecx, 24			; 00000018H
  00037	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  0003c	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00042	83 c9 01	 or	 ecx, 1
  00045	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0004b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 645  : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 634  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00029	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 44 10 98 00
	00 00 00	 mov	 DWORD PTR [eax+edx-104], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  0003d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00040	83 ea 68	 sub	 edx, 104		; 00000068H
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 54 01 94	 mov	 DWORD PTR [ecx+eax-108], edx

; 635  : 		}

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 e9 50	 sub	 ecx, 80			; 00000050H
  00059	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 e9 48	 sub	 ecx, 72			; 00000048H
  00064	8b f4		 mov	 esi, esp
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\sstream
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T2 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 590  : 		{	// construct empty character buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	83 7d 0c 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 3e		 je	 SHORT $LN2@basic_stri
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 68	 add	 ecx, 104		; 00000068H
  0006b	8b f4		 mov	 esi, esp
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00081	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_stri:

; 588  : 		: _Mybase(&_Stringbuffer),

  00090	8b f4		 mov	 esi, esp
  00092	6a 00		 push	 0
  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	83 c0 18	 add	 eax, 24			; 00000018H
  0009a	50		 push	 eax
  0009b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 590  : 		{	// construct empty character buffer

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ba	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000c4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cc	83 ea 68	 sub	 edx, 104		; 00000068H
  000cf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx

; 589  : 			_Stringbuffer(_Mode)

  000de	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	83 c1 18	 add	 ecx, 24			; 00000018H
  000e8	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 591  : 		}

  000ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0010b	3b ec		 cmp	 ebp, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN5@basic_stri
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 68	 add	 ecx, 104		; 00000068H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN5@basic_stri:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 20	 add	 ecx, 32			; 00000020H
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 70	 add	 ecx, 112		; 00000070H
  00029	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 70	 add	 ecx, 112		; 00000070H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 70	 sub	 ecx, 112		; 00000070H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 14		 je	 SHORT $LN2@scalar
  00036	68 b8 00 00 00	 push	 184			; 000000b8H
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 e8 70	 sub	 eax, 112		; 00000070H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 e8 70	 sub	 eax, 112		; 00000070H
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 58		 push	 88			; 00000058H
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 736  : 		{	// set up putback area

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 737  : 		if (_Mysb::eback() != &_Mychar)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0003b	3b c1		 cmp	 eax, ecx
  0003d	74 30		 je	 SHORT $LN2@Set_back

; 738  : 			{	// save current get buffer
; 739  : 			_Set_eback = _Mysb::eback();

  0003f	8b f4		 mov	 esi, esp
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 740  : 			_Set_egptr = _Mysb::egptr();

  00057	8b f4		 mov	 esi, esp
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	89 41 54	 mov	 DWORD PTR [ecx+84], eax
$LN2@Set_back:

; 741  : 			}
; 742  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 3d	 add	 eax, 61			; 0000003dH
  00075	8b f4		 mov	 esi, esp
  00077	50		 push	 eax
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0007e	51		 push	 ecx
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00082	83 c2 3c	 add	 edx, 60			; 0000003cH
  00085	52		 push	 edx
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 743  : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 730  : 		{	// restore buffer after putback

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 731  : 		if (_Mysb::eback() == &_Mychar)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0003b	3b c1		 cmp	 eax, ecx
  0003d	75 27		 jne	 SHORT $LN1@Reset_back

; 732  : 			_Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  0003f	8b f4		 mov	 esi, esp
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00047	51		 push	 ecx
  00048	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0004e	50		 push	 eax
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00055	52		 push	 edx
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Reset_back:

; 733  : 		}

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newpcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 711  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 712  : 		if (_Newpcvt->always_noconv())

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Newpcvt$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?always_noconv@codecvt_base@std@@QBE_NXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	74 0c		 je	 SHORT $LN2@Initcvt

; 713  : 			_Pcvt = 0;	// nothing to do

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 714  : 		else

  00046	eb 1b		 jmp	 SHORT $LN1@Initcvt
$LN2@Initcvt:

; 715  : 			{	// set up for nontrivial codecvt facet
; 716  : 			_Pcvt = _Newpcvt;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Newpcvt$[ebp]
  0004e	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 717  : 			_Mysb::_Init();	// reset any buffering

  00051	8b f4		 mov	 esi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Initcvt:

; 718  : 			}
; 719  : 		}

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
tv147 = -500						; size = 4
tv190 = -496						; size = 4
tv204 = -492						; size = 4
tv172 = -492						; size = 4
tv197 = -488						; size = 4
tv192 = -488						; size = 4
tv188 = -488						; size = 4
tv206 = -484						; size = 4
tv205 = -484						; size = 4
tv86 = -484						; size = 4
$T2 = -476						; size = 4
$T3 = -461						; size = 1
$T4 = -449						; size = 1
$T5 = -437						; size = 1
$T6 = -425						; size = 1
$T7 = -416						; size = 12
$T8 = -393						; size = 1
$T9 = -384						; size = 12
$T10 = -364						; size = 12
$T11 = -344						; size = 12
$T12 = -324						; size = 4
$T13 = -312						; size = 4
$T14 = -300						; size = 4
__Count$15 = -96					; size = 4
__Str$16 = -84						; size = 28
__Dest$17 = -48						; size = 4
__STRING_INC$18 = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 668  : 		{	// put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-500]
  00021	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 24 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 669  : 		if (_Pcvt == 0 || !_Wrotesome)

  0004f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00056	74 0b		 je	 SHORT $LN9@Endwrite
  00058	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  0005f	85 c9		 test	 ecx, ecx
  00061	75 0c		 jne	 SHORT $LN7@Endwrite
$LN9@Endwrite:

; 670  : 			return (true);

  00063	b0 01		 mov	 al, 1
  00065	e9 09 03 00 00	 jmp	 $LN1@Endwrite

; 671  : 		else

  0006a	e9 04 03 00 00	 jmp	 $LN1@Endwrite
$LN7@Endwrite:

; 672  : 			{	// may have to put
; 673  : 			const int _STRING_INC = 8;

  0006f	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$18[ebp], 8

; 674  : 			char *_Dest;
; 675  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00076	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0007b	8b f4		 mov	 esi, esp
  0007d	50		 push	 eax
  0007e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 10		 mov	 edx, DWORD PTR [eax]
  00083	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00089	ff d0		 call	 eax
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  00098	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0009d	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  000a3	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  000a9	51		 push	 ecx
  000aa	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000b6	83 c4 08	 add	 esp, 8
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	74 07		 je	 SHORT $LN10@Endwrite

; 676  : 				return (false);

  000c0	32 c0		 xor	 al, al
  000c2	e9 ac 02 00 00	 jmp	 $LN1@Endwrite
$LN10@Endwrite:

; 677  : 
; 678  : 			string _Str(_STRING_INC, '\0');

  000c7	6a 00		 push	 0
  000c9	6a 08		 push	 8
  000cb	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  000ce	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@Endwrite:

; 679  : 			for (;;)
; 680  : 				{
; 681  : 				switch (_Pcvt->unshift(_State,

  000da	8b f4		 mov	 esi, esp
  000dc	8d 45 d0	 lea	 eax, DWORD PTR __Dest$17[ebp]
  000df	50		 push	 eax
  000e0	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  000e6	51		 push	 ecx
  000e7	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  000ea	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000ef	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  000f5	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  000fb	89 95 18 fe ff
	ff		 mov	 DWORD PTR tv188[ebp], edx
  00101	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00105	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv188[ebp]
  0010b	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00110	8b f8		 mov	 edi, eax
  00112	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00115	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0011a	03 f8		 add	 edi, eax
  0011c	57		 push	 edi
  0011d	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00123	50		 push	 eax
  00124	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00127	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0012c	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv204[ebp], eax
  00132	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv204[ebp]
  00138	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv190[ebp], ecx
  0013e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00142	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv190[ebp]
  00148	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0014d	50		 push	 eax
  0014e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00151	83 c2 40	 add	 edx, 64			; 00000040H
  00154	52		 push	 edx
  00155	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
  00161	3b f4		 cmp	 esi, esp
  00163	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00168	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
  0016e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00172	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00178	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0017d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00181	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00187	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0018c	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp]
  00192	89 8d 0c fe ff
	ff		 mov	 DWORD PTR tv147[ebp], ecx
  00198	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR tv147[ebp], 0
  0019f	74 1b		 je	 SHORT $LN11@Endwrite
  001a1	83 bd 0c fe ff
	ff 01		 cmp	 DWORD PTR tv147[ebp], 1
  001a8	74 19		 je	 SHORT $LN12@Endwrite
  001aa	83 bd 0c fe ff
	ff 03		 cmp	 DWORD PTR tv147[ebp], 3
  001b1	0f 84 6c 01 00
	00		 je	 $LN16@Endwrite
  001b7	e9 85 01 00 00	 jmp	 $LN17@Endwrite
$LN11@Endwrite:

; 682  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 683  : 					{	// test result of homing conversion
; 684  : 					case codecvt_base::ok:
; 685  : 						_Wrotesome = false;	// homed successfully

  001bc	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001bf	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0
$LN12@Endwrite:

; 686  : 
; 687  : 					case codecvt_base::partial:	// fall through
; 688  : 						{	// put any generated bytes
; 689  : 						size_t _Count = _Dest - &*_Str.begin();

  001c3	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  001c9	50		 push	 eax
  001ca	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001cd	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001d2	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv205[ebp], eax
  001d8	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR tv205[ebp]
  001de	89 8d 18 fe ff
	ff		 mov	 DWORD PTR tv192[ebp], ecx
  001e4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001e8	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv192[ebp]
  001ee	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001f3	8b 55 d0	 mov	 edx, DWORD PTR __Dest$17[ebp]
  001f6	2b d0		 sub	 edx, eax
  001f8	89 55 a0	 mov	 DWORD PTR __Count$15[ebp], edx
  001fb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ff	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00205	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 690  : 						if (0 < _Count && _Count !=

  0020a	83 7d a0 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  0020e	76 70		 jbe	 SHORT $LN19@Endwrite
  00210	8b f4		 mov	 esi, esp
  00212	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00215	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00218	51		 push	 ecx
  00219	8b 55 a0	 mov	 edx, DWORD PTR __Count$15[ebp]
  0021c	52		 push	 edx
  0021d	6a 01		 push	 1
  0021f	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00225	50		 push	 eax
  00226	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00229	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0022e	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv206[ebp], eax
  00234	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR tv206[ebp]
  0023a	89 8d 18 fe ff
	ff		 mov	 DWORD PTR tv197[ebp], ecx
  00240	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00244	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0024a	83 ca 01	 or	 edx, 1
  0024d	89 95 24 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00253	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv197[ebp]
  00259	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0025e	50		 push	 eax
  0025f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00265	83 c4 10	 add	 esp, 16			; 00000010H
  00268	3b f4		 cmp	 esi, esp
  0026a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026f	39 45 a0	 cmp	 DWORD PTR __Count$15[ebp], eax
  00272	74 0c		 je	 SHORT $LN19@Endwrite
  00274	c7 85 14 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv172[ebp], 1
  0027e	eb 0a		 jmp	 SHORT $LN20@Endwrite
$LN19@Endwrite:
  00280	c7 85 14 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN20@Endwrite:
  0028a	8a 85 14 fe ff
	ff		 mov	 al, BYTE PTR tv172[ebp]
  00290	88 85 77 fe ff
	ff		 mov	 BYTE PTR $T8[ebp], al
  00296	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0029d	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  002a3	83 e1 01	 and	 ecx, 1
  002a6	74 12		 je	 SHORT $LN27@Endwrite
  002a8	83 a5 24 fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  002af	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  002b5	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN27@Endwrite:
  002ba	0f b6 95 77 fe
	ff ff		 movzx	 edx, BYTE PTR $T8[ebp]
  002c1	85 d2		 test	 edx, edx
  002c3	74 21		 je	 SHORT $LN13@Endwrite

; 691  : 							fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 692  : 							return (false);	// write failed

  002c5	c6 85 57 fe ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0
  002cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002d3	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  002d6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002db	8a 85 57 fe ff
	ff		 mov	 al, BYTE PTR $T6[ebp]
  002e1	e9 8d 00 00 00	 jmp	 $LN1@Endwrite
$LN13@Endwrite:

; 693  : 						if (!_Wrotesome)

  002e6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002e9	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  002ed	85 c9		 test	 ecx, ecx
  002ef	75 1e		 jne	 SHORT $LN14@Endwrite

; 694  : 							return (true);

  002f1	c6 85 4b fe ff
	ff 01		 mov	 BYTE PTR $T5[ebp], 1
  002f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002ff	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00302	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00307	8a 85 4b fe ff
	ff		 mov	 al, BYTE PTR $T5[ebp]
  0030d	eb 64		 jmp	 SHORT $LN1@Endwrite
$LN14@Endwrite:

; 695  : 						if (_Count == 0)

  0030f	83 7d a0 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  00313	75 0c		 jne	 SHORT $LN15@Endwrite

; 696  : 							_Str.append(_STRING_INC, '\0');	// try with more space

  00315	6a 00		 push	 0
  00317	6a 08		 push	 8
  00319	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0031c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN15@Endwrite:

; 697  : 						break;

  00321	eb 3c		 jmp	 SHORT $LN5@Endwrite
$LN16@Endwrite:

; 698  : 						}
; 699  : 
; 700  : 					case codecvt_base::noconv:
; 701  : 						return (true);	// nothing to do

  00323	c6 85 3f fe ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
  0032a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00331	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00334	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00339	8a 85 3f fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  0033f	eb 32		 jmp	 SHORT $LN1@Endwrite
$LN17@Endwrite:

; 702  : 
; 703  : 					default:
; 704  : 						return (false);	// conversion failed

  00341	c6 85 33 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  00348	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0034f	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00352	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00357	8a 85 33 fe ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  0035d	eb 14		 jmp	 SHORT $LN1@Endwrite
$LN5@Endwrite:

; 705  : 					}
; 706  : 				}

  0035f	e9 76 fd ff ff	 jmp	 $LN4@Endwrite

; 707  : 			}

  00364	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0036b	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0036e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@Endwrite:

; 708  : 		}

  00373	52		 push	 edx
  00374	8b cd		 mov	 ecx, ebp
  00376	50		 push	 eax
  00377	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@Endwrite
  0037d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00382	58		 pop	 eax
  00383	5a		 pop	 edx
  00384	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00387	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0038e	59		 pop	 ecx
  0038f	5f		 pop	 edi
  00390	5e		 pop	 esi
  00391	5b		 pop	 ebx
  00392	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00395	33 cd		 xor	 ecx, ebp
  00397	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039c	81 c4 f4 01 00
	00		 add	 esp, 500		; 000001f4H
  003a2	3b ec		 cmp	 ebp, esp
  003a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a9	8b e5		 mov	 esp, ebp
  003ab	5d		 pop	 ebp
  003ac	c3		 ret	 0
  003ad	0f 1f 00	 npad	 3
$LN32@Endwrite:
  003b0	02 00 00 00	 DD	 2
  003b4	00 00 00 00	 DD	 $LN31@Endwrite
$LN31@Endwrite:
  003b8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  003bc	04 00 00 00	 DD	 4
  003c0	00 00 00 00	 DD	 $LN28@Endwrite
  003c4	ac ff ff ff	 DD	 -84			; ffffffacH
  003c8	1c 00 00 00	 DD	 28			; 0000001cH
  003cc	00 00 00 00	 DD	 $LN29@Endwrite
$LN29@Endwrite:
  003d0	5f		 DB	 95			; 0000005fH
  003d1	53		 DB	 83			; 00000053H
  003d2	74		 DB	 116			; 00000074H
  003d3	72		 DB	 114			; 00000072H
  003d4	00		 DB	 0
$LN28@Endwrite:
  003d5	5f		 DB	 95			; 0000005fH
  003d6	44		 DB	 68			; 00000044H
  003d7	65		 DB	 101			; 00000065H
  003d8	73		 DB	 115			; 00000073H
  003d9	74		 DB	 116			; 00000074H
  003da	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1:
  00008	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2:
  00013	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3:
  0001e	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4:
  00029	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002f	83 e0 01	 and	 eax, 1
  00032	0f 84 12 00 00
	00		 je	 $LN26@Endwrite
  00038	83 a5 24 fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0003f	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN26@Endwrite:
  0004a	c3		 ret	 0
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 8a 08 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-504]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
tv66 = -260						; size = 4
__Nw$1 = -60						; size = 4
__Nr$2 = -48						; size = 4
__Pn$3 = -36						; size = 4
__Pb$4 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 633  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00013	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 634  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 635  : 
; 636  : 		_Closef = _Which == _Openfl;

  0002d	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  00031	75 0c		 jne	 SHORT $LN4@Init
  00033	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003d	eb 0a		 jmp	 SHORT $LN5@Init
$LN4@Init:
  0003f	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN5@Init:
  00049	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8a 8d fc fe ff
	ff		 mov	 cl, BYTE PTR tv66[ebp]
  00052	88 48 48	 mov	 BYTE PTR [eax+72], cl

; 637  : 		_Wrotesome = false;

  00055	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0

; 638  : 
; 639  : 		_Mysb::_Init();	// initialize stream buffer base object

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 640  : 
; 641  :  #ifndef _IORCNT
; 642  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 643  :   #define _IOWCNT _IOCNT
; 644  :  #endif /* _IORCNT */
; 645  : 
; 646  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0006e	83 7d 08 00	 cmp	 DWORD PTR __File$[ebp], 0
  00072	74 70		 je	 SHORT $LN2@Init
  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	85 c0		 test	 eax, eax
  0007b	74 67		 je	 SHORT $LN2@Init

; 647  : 			{	// point inside C stream with [first, first + count) buffer
; 648  : 			_Elem **_Pb = 0;

  0007d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Pb$4[ebp], 0

; 649  : 			_Elem **_Pn = 0;

  00084	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __Pn$3[ebp], 0

; 650  : 			int *_Nr = 0;

  0008b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Nr$2[ebp], 0

; 651  : 
; 652  : 			::_get_stream_buffer_pointers(

  00092	8b f4		 mov	 esi, esp
  00094	8d 45 d0	 lea	 eax, DWORD PTR __Nr$2[ebp]
  00097	50		 push	 eax
  00098	8d 4d dc	 lea	 ecx, DWORD PTR __Pn$3[ebp]
  0009b	51		 push	 ecx
  0009c	8d 55 e8	 lea	 edx, DWORD PTR __Pb$4[ebp]
  0009f	52		 push	 edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  000a3	50		 push	 eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___get_stream_buffer_pointers
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 653  : 				_File,
; 654  : 				reinterpret_cast<char***>(&_Pb),
; 655  : 				reinterpret_cast<char***>(&_Pn),
; 656  : 				&_Nr);
; 657  : 			int *_Nw = _Nr;

  000b4	8b 45 d0	 mov	 eax, DWORD PTR __Nr$2[ebp]
  000b7	89 45 c4	 mov	 DWORD PTR __Nw$1[ebp], eax

; 658  : 
; 659  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  000ba	8b f4		 mov	 esi, esp
  000bc	8b 45 c4	 mov	 eax, DWORD PTR __Nw$1[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d dc	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  000c3	51		 push	 ecx
  000c4	8b 55 e8	 mov	 edx, DWORD PTR __Pb$4[ebp]
  000c7	52		 push	 edx
  000c8	8b 45 d0	 mov	 eax, DWORD PTR __Nr$2[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d dc	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  000cf	51		 push	 ecx
  000d0	8b 55 e8	 mov	 edx, DWORD PTR __Pb$4[ebp]
  000d3	52		 push	 edx
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Init:

; 660  : 			}
; 661  : 
; 662  : 		_Myfile = _File;

  000e4	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  000ea	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 663  : 		_State = _Stinit;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
  000f6	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  000f9	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A+4
  000ff	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 664  : 		_Pcvt = 0;	// pointer to codecvt facet

  00102	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00105	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 665  : 		}

  0010c	52		 push	 edx
  0010d	8b cd		 mov	 ecx, ebp
  0010f	50		 push	 eax
  00110	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Init
  00116	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011b	58		 pop	 eax
  0011c	5a		 pop	 edx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 08 00	 ret	 8
  0013d	0f 1f 00	 npad	 3
$LN10@Init:
  00140	03 00 00 00	 DD	 3
  00144	00 00 00 00	 DD	 $LN9@Init
$LN9@Init:
  00148	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0014c	04 00 00 00	 DD	 4
  00150	00 00 00 00	 DD	 $LN6@Init
  00154	dc ff ff ff	 DD	 -36			; ffffffdcH
  00158	04 00 00 00	 DD	 4
  0015c	00 00 00 00	 DD	 $LN7@Init
  00160	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00164	04 00 00 00	 DD	 4
  00168	00 00 00 00	 DD	 $LN8@Init
$LN8@Init:
  0016c	5f		 DB	 95			; 0000005fH
  0016d	4e		 DB	 78			; 0000004eH
  0016e	72		 DB	 114			; 00000072H
  0016f	00		 DB	 0
$LN7@Init:
  00170	5f		 DB	 95			; 0000005fH
  00171	50		 DB	 80			; 00000050H
  00172	6e		 DB	 110			; 0000006eH
  00173	00		 DB	 0
$LN6@Init:
  00174	5f		 DB	 95			; 0000005fH
  00175	50		 DB	 80			; 00000050H
  00176	62		 DB	 98			; 00000062H
  00177	00		 DB	 0
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 628  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 629  : 		_Initcvt(&_USE(_Loc, _Cvt));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 630  : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv86 = -232						; size = 4
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 621  : 		{	// synchronize C stream with external file

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 622  : 		return (_Myfile == 0

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 73		 je	 SHORT $LN3@sync
  0002c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00031	8b f4		 mov	 esi, esp
  00033	50		 push	 eax
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003f	ff d0		 call	 eax
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0004e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00053	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00059	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0005f	51		 push	 ecx
  00060	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0006c	83 c4 08	 add	 esp, 8
  0006f	0f b6 c0	 movzx	 eax, al
  00072	85 c0		 test	 eax, eax
  00074	75 29		 jne	 SHORT $LN3@sync
  00076	8b f4		 mov	 esi, esp
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0007e	52		 push	 edx
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  00085	83 c4 04	 add	 esp, 4
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	85 c0		 test	 eax, eax
  00091	7d 0c		 jge	 SHORT $LN3@sync
  00093	c7 85 18 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv86[ebp], -1
  0009d	eb 0a		 jmp	 SHORT $LN4@sync
$LN3@sync:
  0009f	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN4@sync:
  000a9	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]

; 623  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 624  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);
; 625  : 		}

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000b8	3b ec		 cmp	 ebp, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 608  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 609  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 50		 je	 SHORT $LN4@setbuf
  0002c	83 7d 08 00	 cmp	 DWORD PTR __Buffer$[ebp], 0
  00030	75 14		 jne	 SHORT $LN6@setbuf
  00032	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00035	0b 45 10	 or	 eax, DWORD PTR __Count$[ebp+4]
  00038	75 0c		 jne	 SHORT $LN6@setbuf
  0003a	c7 85 30 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv71[ebp], 4
  00044	eb 0a		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00046	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN7@setbuf:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b f4		 mov	 esi, esp
  00055	51		 push	 ecx
  00056	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00060	50		 push	 eax
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00067	52		 push	 edx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setvbuf
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	85 c0		 test	 eax, eax
  0007a	74 06		 je	 SHORT $LN2@setbuf
$LN4@setbuf:

; 610  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 611  : 			(size_t)_Count * sizeof (_Elem)) != 0)
; 612  : 			return (0);	// failed

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 16		 jmp	 SHORT $LN1@setbuf

; 613  : 		else

  00080	eb 14		 jmp	 SHORT $LN1@setbuf
$LN2@setbuf:

; 614  : 			{	// new buffer, reinitialize pointers
; 615  : 			_Init(_Myfile, _Openfl);

  00082	6a 01		 push	 1
  00084	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0008a	51		 push	 ecx
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 616  : 			return (this);

  00093	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@setbuf:

; 617  : 			}
; 618  : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
$T1 = -252						; size = 8
__Off$ = -44						; size = 8
__Fileposition$ = -28					; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 590  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 591  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  0002d	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  00030	e8 00 00 00 00	 call	 ?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::seekpos
  00035	89 45 e4	 mov	 DWORD PTR __Fileposition$[ebp], eax
  00038	89 55 e8	 mov	 DWORD PTR __Fileposition$[ebp+4], edx

; 592  : 		off_type _Off = static_cast<off_type>(_Pos) - static_cast<off_type>(_Fileposition);

  0003b	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  0003e	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00043	2b 45 e4	 sub	 eax, DWORD PTR __Fileposition$[ebp]
  00046	1b 55 e8	 sbb	 edx, DWORD PTR __Fileposition$[ebp+4]
  00049	89 45 d4	 mov	 DWORD PTR __Off$[ebp], eax
  0004c	89 55 d8	 mov	 DWORD PTR __Off$[ebp+4], edx

; 593  : 
; 594  : 		if (_Myfile == 0 || !_Endwrite()
; 595  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 596  : 			|| (_Off != 0 && _fseeki64(_Myfile, _Off, SEEK_CUR) != 0)
; 597  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0004f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00056	0f 84 80 00 00
	00		 je	 $LN3@seekpos
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	74 71		 je	 SHORT $LN3@seekpos
  0006b	8b f4		 mov	 esi, esp
  0006d	8d 45 e4	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  00070	50		 push	 eax
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00077	52		 push	 edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fsetpos
  0007e	83 c4 08	 add	 esp, 8
  00081	3b f4		 cmp	 esi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	85 c0		 test	 eax, eax
  0008a	75 50		 jne	 SHORT $LN3@seekpos
  0008c	8b 45 d4	 mov	 eax, DWORD PTR __Off$[ebp]
  0008f	0b 45 d8	 or	 eax, DWORD PTR __Off$[ebp+4]
  00092	74 27		 je	 SHORT $LN4@seekpos
  00094	8b f4		 mov	 esi, esp
  00096	6a 01		 push	 1
  00098	8b 45 d8	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0009b	50		 push	 eax
  0009c	8b 4d d4	 mov	 ecx, DWORD PTR __Off$[ebp]
  0009f	51		 push	 ecx
  000a0	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  000a6	50		 push	 eax
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	85 c0		 test	 eax, eax
  000b9	75 21		 jne	 SHORT $LN3@seekpos
$LN4@seekpos:
  000bb	8b f4		 mov	 esi, esp
  000bd	8d 45 e4	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000c7	52		 push	 edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  000ce	83 c4 08	 add	 esp, 8
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	85 c0		 test	 eax, eax
  000da	74 19		 je	 SHORT $LN2@seekpos
$LN3@seekpos:

; 598  : 			return (pos_type(_BADOFF));	// report failure

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000e1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e4	51		 push	 ecx
  000e5	8b 10		 mov	 edx, DWORD PTR [eax]
  000e7	52		 push	 edx
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000eb	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000f0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f3	eb 43		 jmp	 SHORT $LN1@seekpos
$LN2@seekpos:

; 599  : 
; 600  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  000f5	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000fb	50		 push	 eax
  000fc	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  000ff	e8 00 00 00 00	 call	 ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
  00104	8b 08		 mov	 ecx, DWORD PTR [eax]
  00106	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00109	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  0010f	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 601  : 
; 602  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00112	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 603  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  0011a	8b 45 e8	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  0011d	50		 push	 eax
  0011e	8b 4d e4	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00121	51		 push	 ecx
  00122	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00125	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00128	50		 push	 eax
  00129	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0012c	51		 push	 ecx
  0012d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00130	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00135	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekpos:

; 604  : 			_Fileposition));	// return new position
; 605  : 		}

  00138	52		 push	 edx
  00139	8b cd		 mov	 ecx, ebp
  0013b	50		 push	 eax
  0013c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@seekpos
  00142	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00147	58		 pop	 eax
  00148	5a		 pop	 edx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014f	33 cd		 xor	 ecx, ebp
  00151	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00156	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0015c	3b ec		 cmp	 ebp, esp
  0015e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 20 00	 ret	 32			; 00000020H
  00169	0f 1f 00	 npad	 3
$LN8@seekpos:
  0016c	01 00 00 00	 DD	 1
  00170	00 00 00 00	 DD	 $LN7@seekpos
$LN7@seekpos:
  00174	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00178	08 00 00 00	 DD	 8
  0017c	00 00 00 00	 DD	 $LN6@seekpos
$LN6@seekpos:
  00180	5f		 DB	 95			; 0000005fH
  00181	46		 DB	 70			; 00000046H
  00182	69		 DB	 105			; 00000069H
  00183	6c		 DB	 108			; 0000006cH
  00184	65		 DB	 101			; 00000065H
  00185	70		 DB	 112			; 00000070H
  00186	6f		 DB	 111			; 0000006fH
  00187	73		 DB	 115			; 00000073H
  00188	69		 DB	 105			; 00000069H
  00189	74		 DB	 116			; 00000074H
  0018a	69		 DB	 105			; 00000069H
  0018b	6f		 DB	 111			; 0000006fH
  0018c	6e		 DB	 110			; 0000006eH
  0018d	00		 DB	 0
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -28					; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 568  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00013	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 569  : 		fpos_t _Fileposition;
; 570  : 
; 571  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 572  : 			&& _Way == ios_base::cur	// a relative seek
; 573  : 			&& _Pcvt == 0)	// not converting

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00045	3b c1		 cmp	 eax, ecx
  00047	75 21		 jne	 SHORT $LN2@seekoff
  00049	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0004d	75 1b		 jne	 SHORT $LN2@seekoff
  0004f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00056	75 12		 jne	 SHORT $LN2@seekoff

; 574  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  00058	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00061	83 d9 00	 sbb	 ecx, 0
  00064	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00067	89 4d 10	 mov	 DWORD PTR __Off$[ebp+4], ecx
$LN2@seekoff:

; 575  : 
; 576  : 		if (_Myfile == 0 || !_Endwrite()
; 577  : 			|| ((_Off != 0 || _Way != ios_base::cur)
; 578  : 				&& _fseeki64(_Myfile, _Off, _Way) != 0)
; 579  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00071	74 67		 je	 SHORT $LN4@seekoff
  00073	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	74 58		 je	 SHORT $LN4@seekoff
  00082	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00085	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  00088	75 06		 jne	 SHORT $LN6@seekoff
  0008a	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0008e	74 29		 je	 SHORT $LN5@seekoff
$LN6@seekoff:
  00090	8b f4		 mov	 esi, esp
  00092	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00095	50		 push	 eax
  00096	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00099	51		 push	 ecx
  0009a	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000a4	51		 push	 ecx
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  000ab	83 c4 10	 add	 esp, 16			; 00000010H
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	85 c0		 test	 eax, eax
  000b7	75 21		 jne	 SHORT $LN4@seekoff
$LN5@seekoff:
  000b9	8b f4		 mov	 esi, esp
  000bb	8d 45 e4	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000c5	52		 push	 edx
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  000cc	83 c4 08	 add	 esp, 8
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	85 c0		 test	 eax, eax
  000d8	74 19		 je	 SHORT $LN3@seekoff
$LN4@seekoff:

; 580  : 			return (pos_type(_BADOFF));	// report failure

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e2	51		 push	 ecx
  000e3	8b 10		 mov	 edx, DWORD PTR [eax]
  000e5	52		 push	 edx
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e9	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000ee	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f1	eb 26		 jmp	 SHORT $LN1@seekoff
$LN3@seekoff:

; 581  : 
; 582  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 583  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  000fb	8b 45 e8	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  000fe	50		 push	 eax
  000ff	8b 4d e4	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00102	51		 push	 ecx
  00103	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00106	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00109	50		 push	 eax
  0010a	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0010d	51		 push	 ecx
  0010e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00111	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00116	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekoff:

; 584  : 			_Fileposition));	// return new position
; 585  : 		}

  00119	52		 push	 edx
  0011a	8b cd		 mov	 ecx, ebp
  0011c	50		 push	 eax
  0011d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@seekoff
  00123	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00128	58		 pop	 eax
  00129	5a		 pop	 edx
  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	5b		 pop	 ebx
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00130	33 cd		 xor	 ecx, ebp
  00132	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00137	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0013d	3b ec		 cmp	 ebp, esp
  0013f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 14 00	 ret	 20			; 00000014H
  0014a	66 90		 npad	 2
$LN10@seekoff:
  0014c	01 00 00 00	 DD	 1
  00150	00 00 00 00	 DD	 $LN9@seekoff
$LN9@seekoff:
  00154	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00158	08 00 00 00	 DD	 8
  0015c	00 00 00 00	 DD	 $LN8@seekoff
$LN8@seekoff:
  00160	5f		 DB	 95			; 0000005fH
  00161	46		 DB	 70			; 00000046H
  00162	69		 DB	 105			; 00000069H
  00163	6c		 DB	 108			; 0000006cH
  00164	65		 DB	 101			; 00000065H
  00165	70		 DB	 112			; 00000070H
  00166	6f		 DB	 111			; 0000006fH
  00167	73		 DB	 115			; 00000073H
  00168	69		 DB	 105			; 00000069H
  00169	74		 DB	 116			; 00000074H
  0016a	69		 DB	 105			; 00000069H
  0016b	6f		 DB	 111			; 0000006fH
  0016c	6e		 DB	 110			; 0000006eH
  0016d	00		 DB	 0
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv180 = -508						; size = 4
tv239 = -504						; size = 4
tv249 = -500						; size = 4
tv246 = -496						; size = 4
tv244 = -496						; size = 4
tv241 = -496						; size = 4
tv237 = -496						; size = 4
tv252 = -492						; size = 4
tv251 = -492						; size = 4
tv250 = -492						; size = 4
tv141 = -492						; size = 4
tv139 = -492						; size = 4
$T2 = -484						; size = 4
$T3 = -472						; size = 4
$T4 = -460						; size = 12
$T5 = -440						; size = 12
$T6 = -420						; size = 4
$T7 = -408						; size = 12
$T8 = -388						; size = 12
$T9 = -368						; size = 12
$T10 = -348						; size = 4
$T11 = -336						; size = 4
__Meta$12 = -132					; size = 4
__Nleft$13 = -120					; size = 4
__Src$14 = -108						; size = 4
__Dest$15 = -96						; size = 4
__Ch$16 = -81						; size = 1
__Str$17 = -72						; size = 28
__Ch$18 = -33						; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 498  : 		{	// get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 01 00
	00		 sub	 esp, 496		; 000001f0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 04 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-508]
  00021	b9 7c 00 00 00	 mov	 ecx, 124		; 0000007cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 499  : 		if (_Mysb::gptr() != 0
; 500  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00045	8b f4		 mov	 esi, esp
  00047	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	85 c0		 test	 eax, eax
  00059	74 4c		 je	 SHORT $LN9@uflow
  0005b	8b f4		 mov	 esi, esp
  0005d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b f0		 mov	 esi, eax
  0006f	8b fc		 mov	 edi, esp
  00071	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0007a	3b fc		 cmp	 edi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	3b f0		 cmp	 esi, eax
  00083	73 22		 jae	 SHORT $LN9@uflow

; 501  : 			return (_Traits::to_int_type(

  00085	8b f4		 mov	 esi, esp
  00087	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0009d	83 c4 04	 add	 esp, 4
  000a0	e9 a7 03 00 00	 jmp	 $LN1@uflow
  000a5	eb 13		 jmp	 SHORT $LN10@uflow
$LN9@uflow:

; 502  : 				*_Mysb::_Gninc()));	// return buffered
; 503  : 		else if (_Myfile == 0)

  000a7	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000ae	75 0a		 jne	 SHORT $LN10@uflow

; 504  : 			return (_Traits::eof());	// no open C stream, fail

  000b0	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b5	e9 92 03 00 00	 jmp	 $LN1@uflow
$LN10@uflow:

; 505  : 		_Reset_back();	// revert from _Mychar buffer

  000ba	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 506  : 		if (_Pcvt == 0)

  000c2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  000c9	75 4d		 jne	 SHORT $LN12@uflow

; 507  : 			{	// no codecvt facet, just get it
; 508  : 			_Elem _Ch = 0;

  000cb	c6 45 df 00	 mov	 BYTE PTR __Ch$18[ebp], 0

; 509  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)

  000cf	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000d5	51		 push	 ecx
  000d6	8d 55 df	 lea	 edx, DWORD PTR __Ch$18[ebp]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  000df	83 c4 08	 add	 esp, 8
  000e2	0f b6 c0	 movzx	 eax, al
  000e5	85 c0		 test	 eax, eax
  000e7	74 14		 je	 SHORT $LN22@uflow
  000e9	8d 4d df	 lea	 ecx, DWORD PTR __Ch$18[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000f2	83 c4 04	 add	 esp, 4
  000f5	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
  000fb	eb 0b		 jmp	 SHORT $LN23@uflow
$LN22@uflow:
  000fd	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00102	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN23@uflow:
  00108	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR tv139[ebp]
  0010e	e9 39 03 00 00	 jmp	 $LN1@uflow

; 510  : 				: _Traits::eof());
; 511  : 			}
; 512  : 		else

  00113	e9 34 03 00 00	 jmp	 $LN1@uflow
$LN12@uflow:

; 513  : 			{	// build string until codecvt succeeds
; 514  : 			string _Str;

  00118	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0011b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00120	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@uflow:

; 515  : 
; 516  : 			for (;;)
; 517  : 				{	// get using codecvt facet
; 518  : 				_Elem _Ch, *_Dest;
; 519  : 				const char *_Src;
; 520  : 				int _Nleft;
; 521  : 				int _Meta = fgetc(_Myfile);

  00127	8b f4		 mov	 esi, esp
  00129	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0012c	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0012f	51		 push	 ecx
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00136	83 c4 04	 add	 esp, 4
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	89 85 7c ff ff
	ff		 mov	 DWORD PTR __Meta$12[ebp], eax

; 522  : 
; 523  : 				if (_Meta == EOF)

  00146	83 bd 7c ff ff
	ff ff		 cmp	 DWORD PTR __Meta$12[ebp], -1
  0014d	75 25		 jne	 SHORT $LN14@uflow

; 524  : 					return (_Traits::eof());	// partial char?

  0014f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00154	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  0015a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00161	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00164	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00169	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T11[ebp]
  0016f	e9 d8 02 00 00	 jmp	 $LN1@uflow
$LN14@uflow:

; 525  : 
; 526  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  00174	0f b6 85 7c ff
	ff ff		 movzx	 eax, BYTE PTR __Meta$12[ebp]
  0017b	50		 push	 eax
  0017c	6a 01		 push	 1
  0017e	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00181	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 527  : 				switch (_Pcvt->in(_State,

  00186	8b f4		 mov	 esi, esp
  00188	8d 45 a0	 lea	 eax, DWORD PTR __Dest$15[ebp]
  0018b	50		 push	 eax
  0018c	8d 4d b0	 lea	 ecx, DWORD PTR __Ch$16[ebp+1]
  0018f	51		 push	 ecx
  00190	8d 55 af	 lea	 edx, DWORD PTR __Ch$16[ebp]
  00193	52		 push	 edx
  00194	8d 45 94	 lea	 eax, DWORD PTR __Src$14[ebp]
  00197	50		 push	 eax
  00198	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0019e	51		 push	 ecx
  0019f	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  001a2	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001a7	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv141[ebp], eax
  001ad	8b 95 14 fe ff
	ff		 mov	 edx, DWORD PTR tv141[ebp]
  001b3	89 95 10 fe ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
  001b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001bd	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  001c3	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001c8	8b f8		 mov	 edi, eax
  001ca	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  001cd	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001d2	03 f8		 add	 edi, eax
  001d4	57		 push	 edi
  001d5	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  001db	50		 push	 eax
  001dc	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  001df	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001e4	89 85 0c fe ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  001ea	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR tv249[ebp]
  001f0	89 8d 08 fe ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  001f6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001fa	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  00200	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00205	50		 push	 eax
  00206	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00209	83 c2 40	 add	 edx, 64			; 00000040H
  0020c	52		 push	 edx
  0020d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00210	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
  00219	3b f4		 cmp	 esi, esp
  0021b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00220	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  00226	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0022a	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00230	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00235	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00239	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0023f	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00244	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp]
  0024a	89 8d 04 fe ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  00250	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR tv180[ebp], 0
  00257	0f 8c b9 01 00
	00		 jl	 $LN20@uflow
  0025d	83 bd 04 fe ff
	ff 01		 cmp	 DWORD PTR tv180[ebp], 1
  00264	7e 12		 jle	 SHORT $LN15@uflow
  00266	83 bd 04 fe ff
	ff 03		 cmp	 DWORD PTR tv180[ebp], 3
  0026d	0f 84 18 01 00
	00		 je	 $LN18@uflow
  00273	e9 9e 01 00 00	 jmp	 $LN20@uflow
$LN15@uflow:

; 528  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 529  : 					&_Ch, &_Ch + 1, _Dest))
; 530  : 					{	// test result of converting one element
; 531  : 				case codecvt_base::partial:
; 532  : 				case codecvt_base::ok:
; 533  : 					if (_Dest != &_Ch)

  00278	8d 45 af	 lea	 eax, DWORD PTR __Ch$16[ebp]
  0027b	39 45 a0	 cmp	 DWORD PTR __Dest$15[ebp], eax
  0027e	0f 84 b3 00 00
	00		 je	 $LN16@uflow

; 534  : 						{	// got an element, put back excess and deliver it
; 535  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  00284	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0028a	50		 push	 eax
  0028b	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0028e	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00293	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
  00299	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv250[ebp]
  0029f	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  002a5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a9	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv241[ebp]
  002af	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  002b4	8b f0		 mov	 esi, eax
  002b6	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  002b9	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  002be	03 f0		 add	 esi, eax
  002c0	2b 75 94	 sub	 esi, DWORD PTR __Src$14[ebp]
  002c3	89 75 88	 mov	 DWORD PTR __Nleft$13[ebp], esi
  002c6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ca	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  002d0	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN7@uflow:

; 536  : 						while (0 < _Nleft)

  002d5	83 7d 88 00	 cmp	 DWORD PTR __Nleft$13[ebp], 0
  002d9	7e 2e		 jle	 SHORT $LN8@uflow

; 537  : 							{
; 538  : 							ungetc(_Src[--_Nleft], _Myfile);

  002db	8b 45 88	 mov	 eax, DWORD PTR __Nleft$13[ebp]
  002de	83 e8 01	 sub	 eax, 1
  002e1	89 45 88	 mov	 DWORD PTR __Nleft$13[ebp], eax
  002e4	8b f4		 mov	 esi, esp
  002e6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e9	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  002ec	52		 push	 edx
  002ed	8b 45 94	 mov	 eax, DWORD PTR __Src$14[ebp]
  002f0	03 45 88	 add	 eax, DWORD PTR __Nleft$13[ebp]
  002f3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002f6	51		 push	 ecx
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  002fd	83 c4 08	 add	 esp, 8
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 539  : 							}

  00307	eb cc		 jmp	 SHORT $LN7@uflow
$LN8@uflow:

; 540  : 
; 541  : 						return (_Traits::to_int_type(_Ch));

  00309	8d 45 af	 lea	 eax, DWORD PTR __Ch$16[ebp]
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00312	83 c4 04	 add	 esp, 4
  00315	89 85 5c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  0031b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00322	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00325	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0032a	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00330	e9 17 01 00 00	 jmp	 $LN1@uflow

; 542  : 						}
; 543  : 					else

  00335	eb 4f		 jmp	 SHORT $LN17@uflow
$LN16@uflow:

; 544  : 						_Str.erase((size_t)0,	// partial, discard used input

  00337	8d 85 48 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0033d	50		 push	 eax
  0033e	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00341	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00346	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv251[ebp], eax
  0034c	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv251[ebp]
  00352	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv244[ebp], ecx
  00358	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0035c	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv244[ebp]
  00362	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00367	8b 55 94	 mov	 edx, DWORD PTR __Src$14[ebp]
  0036a	2b d0		 sub	 edx, eax
  0036c	52		 push	 edx
  0036d	6a 00		 push	 0
  0036f	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00372	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00377	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0037b	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00381	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN17@uflow:

; 545  : 							(size_t)(_Src - &*_Str.begin()));
; 546  : 					break;

  00386	e9 ad 00 00 00	 jmp	 $LN5@uflow
$LN18@uflow:

; 547  : 
; 548  : 				case codecvt_base::noconv:
; 549  : 					if (_Str.size() < sizeof (_Elem))

  0038b	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0038e	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00393	83 f8 01	 cmp	 eax, 1
  00396	73 05		 jae	 SHORT $LN19@uflow

; 550  : 						break;	// no conversion, but need more chars

  00398	e9 9b 00 00 00	 jmp	 $LN5@uflow
$LN19@uflow:

; 551  : 
; 552  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  0039d	6a 01		 push	 1
  0039f	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  003a5	50		 push	 eax
  003a6	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  003a9	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  003ae	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv252[ebp], eax
  003b4	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv252[ebp]
  003ba	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  003c0	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003c4	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv246[ebp]
  003ca	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  003cf	50		 push	 eax
  003d0	6a 01		 push	 1
  003d2	8d 55 af	 lea	 edx, DWORD PTR __Ch$16[ebp]
  003d5	52		 push	 edx
  003d6	e8 00 00 00 00	 call	 _memcpy_s
  003db	83 c4 10	 add	 esp, 16			; 00000010H
  003de	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003e2	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  003e8	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 553  : 						sizeof (_Elem));	// copy raw bytes to element
; 554  : 
; 555  : 					return (_Traits::to_int_type(_Ch));	// return result

  003ed	8d 45 af	 lea	 eax, DWORD PTR __Ch$16[ebp]
  003f0	50		 push	 eax
  003f1	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  003f6	83 c4 04	 add	 esp, 4
  003f9	89 85 28 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  003ff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00406	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00409	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0040e	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00414	eb 36		 jmp	 SHORT $LN1@uflow
$LN20@uflow:

; 556  : 
; 557  : 				default:
; 558  : 					return (_Traits::eof());	// conversion failed

  00416	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0041b	89 85 1c fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00421	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00428	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0042b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00430	8b 85 1c fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00436	eb 14		 jmp	 SHORT $LN1@uflow
$LN5@uflow:

; 559  : 					}
; 560  : 				}

  00438	e9 ea fc ff ff	 jmp	 $LN4@uflow

; 561  : 			}

  0043d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00444	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00447	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@uflow:

; 562  : 		}

  0044c	52		 push	 edx
  0044d	8b cd		 mov	 ecx, ebp
  0044f	50		 push	 eax
  00450	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN37@uflow
  00456	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045b	58		 pop	 eax
  0045c	5a		 pop	 edx
  0045d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00460	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00467	59		 pop	 ecx
  00468	5f		 pop	 edi
  00469	5e		 pop	 esi
  0046a	5b		 pop	 ebx
  0046b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046e	33 cd		 xor	 ecx, ebp
  00470	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00475	81 c4 fc 01 00
	00		 add	 esp, 508		; 000001fcH
  0047b	3b ec		 cmp	 ebp, esp
  0047d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00482	8b e5		 mov	 esp, ebp
  00484	5d		 pop	 ebp
  00485	c3		 ret	 0
  00486	66 90		 npad	 2
$LN37@uflow:
  00488	05 00 00 00	 DD	 5
  0048c	00 00 00 00	 DD	 $LN36@uflow
$LN36@uflow:
  00490	df ff ff ff	 DD	 -33			; ffffffdfH
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN30@uflow
  0049c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  004a0	1c 00 00 00	 DD	 28			; 0000001cH
  004a4	00 00 00 00	 DD	 $LN31@uflow
  004a8	af ff ff ff	 DD	 -81			; ffffffafH
  004ac	01 00 00 00	 DD	 1
  004b0	00 00 00 00	 DD	 $LN32@uflow
  004b4	a0 ff ff ff	 DD	 -96			; ffffffa0H
  004b8	04 00 00 00	 DD	 4
  004bc	00 00 00 00	 DD	 $LN33@uflow
  004c0	94 ff ff ff	 DD	 -108			; ffffff94H
  004c4	04 00 00 00	 DD	 4
  004c8	00 00 00 00	 DD	 $LN34@uflow
$LN34@uflow:
  004cc	5f		 DB	 95			; 0000005fH
  004cd	53		 DB	 83			; 00000053H
  004ce	72		 DB	 114			; 00000072H
  004cf	63		 DB	 99			; 00000063H
  004d0	00		 DB	 0
$LN33@uflow:
  004d1	5f		 DB	 95			; 0000005fH
  004d2	44		 DB	 68			; 00000044H
  004d3	65		 DB	 101			; 00000065H
  004d4	73		 DB	 115			; 00000073H
  004d5	74		 DB	 116			; 00000074H
  004d6	00		 DB	 0
$LN32@uflow:
  004d7	5f		 DB	 95			; 0000005fH
  004d8	43		 DB	 67			; 00000043H
  004d9	68		 DB	 104			; 00000068H
  004da	00		 DB	 0
$LN31@uflow:
  004db	5f		 DB	 95			; 0000005fH
  004dc	53		 DB	 83			; 00000053H
  004dd	74		 DB	 116			; 00000074H
  004de	72		 DB	 114			; 00000072H
  004df	00		 DB	 0
$LN30@uflow:
  004e0	5f		 DB	 95			; 0000005fH
  004e1	43		 DB	 67			; 00000043H
  004e2	68		 DB	 104			; 00000068H
  004e3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1:
  00008	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2:
  00013	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3:
  0001e	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4:
  00029	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5:
  00034	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a 00 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-512]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -228						; size = 4
__Meta$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 483  : 		{	// get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 484  : 		int_type _Meta;
; 485  : 		if (_Mysb::gptr() != 0
; 486  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	85 c0		 test	 eax, eax
  00041	74 49		 je	 SHORT $LN2@underflow
  00043	8b f4		 mov	 esi, esp
  00045	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b f0		 mov	 esi, eax
  00057	8b fc		 mov	 edi, esp
  00059	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00062	3b fc		 cmp	 edi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	3b f0		 cmp	 esi, eax
  0006b	73 1f		 jae	 SHORT $LN2@underflow

; 487  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0006d	8b f4		 mov	 esi, esp
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00085	83 c4 04	 add	 esp, 4
  00088	eb 64		 jmp	 SHORT $LN1@underflow
  0008a	eb 62		 jmp	 SHORT $LN1@underflow
$LN2@underflow:

; 488  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 10		 mov	 edx, DWORD PTR [eax]
  00091	8b f4		 mov	 esi, esp
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00099	ff d0		 call	 eax
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	89 45 e8	 mov	 DWORD PTR __Meta$[ebp], eax
  000a5	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000aa	89 85 1c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000b0	8d 4d e8	 lea	 ecx, DWORD PTR __Meta$[ebp]
  000b3	51		 push	 ecx
  000b4	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000c0	83 c4 08	 add	 esp, 8
  000c3	0f b6 c0	 movzx	 eax, al
  000c6	85 c0		 test	 eax, eax
  000c8	74 07		 je	 SHORT $LN4@underflow

; 489  : 			return (_Meta);	// uflow failed, return EOF

  000ca	8b 45 e8	 mov	 eax, DWORD PTR __Meta$[ebp]
  000cd	eb 1f		 jmp	 SHORT $LN1@underflow

; 490  : 		else

  000cf	eb 1d		 jmp	 SHORT $LN1@underflow
$LN4@underflow:

; 491  : 			{	// get a char, don't point past it
; 492  : 			pbackfail(_Meta);

  000d1	8b f4		 mov	 esi, esp
  000d3	8b 45 e8	 mov	 eax, DWORD PTR __Meta$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e2	ff d0		 call	 eax
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 493  : 			return (_Meta);

  000eb	8b 45 e8	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN1@underflow:

; 494  : 			}
; 495  : 		}

  000ee	52		 push	 edx
  000ef	8b cd		 mov	 ecx, ebp
  000f1	50		 push	 eax
  000f2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@underflow
  000f8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fd	58		 pop	 eax
  000fe	5a		 pop	 edx
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	33 cd		 xor	 ecx, ebp
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00112	3b ec		 cmp	 ebp, esp
  00114	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
  0011d	0f 1f 00	 npad	 3
$LN9@underflow:
  00120	01 00 00 00	 DD	 1
  00124	00 00 00 00	 DD	 $LN8@underflow
$LN8@underflow:
  00128	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0012c	04 00 00 00	 DD	 4
  00130	00 00 00 00	 DD	 $LN7@underflow
$LN7@underflow:
  00134	5f		 DB	 95			; 0000005fH
  00135	4d		 DB	 77			; 0000004dH
  00136	65		 DB	 101			; 00000065H
  00137	74		 DB	 116			; 00000074H
  00138	61		 DB	 97			; 00000061H
  00139	00		 DB	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -236						; size = 4
$T3 = -224						; size = 4
$T4 = -212						; size = 4
_this$ = -8						; size = 4
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 458  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 459  : 		if (_Mysb::gptr() != 0
; 460  : 			&& _Mysb::eback() < _Mysb::gptr()
; 461  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	0f 84 c0 00 00
	00		 je	 $LN2@pbackfail
  0003d	8b f4		 mov	 esi, esp
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f0		 mov	 esi, eax
  00051	8b fc		 mov	 edi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005c	3b fc		 cmp	 edi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	3b f0		 cmp	 esi, eax
  00065	0f 83 92 00 00
	00		 jae	 $LN2@pbackfail
  0006b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00070	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00076	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00079	50		 push	 eax
  0007a	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00086	83 c4 08	 add	 esp, 8
  00089	0f b6 d0	 movzx	 edx, al
  0008c	85 d2		 test	 edx, edx
  0008e	75 45		 jne	 SHORT $LN4@pbackfail
  00090	8b f4		 mov	 esi, esp
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	6b d1 ff	 imul	 edx, ecx, -1
  000aa	03 c2		 add	 eax, edx
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000b2	83 c4 04	 add	 esp, 4
  000b5	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  000bb	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000be	50		 push	 eax
  000bf	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000cb	83 c4 08	 add	 esp, 8
  000ce	0f b6 d0	 movzx	 edx, al
  000d1	85 d2		 test	 edx, edx
  000d3	74 28		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 462  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 463  : 				_Meta)))
; 464  : 			{	// just back up position
; 465  : 			_Mysb::_Gndec();

  000d5	8b f4		 mov	 esi, esp
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 466  : 			return (_Traits::not_eof(_Meta));

  000e7	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  000f0	83 c4 04	 add	 esp, 4
  000f3	e9 c3 00 00 00	 jmp	 $LN1@pbackfail
  000f8	e9 be 00 00 00	 jmp	 $LN1@pbackfail
$LN2@pbackfail:

; 467  : 			}
; 468  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00100	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00104	74 25		 je	 SHORT $LN7@pbackfail
  00106	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0010b	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00111	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00114	50		 push	 eax
  00115	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00121	83 c4 08	 add	 esp, 8
  00124	0f b6 d0	 movzx	 edx, al
  00127	85 d2		 test	 edx, edx
  00129	74 0f		 je	 SHORT $LN5@pbackfail
$LN7@pbackfail:

; 469  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  0012b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00130	e9 86 00 00 00	 jmp	 $LN1@pbackfail
  00135	e9 81 00 00 00	 jmp	 $LN1@pbackfail
$LN5@pbackfail:

; 470  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  0013a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013d	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00141	75 36		 jne	 SHORT $LN8@pbackfail
  00143	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  0014c	83 c4 04	 add	 esp, 4
  0014f	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00155	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00158	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0015b	52		 push	 edx
  0015c	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  00168	83 c4 08	 add	 esp, 8
  0016b	0f b6 c8	 movzx	 ecx, al
  0016e	85 c9		 test	 ecx, ecx
  00170	74 07		 je	 SHORT $LN8@pbackfail

; 471  : 			return (_Meta);	// no facet and unget succeeded, return

  00172	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00175	eb 44		 jmp	 SHORT $LN1@pbackfail
  00177	eb 42		 jmp	 SHORT $LN1@pbackfail
$LN8@pbackfail:

; 472  : 		else if (_Mysb::gptr() != &_Mychar)

  00179	8b f4		 mov	 esi, esp
  0017b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00184	3b f4		 cmp	 esi, esp
  00186	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018e	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00191	3b c1		 cmp	 eax, ecx
  00193	74 21		 je	 SHORT $LN10@pbackfail

; 473  : 			{	// putback to _Mychar
; 474  : 			_Mychar = _Traits::to_char_type(_Meta);

  00195	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  0019e	83 c4 04	 add	 esp, 4
  001a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a4	88 41 3c	 mov	 BYTE PTR [ecx+60], al

; 475  : 			_Set_back();	// switch to _Mychar buffer

  001a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 476  : 			return (_Meta);

  001af	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  001b2	eb 07		 jmp	 SHORT $LN1@pbackfail

; 477  : 			}
; 478  : 		else

  001b4	eb 05		 jmp	 SHORT $LN1@pbackfail
$LN10@pbackfail:

; 479  : 			return (_Traits::eof());	// nowhere to put back

  001b6	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN1@pbackfail:

; 480  : 	}

  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	5b		 pop	 ebx
  001be	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  001c4	3b ec		 cmp	 ebp, esp
  001c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
tv184 = -524						; size = 4
tv239 = -520						; size = 4
tv254 = -516						; size = 4
tv208 = -516						; size = 4
tv246 = -512						; size = 4
tv241 = -512						; size = 4
tv237 = -512						; size = 4
tv256 = -508						; size = 4
tv255 = -508						; size = 4
tv230 = -508						; size = 4
tv151 = -508						; size = 4
tv147 = -508						; size = 4
$T2 = -500						; size = 4
$T3 = -488						; size = 4
$T4 = -476						; size = 4
$T5 = -464						; size = 4
$T6 = -452						; size = 4
$T7 = -440						; size = 4
$T8 = -428						; size = 12
$T9 = -405						; size = 1
$T10 = -396						; size = 12
$T11 = -376						; size = 12
$T12 = -356						; size = 12
$T13 = -336						; size = 4
$T14 = -324						; size = 4
__Count$15 = -120					; size = 4
__Str$16 = -108						; size = 28
__Dest$17 = -72						; size = 4
__Src$18 = -60						; size = 4
__Ch$19 = -45						; size = 1
__STRING_INC$20 = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 389  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 02 00
	00		 sub	 esp, 512		; 00000200H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-524]
  00021	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 390  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0004f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00054	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  0005a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0005d	50		 push	 eax
  0005e	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0006a	83 c4 08	 add	 esp, 8
  0006d	0f b6 d0	 movzx	 edx, al
  00070	85 d2		 test	 edx, edx
  00072	74 13		 je	 SHORT $LN7@overflow

; 391  : 			{
; 392  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00074	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  0007d	83 c4 04	 add	 esp, 4
  00080	e9 26 04 00 00	 jmp	 $LN1@overflow
  00085	eb 7f		 jmp	 SHORT $LN8@overflow
$LN7@overflow:

; 393  : 			}
; 394  : 		else if (_Mysb::pptr() != 0 && _Mysb::pptr() < _Mysb::epptr())

  00087	8b f4		 mov	 esi, esp
  00089	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	85 c0		 test	 eax, eax
  0009b	74 56		 je	 SHORT $LN9@overflow
  0009d	8b f4		 mov	 esi, esp
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b f0		 mov	 esi, eax
  000b1	8b fc		 mov	 edi, esp
  000b3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000bc	3b fc		 cmp	 edi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	3b f0		 cmp	 esi, eax
  000c5	73 2c		 jae	 SHORT $LN9@overflow

; 395  : 			{	// room in buffer, store it
; 396  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  000c7	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000d0	83 c4 04	 add	 esp, 4
  000d3	8a d8		 mov	 bl, al
  000d5	8b f4		 mov	 esi, esp
  000d7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	88 18		 mov	 BYTE PTR [eax], bl

; 397  : 			return (_Meta);

  000e9	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  000ec	e9 ba 03 00 00	 jmp	 $LN1@overflow
  000f1	eb 13		 jmp	 SHORT $LN8@overflow
$LN9@overflow:

; 398  : 			}
; 399  : 		else if (_Myfile == 0)

  000f3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000fa	75 0a		 jne	 SHORT $LN8@overflow

; 400  : 			{
; 401  : 			return (_Traits::eof());	// no open C stream, fail

  000fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00101	e9 a5 03 00 00	 jmp	 $LN1@overflow
$LN8@overflow:

; 402  : 			}
; 403  : 
; 404  : 		_Reset_back();	// revert from _Mychar buffer

  00106	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 405  : 		if (_Pcvt == 0)

  0010e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00115	75 4c		 jne	 SHORT $LN12@overflow

; 406  : 			{
; 407  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)

  00117	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0011d	51		 push	 ecx
  0011e	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00127	83 c4 04	 add	 esp, 4
  0012a	0f b6 c0	 movzx	 eax, al
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00133	83 c4 08	 add	 esp, 8
  00136	0f b6 c8	 movzx	 ecx, al
  00139	85 c9		 test	 ecx, ecx
  0013b	74 0b		 je	 SHORT $LN24@overflow
  0013d	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00140	89 95 04 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], edx
  00146	eb 0b		 jmp	 SHORT $LN25@overflow
$LN24@overflow:
  00148	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0014d	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
$LN25@overflow:
  00153	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR tv147[ebp]
  00159	e9 4d 03 00 00	 jmp	 $LN1@overflow

; 408  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is
; 409  : 			}
; 410  : 		else

  0015e	e9 48 03 00 00	 jmp	 $LN1@overflow
$LN12@overflow:

; 411  : 			{	// put using codecvt facet
; 412  : 			const int _STRING_INC = 8;

  00163	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$20[ebp], 8

; 413  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);

  0016a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00173	83 c4 04	 add	 esp, 4
  00176	88 45 d3	 mov	 BYTE PTR __Ch$19[ebp], al

; 414  : 			const _Elem *_Src;
; 415  : 			char *_Dest;
; 416  : 
; 417  : 			string _Str(_STRING_INC, '\0');

  00179	6a 00		 push	 0
  0017b	6a 08		 push	 8
  0017d	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00180	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00185	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@overflow:

; 418  : 			for (;;)
; 419  : 				{
; 420  : 				switch (_Pcvt->out(_State,

  0018c	8b f4		 mov	 esi, esp
  0018e	8d 45 b8	 lea	 eax, DWORD PTR __Dest$17[ebp]
  00191	50		 push	 eax
  00192	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00198	51		 push	 ecx
  00199	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0019c	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001a1	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv151[ebp], eax
  001a7	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR tv151[ebp]
  001ad	89 95 00 fe ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
  001b3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001b7	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  001bd	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001c2	8b f8		 mov	 edi, eax
  001c4	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001c7	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001cc	03 f8		 add	 edi, eax
  001ce	57		 push	 edi
  001cf	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  001d5	50		 push	 eax
  001d6	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001d9	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001de	89 85 fc fd ff
	ff		 mov	 DWORD PTR tv254[ebp], eax
  001e4	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR tv254[ebp]
  001ea	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  001f0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001f4	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  001fa	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001ff	50		 push	 eax
  00200	8d 55 c4	 lea	 edx, DWORD PTR __Src$18[ebp]
  00203	52		 push	 edx
  00204	8d 45 d4	 lea	 eax, DWORD PTR __Ch$19[ebp+1]
  00207	50		 push	 eax
  00208	8d 4d d3	 lea	 ecx, DWORD PTR __Ch$19[ebp]
  0020b	51		 push	 ecx
  0020c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0020f	83 c2 40	 add	 edx, 64			; 00000040H
  00212	52		 push	 edx
  00213	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00216	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
  0021f	3b f4		 cmp	 esi, esp
  00221	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00226	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  0022c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00230	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00236	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0023b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0023f	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00245	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0024a	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR $T13[ebp]
  00250	89 8d f4 fd ff
	ff		 mov	 DWORD PTR tv184[ebp], ecx
  00256	83 bd f4 fd ff
	ff 00		 cmp	 DWORD PTR tv184[ebp], 0
  0025d	0f 8c 12 02 00
	00		 jl	 $LN22@overflow
  00263	83 bd f4 fd ff
	ff 01		 cmp	 DWORD PTR tv184[ebp], 1
  0026a	7e 12		 jle	 SHORT $LN14@overflow
  0026c	83 bd f4 fd ff
	ff 03		 cmp	 DWORD PTR tv184[ebp], 3
  00273	0f 84 a8 01 00
	00		 je	 $LN21@overflow
  00279	e9 f7 01 00 00	 jmp	 $LN22@overflow
$LN14@overflow:

; 421  : 					&_Ch, &_Ch + 1, _Src,
; 422  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 423  : 					{	// test result of converting one element
; 424  : 					case codecvt_base::partial:
; 425  : 					case codecvt_base::ok:
; 426  : 						{	// converted something, try to put it out
; 427  : 						size_t _Count = _Dest - &*_Str.begin();

  0027e	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00284	50		 push	 eax
  00285	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00288	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0028d	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  00293	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  00299	89 8d 00 fe ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  0029f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a3	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv241[ebp]
  002a9	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  002ae	8b 55 b8	 mov	 edx, DWORD PTR __Dest$17[ebp]
  002b1	2b d0		 sub	 edx, eax
  002b3	89 55 88	 mov	 DWORD PTR __Count$15[ebp], edx
  002b6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ba	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  002c0	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 428  : 						if (0 < _Count && _Count !=

  002c5	83 7d 88 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  002c9	76 70		 jbe	 SHORT $LN26@overflow
  002cb	8b f4		 mov	 esi, esp
  002cd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002d0	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002d3	51		 push	 ecx
  002d4	8b 55 88	 mov	 edx, DWORD PTR __Count$15[ebp]
  002d7	52		 push	 edx
  002d8	6a 01		 push	 1
  002da	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  002e0	50		 push	 eax
  002e1	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  002e4	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  002e9	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  002ef	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR tv256[ebp]
  002f5	89 8d 00 fe ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  002fb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002ff	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00305	83 ca 01	 or	 edx, 1
  00308	89 95 0c fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0030e	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv246[ebp]
  00314	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00319	50		 push	 eax
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00320	83 c4 10	 add	 esp, 16			; 00000010H
  00323	3b f4		 cmp	 esi, esp
  00325	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032a	39 45 88	 cmp	 DWORD PTR __Count$15[ebp], eax
  0032d	74 0c		 je	 SHORT $LN26@overflow
  0032f	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv208[ebp], 1
  00339	eb 0a		 jmp	 SHORT $LN27@overflow
$LN26@overflow:
  0033b	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN27@overflow:
  00345	8a 85 fc fd ff
	ff		 mov	 al, BYTE PTR tv208[ebp]
  0034b	88 85 6b fe ff
	ff		 mov	 BYTE PTR $T9[ebp], al
  00351	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00358	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0035e	83 e1 01	 and	 ecx, 1
  00361	74 12		 je	 SHORT $LN36@overflow
  00363	83 a5 0c fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0036a	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00370	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN36@overflow:
  00375	0f b6 95 6b fe
	ff ff		 movzx	 edx, BYTE PTR $T9[ebp]
  0037c	85 d2		 test	 edx, edx
  0037e	74 25		 je	 SHORT $LN15@overflow

; 429  : 							fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 430  : 							return (_Traits::eof());	// write failed

  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 48 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  0038b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00392	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00395	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0039a	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  003a0	e9 06 01 00 00	 jmp	 $LN1@overflow
$LN15@overflow:

; 431  : 
; 432  : 						_Wrotesome = true;	// write succeeded

  003a5	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003a8	c6 40 3d 01	 mov	 BYTE PTR [eax+61], 1

; 433  : 						if (_Src != &_Ch)

  003ac	8d 45 d3	 lea	 eax, DWORD PTR __Ch$19[ebp]
  003af	39 45 c4	 cmp	 DWORD PTR __Src$18[ebp], eax
  003b2	74 23		 je	 SHORT $LN16@overflow

; 434  : 							return (_Meta);	// converted whole element

  003b4	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  003b7	89 85 3c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  003bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003c4	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  003c7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003cc	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  003d2	e9 d4 00 00 00	 jmp	 $LN1@overflow
$LN16@overflow:

; 435  : 
; 436  : 						if (0 < _Count)

  003d7	83 7d 88 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  003db	76 02		 jbe	 SHORT $LN17@overflow
  003dd	eb 40		 jmp	 SHORT $LN18@overflow
$LN17@overflow:

; 437  : 							;
; 438  : 						else if (_Str.size() < 4 * _STRING_INC)

  003df	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  003e2	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  003e7	83 f8 20	 cmp	 eax, 32			; 00000020H
  003ea	73 0e		 jae	 SHORT $LN19@overflow

; 439  : 							_Str.append(_STRING_INC, '\0');	// try with more space

  003ec	6a 00		 push	 0
  003ee	6a 08		 push	 8
  003f0	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  003f3	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 440  : 						else

  003f8	eb 25		 jmp	 SHORT $LN18@overflow
$LN19@overflow:

; 441  : 							return (_Traits::eof());	// conversion failed

  003fa	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  003ff	89 85 30 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00405	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0040c	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0040f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00414	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  0041a	e9 8c 00 00 00	 jmp	 $LN1@overflow
$LN18@overflow:

; 442  : 						break;

  0041f	eb 76		 jmp	 SHORT $LN5@overflow
$LN21@overflow:

; 443  : 						}
; 444  : 
; 445  : 					case codecvt_base::noconv:
; 446  : 						return (_Fputc(_Ch, _Myfile) ? _Meta

  00421	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00424	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00427	51		 push	 ecx
  00428	0f b6 55 d3	 movzx	 edx, BYTE PTR __Ch$19[ebp]
  0042c	52		 push	 edx
  0042d	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00432	83 c4 08	 add	 esp, 8
  00435	0f b6 c0	 movzx	 eax, al
  00438	85 c0		 test	 eax, eax
  0043a	74 0b		 je	 SHORT $LN28@overflow
  0043c	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  0043f	89 8d 04 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  00445	eb 0b		 jmp	 SHORT $LN29@overflow
$LN28@overflow:
  00447	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0044c	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
$LN29@overflow:
  00452	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR tv230[ebp]
  00458	89 95 24 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  0045e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00465	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00468	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0046d	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00473	eb 36		 jmp	 SHORT $LN1@overflow
$LN22@overflow:

; 447  : 							: _Traits::eof());	// no conversion, put as is
; 448  : 
; 449  : 					default:
; 450  : 						return (_Traits::eof());	// conversion failed

  00475	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0047a	89 85 18 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00480	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00487	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0048a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0048f	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00495	eb 14		 jmp	 SHORT $LN1@overflow
$LN5@overflow:

; 451  : 					}
; 452  : 				}

  00497	e9 f0 fc ff ff	 jmp	 $LN4@overflow

; 453  : 			}

  0049c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004a3	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  004a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@overflow:

; 454  : 		}

  004ab	52		 push	 edx
  004ac	8b cd		 mov	 ecx, ebp
  004ae	50		 push	 eax
  004af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN43@overflow
  004b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004ba	58		 pop	 eax
  004bb	5a		 pop	 edx
  004bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004c6	59		 pop	 ecx
  004c7	5f		 pop	 edi
  004c8	5e		 pop	 esi
  004c9	5b		 pop	 ebx
  004ca	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004cd	33 cd		 xor	 ecx, ebp
  004cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d4	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  004da	3b ec		 cmp	 ebp, esp
  004dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004e1	8b e5		 mov	 esp, ebp
  004e3	5d		 pop	 ebp
  004e4	c2 04 00	 ret	 4
  004e7	90		 npad	 1
$LN43@overflow:
  004e8	04 00 00 00	 DD	 4
  004ec	00 00 00 00	 DD	 $LN42@overflow
$LN42@overflow:
  004f0	d3 ff ff ff	 DD	 -45			; ffffffd3H
  004f4	01 00 00 00	 DD	 1
  004f8	00 00 00 00	 DD	 $LN37@overflow
  004fc	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00500	04 00 00 00	 DD	 4
  00504	00 00 00 00	 DD	 $LN38@overflow
  00508	b8 ff ff ff	 DD	 -72			; ffffffb8H
  0050c	04 00 00 00	 DD	 4
  00510	00 00 00 00	 DD	 $LN39@overflow
  00514	94 ff ff ff	 DD	 -108			; ffffff94H
  00518	1c 00 00 00	 DD	 28			; 0000001cH
  0051c	00 00 00 00	 DD	 $LN40@overflow
$LN40@overflow:
  00520	5f		 DB	 95			; 0000005fH
  00521	53		 DB	 83			; 00000053H
  00522	74		 DB	 116			; 00000074H
  00523	72		 DB	 114			; 00000072H
  00524	00		 DB	 0
$LN39@overflow:
  00525	5f		 DB	 95			; 0000005fH
  00526	44		 DB	 68			; 00000044H
  00527	65		 DB	 101			; 00000065H
  00528	73		 DB	 115			; 00000073H
  00529	74		 DB	 116			; 00000074H
  0052a	00		 DB	 0
$LN38@overflow:
  0052b	5f		 DB	 95			; 0000005fH
  0052c	53		 DB	 83			; 00000053H
  0052d	72		 DB	 114			; 00000072H
  0052e	63		 DB	 99			; 00000063H
  0052f	00		 DB	 0
$LN37@overflow:
  00530	5f		 DB	 95			; 0000005fH
  00531	43		 DB	 67			; 00000043H
  00532	68		 DB	 104			; 00000068H
  00533	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1:
  00008	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2:
  00013	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3:
  0001e	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4:
  00029	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002f	83 e0 01	 and	 eax, 1
  00032	0f 84 12 00 00
	00		 je	 $LN35@overflow
  00038	83 a5 0c fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0003f	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN35@overflow:
  0004a	c3		 ret	 0
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 8a f0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-528]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 381  : 		{	// unlock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		if (_Myfile)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 19		 je	 SHORT $LN1@Unlock

; 383  : 			_CSTD _unlock_file(_Myfile);

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlock_file
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Unlock:

; 384  : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 375  : 		{	// lock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 376  : 		if (_Myfile)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 19		 je	 SHORT $LN1@Lock

; 377  : 			_CSTD _lock_file(_Myfile);

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lock_file
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Lock:

; 378  : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
__Ans$ = -20						; size = 4
_this$ = -8						; size = 4
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 359  : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 		_Myt *_Ans = this;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR __Ans$[ebp], eax

; 361  : 		if (_Myfile == 0)

  00029	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00030	75 09		 jne	 SHORT $LN2@close

; 362  : 			_Ans = 0;

  00032	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0

; 363  : 		else

  00039	eb 3a		 jmp	 SHORT $LN3@close
$LN2@close:

; 364  : 			{	// put any homing sequence and close file
; 365  : 			if (!_Endwrite())

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	75 07		 jne	 SHORT $LN4@close

; 366  : 				_Ans = 0;

  0004a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN4@close:

; 367  : 			if (fclose(_Myfile) != 0)

  00051	8b f4		 mov	 esi, esp
  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00059	51		 push	 ecx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00060	83 c4 04	 add	 esp, 4
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	85 c0		 test	 eax, eax
  0006c	74 07		 je	 SHORT $LN3@close

; 368  : 				_Ans = 0;

  0006e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN3@close:

; 369  : 			}
; 370  : 		_Init(0, _Closefl);

  00075	6a 02		 push	 2
  00077	6a 00		 push	 0
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 371  : 		return (_Ans);

  00081	8b 45 ec	 mov	 eax, DWORD PTR __Ans$[ebp]

; 372  : 		}

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
tv88 = -252						; size = 4
tv89 = -248						; size = 4
$T2 = -240						; size = 8
__File$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 275  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00021	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 276  : 		_Filet *_File;
; 277  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00049	75 1d		 jne	 SHORT $LN3@open
  0004b	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z ; std::_Fiopen
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	89 45 e0	 mov	 DWORD PTR __File$[ebp], eax
  00062	83 7d e0 00	 cmp	 DWORD PTR __File$[ebp], 0
  00066	75 04		 jne	 SHORT $LN2@open
$LN3@open:

; 278  : 			return (0);	// open failed

  00068	33 c0		 xor	 eax, eax
  0006a	eb 6d		 jmp	 SHORT $LN1@open
$LN2@open:

; 279  : 
; 280  : 		_Init(_File, _Openfl);

  0006c	6a 01		 push	 1
  0006e	8b 45 e0	 mov	 eax, DWORD PTR __File$[ebp]
  00071	50		 push	 eax
  00072	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 281  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  0007a	8b f4		 mov	 esi, esp
  0007c	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00082	50		 push	 eax
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  00099	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv89[ebp]
  0009f	89 8d 04 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  000a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ac	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv88[ebp]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  000b8	83 c4 04	 add	 esp, 4
  000bb	50		 push	 eax
  000bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  000c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cb	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000d1	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 282  : 		return (this);	// open succeeded

  000d6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@open:

; 283  : 		}

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 00 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-256]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::is_open, COMDAT
; _this$ = ecx

; 268  : 		{	// test if C stream has been opened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 269  : 		return (_Myfile != 0);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 0c		 je	 SHORT $LN3@is_open
  0002c	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  00036	eb 0a		 jmp	 SHORT $LN4@is_open
$LN3@is_open:
  00038	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@is_open:
  00042	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 270  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::is_open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 161  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 162  : 		if (_Myfile != 0)

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00052	74 08		 je	 SHORT $LN2@basic_file

; 163  : 			_Reset_back();	// revert from _Mychar buffer

  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 164  : 		if (_Closef)

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	0f b6 48 48	 movzx	 ecx, BYTE PTR [eax+72]
  00063	85 c9		 test	 ecx, ecx
  00065	74 08		 je	 SHORT $LN1@basic_file

; 165  : 			close();

  00067	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:

; 166  : 		}

  0006f	8b f4		 mov	 esi, esp
  00071	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__File$ = 8						; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 156  : 		{	// construct from pointer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 155  : 		: _Mysb()

  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 156  : 		{	// construct from pointer to C stream

  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 157  : 		_Init(_File, _Newfl);

  00064	6a 00		 push	 0
  00066	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 158  : 		}

  00072	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00079	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::is_open, COMDAT
; _this$ = ecx

; 926  : 		{	// test if C stream has been opened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 927  : 		return (_Filebuffer.is_open());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 10	 add	 ecx, 16			; 00000010H
  00029	e8 00 00 00 00	 call	 ?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::is_open

; 928  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::is_open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 917  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00029	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 44 10 90 00
	00 00 00	 mov	 DWORD PTR [eax+edx-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  0003d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00040	83 ea 70	 sub	 edx, 112		; 00000070H
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 54 01 8c	 mov	 DWORD PTR [ecx+eax-116], edx

; 918  : 		}

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 e9 60	 sub	 ecx, 96			; 00000060H
  00059	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 e9 58	 sub	 ecx, 88			; 00000058H
  00064	8b f4		 mov	 esi, esp
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Str$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 787  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 786  : 		: basic_ifstream(_Str.c_str(), _Mode, _Prot)

  00023	8b 45 14	 mov	 eax, DWORD PTR _$initVBases$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Prot$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Mode$[ebp]
  0002e	52		 push	 edx
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Str$[ebp]
  00032	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00037	50		 push	 eax
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >

; 787  : 		{	// construct with named file and specified mode

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005a	83 ea 70	 sub	 edx, 112		; 00000070H
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx

; 788  : 		}

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 10 00	 ret	 16			; 00000010H
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 778  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 34		 je	 SHORT $LN2@basic_ifst
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 70	 add	 ecx, 112		; 00000070H
  00061	8b f4		 mov	 esi, esp
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00077	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0007d	83 c8 01	 or	 eax, 1
  00080	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_ifst:

; 777  : 		: _Mybase(&_Filebuffer)

  00086	8b f4		 mov	 esi, esp
  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 c0 10	 add	 eax, 16			; 00000010H
  00092	50		 push	 eax
  00093	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 778  : 		{	// construct with named file and specified mode

  000aa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  000bc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c4	83 ea 70	 sub	 edx, 112		; 00000070H
  000c7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx
  000d6	6a 00		 push	 0
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 c1 10	 add	 ecx, 16			; 00000010H
  000de	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000e3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 779  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)

  000e7	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000ee	83 c9 01	 or	 ecx, 1
  000f1	51		 push	 ecx
  000f2	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000f5	52		 push	 edx
  000f6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	83 c1 10	 add	 ecx, 16			; 00000010H
  000fc	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00101	85 c0		 test	 eax, eax
  00103	75 20		 jne	 SHORT $LN1@basic_ifst

; 780  : 			_Myios::setstate(ios_base::failbit);

  00105	8b f4		 mov	 esi, esp
  00107	6a 00		 push	 0
  00109	6a 02		 push	 2
  0010b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00110	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00113	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00116	8b ca		 mov	 ecx, edx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@basic_ifst:

; 781  : 		}

  00125	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00132	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00139	59		 pop	 ecx
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00143	3b ec		 cmp	 ebp, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN6@basic_ifst
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 70	 add	 ecx, 112		; 00000070H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN6@basic_ifst:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 18	 add	 ecx, 24			; 00000018H
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00041	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	83 c1 10	 add	 ecx, 16			; 00000010H
  00047	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  0004c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00050	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00053	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\fileutils\fileutils.cpp
;	COMDAT ?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
_TEXT	SEGMENT
tv147 = -648						; size = 4
$T2 = -640						; size = 4
$T3 = -628						; size = 4
_output$ = -424						; size = 176
_line$ = -240						; size = 28
_file$ = -204						; size = 184
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z PROC ; Engine::Util::loadAsString, COMDAT

; 7    : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 02 00
	00		 sub	 esp, 636		; 0000027cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 78 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-648]
  00020	b9 9f 00 00 00	 mov	 ecx, 159		; 0000009fH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 8    : 			std::ifstream file(path);

  0004a	68 b8 00 00 00	 push	 184			; 000000b8H
  0004f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00055	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
  0005a	6a 01		 push	 1
  0005c	6a 40		 push	 64			; 00000040H
  0005e	6a 01		 push	 1
  00060	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp]
  00063	50		 push	 eax
  00064	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 9    : 			std::string line;

  00076	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _line$[ebp]
  0007c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00081	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 10   : 			std::stringstream output;

  00085	68 b0 00 00 00	 push	 176			; 000000b0H
  0008a	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _output$[ebp]
  00090	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  00095	6a 01		 push	 1
  00097	6a 03		 push	 3
  00099	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _output$[ebp]
  0009f	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  000a4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 11   : 			if (file.is_open())

  000a8	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000ae	e8 00 00 00 00	 call	 ?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ifstream<char,std::char_traits<char> >::is_open
  000b3	0f b6 c0	 movzx	 eax, al
  000b6	85 c0		 test	 eax, eax
  000b8	0f 84 91 00 00
	00		 je	 $LN4@loadAsStri
$LN2@loadAsStri:

; 12   : 			{
; 13   : 				//std::cout << "file open" << std::endl;
; 14   : 				while (getline(file, line))

  000be	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _line$[ebp]
  000c4	50		 push	 eax
  000c5	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  000d1	83 c4 08	 add	 esp, 8
  000d4	89 85 8c fd ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  000da	8b 95 8c fd ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  000e0	8b 02		 mov	 eax, DWORD PTR [edx]
  000e2	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  000e8	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000eb	8b f4		 mov	 esi, esp
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bios_base@std@@QBE_NXZ
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	0f b6 c8	 movzx	 ecx, al
  000fd	85 c9		 test	 ecx, ecx
  000ff	74 4e		 je	 SHORT $LN4@loadAsStri

; 15   : 				{
; 16   : 					//std::cout << line << std::endl;
; 17   : 					output << line << "\n";

  00101	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _output$[ebp]
  00107	85 c0		 test	 eax, eax
  00109	74 11		 je	 SHORT $LN6@loadAsStri
  0010b	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _output$[ebp]
  00111	83 c1 10	 add	 ecx, 16			; 00000010H
  00114	89 8d 78 fd ff
	ff		 mov	 DWORD PTR tv147[ebp], ecx
  0011a	eb 0a		 jmp	 SHORT $LN7@loadAsStri
$LN6@loadAsStri:
  0011c	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv147[ebp], 0
$LN7@loadAsStri:
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  0012b	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _line$[ebp]
  00131	52		 push	 edx
  00132	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR tv147[ebp]
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0013e	83 c4 08	 add	 esp, 8
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00147	83 c4 08	 add	 esp, 8

; 18   : 				}

  0014a	e9 6f ff ff ff	 jmp	 $LN2@loadAsStri
$LN4@loadAsStri:

; 19   : 			}
; 20   : 			return output.str();

  0014f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00152	50		 push	 eax
  00153	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _output$[ebp]
  00159	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0015e	8b 8d 80 fd ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00164	83 c9 01	 or	 ecx, 1
  00167	89 8d 80 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0016d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00171	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _output$[ebp]
  00177	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0017c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00180	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _line$[ebp]
  00186	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0018b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00192	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00198	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0019d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 21   : 		}

  001a0	52		 push	 edx
  001a1	8b cd		 mov	 ecx, ebp
  001a3	50		 push	 eax
  001a4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@loadAsStri
  001aa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001af	58		 pop	 eax
  001b0	5a		 pop	 edx
  001b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001bb	59		 pop	 ecx
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c2	33 cd		 xor	 ecx, ebp
  001c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c9	81 c4 88 02 00
	00		 add	 esp, 648		; 00000288H
  001cf	3b ec		 cmp	 ebp, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
  001da	66 90		 npad	 2
$LN18@loadAsStri:
  001dc	03 00 00 00	 DD	 3
  001e0	00 00 00 00	 DD	 $LN17@loadAsStri
$LN17@loadAsStri:
  001e4	34 ff ff ff	 DD	 -204			; ffffff34H
  001e8	b8 00 00 00	 DD	 184			; 000000b8H
  001ec	00 00 00 00	 DD	 $LN13@loadAsStri
  001f0	10 ff ff ff	 DD	 -240			; ffffff10H
  001f4	1c 00 00 00	 DD	 28			; 0000001cH
  001f8	00 00 00 00	 DD	 $LN14@loadAsStri
  001fc	58 fe ff ff	 DD	 -424			; fffffe58H
  00200	b0 00 00 00	 DD	 176			; 000000b0H
  00204	00 00 00 00	 DD	 $LN15@loadAsStri
$LN15@loadAsStri:
  00208	6f		 DB	 111			; 0000006fH
  00209	75		 DB	 117			; 00000075H
  0020a	74		 DB	 116			; 00000074H
  0020b	70		 DB	 112			; 00000070H
  0020c	75		 DB	 117			; 00000075H
  0020d	74		 DB	 116			; 00000074H
  0020e	00		 DB	 0
$LN14@loadAsStri:
  0020f	6c		 DB	 108			; 0000006cH
  00210	69		 DB	 105			; 00000069H
  00211	6e		 DB	 110			; 0000006eH
  00212	65		 DB	 101			; 00000065H
  00213	00		 DB	 0
$LN13@loadAsStri:
  00214	66		 DB	 102			; 00000066H
  00215	69		 DB	 105			; 00000069H
  00216	6c		 DB	 108			; 0000006cH
  00217	65		 DB	 101			; 00000065H
  00218	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$0:
  00000	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$1:
  0000b	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _line$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z$2:
  00016	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _output$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__ehhandler$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a 74 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-652]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ENDP ; Engine::Util::loadAsString
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 116  : 	{	// put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 117  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00027	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0002a	52		 push	 edx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00031	83 c4 08	 add	 esp, 8
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	74 0c		 je	 SHORT $LN3@Ungetc
  00040	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  0004a	eb 0a		 jmp	 SHORT $LN4@Ungetc
$LN3@Ungetc:
  0004c	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN4@Ungetc:
  00056	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]

; 118  : 	}

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 92   : 	{	// put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 93   : 	return (fputc(_Byte, _File) != EOF);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	0f be 4d 08	 movsx	 ecx, BYTE PTR __Byte$[ebp]
  00028	51		 push	 ecx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  0002f	83 c4 08	 add	 esp, 8
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	74 0c		 je	 SHORT $LN3@Fputc
  0003e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  00048	eb 0a		 jmp	 SHORT $LN4@Fputc
$LN3@Fputc:
  0004a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN4@Fputc:
  00054	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]

; 94   : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Meta$ = -8						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 47   : 	{	// get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 48   : 	int _Meta;
; 49   : 	if ((_Meta = fgetc(_File)) == EOF)

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	89 45 f8	 mov	 DWORD PTR __Meta$[ebp], eax
  00037	83 7d f8 ff	 cmp	 DWORD PTR __Meta$[ebp], -1
  0003b	75 06		 jne	 SHORT $LN2@Fgetc

; 50   : 		return (false);

  0003d	32 c0		 xor	 al, al
  0003f	eb 0c		 jmp	 SHORT $LN1@Fgetc

; 51   : 	else

  00041	eb 0a		 jmp	 SHORT $LN1@Fgetc
$LN2@Fgetc:

; 52   : 		{	// got one, convert to char
; 53   : 		_Byte = (char)_Meta;

  00043	8b 45 08	 mov	 eax, DWORD PTR __Byte$[ebp]
  00046	8a 4d f8	 mov	 cl, BYTE PTR __Meta$[ebp]
  00049	88 08		 mov	 BYTE PTR [eax], cl

; 54   : 		return (true);

  0004b	b0 01		 mov	 al, 1
$LN1@Fgetc:

; 55   : 		}
; 56   : 	}

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv83 = -232						; size = 4
tv71 = -232						; size = 4
__Ptr0$1 = -32						; size = 4
__Facptr$ = -20						; size = 4
_this$ = -8						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 429  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 430  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  0002c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0002f	73 17		 jae	 SHORT $LN6@Getfacet
  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003a	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  0003d	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00040	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00046	eb 0a		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00048	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
  00052	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  00058	89 55 ec	 mov	 DWORD PTR __Facptr$[ebp], edx

; 431  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 432  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  0005b	83 7d ec 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  0005f	75 0e		 jne	 SHORT $LN4@Getfacet
  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00067	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  0006b	85 d2		 test	 edx, edx
  0006d	75 07		 jne	 SHORT $LN2@Getfacet
$LN4@Getfacet:

; 433  : 			return (_Facptr);	// found facet or not transparent

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Facptr$[ebp]
  00072	eb 39		 jmp	 SHORT $LN1@Getfacet

; 434  : 		else

  00074	eb 37		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 435  : 			{	// look in current locale
; 436  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  00076	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0007b	89 45 e0	 mov	 DWORD PTR __Ptr0$1[ebp], eax

; 437  : 			return (_Id < _Ptr0->_Facetcount

  0007e	8b 45 e0	 mov	 eax, DWORD PTR __Ptr0$1[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00084	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00087	73 14		 jae	 SHORT $LN8@Getfacet
  00089	8b 55 e0	 mov	 edx, DWORD PTR __Ptr0$1[ebp]
  0008c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00092	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00095	89 95 18 ff ff
	ff		 mov	 DWORD PTR tv83[ebp], edx
  0009b	eb 0a		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  0009d	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN9@Getfacet:
  000a7	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
$LN1@Getfacet:

; 438  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 439  : 				: 0);	// no entry in current locale
; 440  : 			}
; 441  : 		}

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 402  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 403  : 		if (_Ptr != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00049	74 66		 je	 SHORT $LN3@locale

; 404  : 			delete _Ptr->_Decref();

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00051	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	8b f4		 mov	 esi, esp
  00058	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0005b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0005e	ff d2		 call	 edx
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0006d	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00073	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00079	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR $T3[ebp], 0
  00080	74 25		 je	 SHORT $LN4@locale
  00082	8b f4		 mov	 esi, esp
  00084	6a 01		 push	 1
  00086	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0008c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008e	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	ff d0		 call	 eax
  00098	3b f4		 cmp	 esi, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  000a5	eb 0a		 jmp	 SHORT $LN3@locale
$LN4@locale:
  000a7	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN3@locale:

; 405  : 		}

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1locale@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1bad_cast@std@@UAE@XZ
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 0c		 push	 12			; 0000000cH
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :         : exception("bad cast", 1)

  00023	6a 01		 push	 1
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 127  :     {

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@

; 128  :     }

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 3710 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3711 : 		_Xlength_error("string too long");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 3712 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -245						; size = 1
__Al$2 = -44						; size = 4
__Ptr$3 = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3691 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3692 : 		this->_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 3693 : 		auto& _My_data = this->_Get_data();

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00033	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3694 : 		if (_My_data._Large_string_engaged())

  00036	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	74 46		 je	 SHORT $LN2@Tidy_deall

; 3695 : 			{
; 3696 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  00045	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	89 4d e0	 mov	 DWORD PTR __Ptr$3[ebp], ecx

; 3697 : 			auto& _Al = this->_Getal();

  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00056	89 45 d4	 mov	 DWORD PTR __Al$2[ebp], eax

; 3698 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

  00059	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	83 c0 04	 add	 eax, 4
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00065	83 c4 04	 add	 esp, 4
  00068	50		 push	 eax
  00069	8b 4d d4	 mov	 ecx, DWORD PTR __Al$2[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
  00072	83 c4 08	 add	 esp, 8

; 3699 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00075	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00078	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	51		 push	 ecx
  0007f	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$3[ebp]
  00082	52		 push	 edx
  00083	8b 4d d4	 mov	 ecx, DWORD PTR __Al$2[ebp]
  00086	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 3700 : 			}
; 3701 : 
; 3702 : 		_My_data._Mysize = 0;

  0008b	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0008e	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 3703 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00098	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 3704 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3705 : 		// write can alias this
; 3706 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0009f	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  000a6	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000ac	50		 push	 eax
  000ad	b9 01 00 00 00	 mov	 ecx, 1
  000b2	6b d1 00	 imul	 edx, ecx, 0
  000b5	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b8	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  000c2	83 c4 08	 add	 esp, 8

; 3707 : 		}

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -221						; size = 1
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3681 : 		{	// initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3682 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3683 : 		_My_data._Mysize = 0;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 3684 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00038	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 3685 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3686 : 		// write can alias this
; 3687 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00042	c6 85 23 ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00049	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004f	50		 push	 eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005b	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00065	83 c4 08	 add	 esp, 8

; 3688 : 		}

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -221						; size = 1
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 3675 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3676 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3677 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  0002e	c6 85 23 ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00035	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0003b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0003e	8d 95 23 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00044	52		 push	 edx
  00045	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004d	03 45 08	 add	 eax, DWORD PTR __Newsize$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00056	83 c4 08	 add	 esp, 8

; 3678 : 		}

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
$T1 = -264						; size = 4
__Old$ = -60						; size = 4
__Masked$ = -48						; size = 4
__My_data$ = -36					; size = 4
__Max$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3573 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3574 : 		const size_type _Max = max_size();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	89 45 e8	 mov	 DWORD PTR __Max$[ebp], eax

; 3575 : 		auto& _My_data = this->_Get_data();

  00038	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	89 45 dc	 mov	 DWORD PTR __My_data$[ebp], eax

; 3576 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00043	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00046	83 c8 0f	 or	 eax, 15			; 0000000fH
  00049	89 45 d0	 mov	 DWORD PTR __Masked$[ebp], eax

; 3577 : 		if (_Masked > _Max)

  0004c	8b 45 d0	 mov	 eax, DWORD PTR __Masked$[ebp]
  0004f	3b 45 e8	 cmp	 eax, DWORD PTR __Max$[ebp]
  00052	76 05		 jbe	 SHORT $LN2@Calculate_

; 3578 : 			{	// the mask overflows, settle for max_size()
; 3579 : 			return (_Max);

  00054	8b 45 e8	 mov	 eax, DWORD PTR __Max$[ebp]
  00057	eb 40		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 3580 : 			}
; 3581 : 
; 3582 : 		const size_type _Old = _My_data._Myres;

  00059	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0005f	89 4d c4	 mov	 DWORD PTR __Old$[ebp], ecx

; 3583 : 		if (_Old > _Max - _Old / 2)

  00062	8b 45 c4	 mov	 eax, DWORD PTR __Old$[ebp]
  00065	d1 e8		 shr	 eax, 1
  00067	8b 4d e8	 mov	 ecx, DWORD PTR __Max$[ebp]
  0006a	2b c8		 sub	 ecx, eax
  0006c	39 4d c4	 cmp	 DWORD PTR __Old$[ebp], ecx
  0006f	76 05		 jbe	 SHORT $LN3@Calculate_

; 3584 : 			{	// similarly, geometric overflows
; 3585 : 			return (_Max);

  00071	8b 45 e8	 mov	 eax, DWORD PTR __Max$[ebp]
  00074	eb 23		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 3586 : 			}
; 3587 : 
; 3588 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00076	8b 45 c4	 mov	 eax, DWORD PTR __Old$[ebp]
  00079	d1 e8		 shr	 eax, 1
  0007b	03 45 c4	 add	 eax, DWORD PTR __Old$[ebp]
  0007e	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00084	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0008a	51		 push	 ecx
  0008b	8d 55 d0	 lea	 edx, DWORD PTR __Masked$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00094	83 c4 08	 add	 esp, 8
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 3589 : 		}

  00099	52		 push	 edx
  0009a	8b cd		 mov	 ecx, ebp
  0009c	50		 push	 eax
  0009d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  000a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a8	58		 pop	 eax
  000a9	5a		 pop	 edx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
  000ca	66 90		 npad	 2
$LN7@Calculate_:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  000d4	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000d8	04 00 00 00	 DD	 4
  000dc	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  000e0	5f		 DB	 95			; 0000005fH
  000e1	4d		 DB	 77			; 0000004dH
  000e2	61		 DB	 97			; 00000061H
  000e3	73		 DB	 115			; 00000073H
  000e4	6b		 DB	 107			; 0000006bH
  000e5	65		 DB	 101			; 00000065H
  000e6	64		 DB	 100			; 00000064H
  000e7	00		 DB	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -264						; size = 4
$T2 = -252						; size = 4
$T3 = -240						; size = 4
__Storage_max$ = -36					; size = 4
__Alloc_max$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3051 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3052 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 e8	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3053 : 		const size_type _Storage_max = // can always store small string
; 3054 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));

  00041	c7 85 10 ff ff
	ff 10 00 00 00	 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  0004b	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00051	50		 push	 eax
  00052	8d 4d e8	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0005b	83 c4 08	 add	 esp, 8
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	89 55 dc	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3055 : 		return (_Min_value(

  00063	8b 45 dc	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  00066	83 e8 01	 sub	 eax, 1
  00069	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0006f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00074	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0007a	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00080	51		 push	 ecx
  00081	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0008d	83 c4 08	 add	 esp, 8
  00090	8b 00		 mov	 eax, DWORD PTR [eax]

; 3056 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3057 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3058 : 			));
; 3059 : 
; 3060 : 		}

  00092	52		 push	 edx
  00093	8b cd		 mov	 ecx, ebp
  00095	50		 push	 eax
  00096	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  0009c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a1	58		 pop	 eax
  000a2	5a		 pop	 edx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
  000c1	0f 1f 00	 npad	 3
$LN5@max_size:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000cc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d0	04 00 00 00	 DD	 4
  000d4	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000d8	5f		 DB	 95			; 0000005fH
  000d9	41		 DB	 65			; 00000041H
  000da	6c		 DB	 108			; 0000006cH
  000db	6c		 DB	 108			; 0000006cH
  000dc	6f		 DB	 111			; 0000006fH
  000dd	63		 DB	 99			; 00000063H
  000de	5f		 DB	 95			; 0000005fH
  000df	6d		 DB	 109			; 0000006dH
  000e0	61		 DB	 97			; 00000061H
  000e1	78		 DB	 120			; 00000078H
  000e2	00		 DB	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3046 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3047 : 		return (this->_Get_data()._Mysize);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3048 : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 3029 : 		{	// return pointer to immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3030 : 		return (this->_Get_data()._Myptr());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3031 : 		}

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3024 : 		{	// return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3025 : 		return (this->_Get_data()._Myptr());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3026 : 		}

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
$T1 = -257						; size = 1
$T2 = -245						; size = 1
__Ptr$3 = -44						; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 2974 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2975 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2976 : 		const size_type _Old_size = _My_data._Mysize;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2977 : 		if (_Old_size < _My_data._Myres)

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0003d	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00040	73 4d		 jae	 SHORT $LN2@push_back

; 2978 : 			{
; 2979 : 			_My_data._Mysize = _Old_size + 1;

  00042	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00045	83 c0 01	 add	 eax, 1
  00048	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2980 : 			_Elem * const _Ptr = _My_data._Myptr();

  0004e	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00056	89 45 d4	 mov	 DWORD PTR __Ptr$3[ebp], eax

; 2981 : 			_Traits::assign(_Ptr[_Old_size], _Ch);

  00059	8d 45 08	 lea	 eax, DWORD PTR __Ch$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d d4	 mov	 ecx, DWORD PTR __Ptr$3[ebp]
  00060	03 4d e0	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00069	83 c4 08	 add	 esp, 8

; 2982 : 			_Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0006c	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00073	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00079	50		 push	 eax
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0007d	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$3[ebp]
  00080	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0008a	83 c4 08	 add	 esp, 8

; 2983 : 			return;

  0008d	eb 1f		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 2984 : 			}
; 2985 : 
; 2986 : 		_Reallocate_grow_by(1,

  0008f	33 c0		 xor	 eax, eax
  00091	88 85 ff fe ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00097	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  0009b	51		 push	 ecx
  0009c	0f b6 95 ff fe
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  000a3	52		 push	 edx
  000a4	6a 01		 push	 1
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
$LN1@push_back:

; 2987 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2988 : 				const _Elem _Ch) {
; 2989 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2990 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);
; 2991 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 2992 : 			}, _Ch);
; 2993 : 		}

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 2825 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2826 : 		auto _My_data = _STD addressof(this->_Get_data());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00050	83 c4 04	 add	 esp, 4
  00053	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 2827 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));

  00056	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ; std::_Refancy<char *,0>
  00068	83 c4 04	 add	 esp, 4
  0006b	50		 push	 eax
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006f	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  00074	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2828 : 		}

  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__New_size$ = -68					; size = 4
__Erase_at$ = -56					; size = 4
__My_ptr$ = -44						; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2599 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2600 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2601 : 		_My_data._Check_offset(_Off);

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00031	50		 push	 eax
  00032	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2602 : 		_Count = _My_data._Clamp_suffix_size(_Off, _Count);

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00041	51		 push	 ecx
  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  0004a	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax

; 2603 : 		const size_type _Old_size = _My_data._Mysize;

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00050	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00053	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2604 : 		_Elem * const _My_ptr = _My_data._Myptr();

  00056	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005e	89 45 d4	 mov	 DWORD PTR __My_ptr$[ebp], eax

; 2605 : 		_Elem * const _Erase_at = _My_ptr + _Off;

  00061	8b 45 d4	 mov	 eax, DWORD PTR __My_ptr$[ebp]
  00064	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00067	89 45 c8	 mov	 DWORD PTR __Erase_at$[ebp], eax

; 2606 : 		const size_type _New_size = _Old_size - _Count;

  0006a	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0006d	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  00070	89 45 bc	 mov	 DWORD PTR __New_size$[ebp], eax

; 2607 : 		_My_data._Mysize = _New_size;

  00073	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00076	8b 4d bc	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00079	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2608 : 		_Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  0007c	8b 45 bc	 mov	 eax, DWORD PTR __New_size$[ebp]
  0007f	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	50		 push	 eax
  00086	8b 4d c8	 mov	 ecx, DWORD PTR __Erase_at$[ebp]
  00089	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 c8	 mov	 edx, DWORD PTR __Erase_at$[ebp]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2609 : 		return (*this);

  00099	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 2610 : 		}

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2591 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2592 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2593 : 		_My_data._Check_offset(_Off);

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00031	50		 push	 eax
  00032	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2594 : 		_Eos(_Off);

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2595 : 		return (*this);

  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 2596 : 		}

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
__Old_ptr$3 = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2441 : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2442 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2443 : 		if (_Count <= _My_data._Myres)

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00034	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00037	77 4b		 ja	 SHORT $LN2@assign

; 2444 : 			{
; 2445 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00039	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00041	89 45 e0	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2446 : 			_My_data._Mysize = _Count;

  00044	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2447 : 			_Traits::assign(_Old_ptr, _Count, _Ch);

  0004d	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00055	51		 push	 ecx
  00056	8b 55 e0	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2448 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00062	c6 85 17 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00069	8d 85 17 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006f	50		 push	 eax
  00070	8b 4d e0	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00073	03 4d 08	 add	 ecx, DWORD PTR __Count$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0007c	83 c4 08	 add	 esp, 8

; 2449 : 			return (*this);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	eb 21		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2450 : 			}
; 2451 : 
; 2452 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00084	33 c0		 xor	 eax, eax
  00086	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0008c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00090	51		 push	 ecx
  00091	0f b6 95 0b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  00098	52		 push	 edx
  00099	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
$LN1@assign:

; 2453 : 			_Traits::assign(_New_ptr, _Count, _Ch);
; 2454 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2455 : 			}, _Ch));
; 2456 : 		}

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
__Old_ptr$3 = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2418 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2419 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2420 : 		if (_Count <= _My_data._Myres)

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00034	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00037	77 4a		 ja	 SHORT $LN2@assign

; 2421 : 			{
; 2422 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00039	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00041	89 45 e0	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2423 : 			_My_data._Mysize = _Count;

  00044	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00047	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2424 : 			_Traits::move(_Old_ptr, _Ptr, _Count);

  0004d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 e0	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2425 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00061	c6 85 17 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00068	8d 85 17 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d e0	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00072	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0007b	83 c4 08	 add	 esp, 8

; 2426 : 			return (*this);

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	eb 20		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2427 : 			}
; 2428 : 
; 2429 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00083	33 c0		 xor	 eax, eax
  00085	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008e	51		 push	 ecx
  0008f	0f b6 95 0b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  00096	52		 push	 edx
  00097	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2430 : 			_Traits::copy(_New_ptr, _Ptr, _Count);
; 2431 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2432 : 			}, _Ptr));
; 2433 : 		}

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
$T1 = -257						; size = 1
$T2 = -245						; size = 1
__Old_ptr$3 = -44					; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2360 : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2361 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2362 : 		const size_type _Old_size = _My_data._Mysize;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2363 : 		if (_Count <= _My_data._Myres - _Old_size)

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003d	2b 4d e0	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  00040	39 4d 08	 cmp	 DWORD PTR __Count$[ebp], ecx
  00043	77 54		 ja	 SHORT $LN2@append

; 2364 : 			{
; 2365 : 			_My_data._Mysize = _Old_size + _Count;

  00045	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00048	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0004b	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2366 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00059	89 45 d4	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2367 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  0005c	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00064	51		 push	 ecx
  00065	8b 55 d4	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00068	03 55 e0	 add	 edx, DWORD PTR __Old_size$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2368 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00074	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0007b	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00081	50		 push	 eax
  00082	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00085	03 4d 08	 add	 ecx, DWORD PTR __Count$[ebp]
  00088	03 4d d4	 add	 ecx, DWORD PTR __Old_ptr$3[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00091	83 c4 08	 add	 esp, 8

; 2369 : 			return (*this);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	eb 25		 jmp	 SHORT $LN1@append
$LN2@append:

; 2370 : 			}
; 2371 : 
; 2372 : 		return (_Reallocate_grow_by(_Count,

  00099	33 c0		 xor	 eax, eax
  0009b	88 85 ff fe ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  000a1	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  000a9	52		 push	 edx
  000aa	0f b6 85 ff fe
	ff ff		 movzx	 eax, BYTE PTR $T1[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  000b5	51		 push	 ecx
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
$LN1@append:

; 2373 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2374 : 				const size_type _Count, const _Elem _Ch) {
; 2375 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2376 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
; 2377 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2378 : 			}, _Count, _Ch));
; 2379 : 		}

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2298 : 		{	// append 1 * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2299 : 		push_back(_Ch);

  00023	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 2300 : 		return (*this);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 2301 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2230 : 		{	// destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2231 : 		_Tidy_deallocate();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2232 : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -44					; size = 4
__My_data_mem$ = -32					; size = 4
__Right_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2116 : 		{	// assign by stealing _Right's buffer, memcpy optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2117 : 			// pre: this != &_Right
; 2118 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2119 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2120 : 		auto& _Right_data = _Right._Get_data();

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2121 : 
; 2122 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2123 : 		if (_Right_data._Large_string_engaged())

  0002e	8b 4d ec	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00036	0f b6 c0	 movzx	 eax, al
  00039	85 c0		 test	 eax, eax
  0003b	74 0e		 je	 SHORT $LN2@Assign_rv_

; 2124 : 			{	// take ownership of _Right's iterators along with its buffer
; 2125 : 			this->_Swap_all(_Right);

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00040	50		 push	 eax
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all

; 2126 : 			}
; 2127 : 		else

  00049	eb 08		 jmp	 SHORT $LN3@Assign_rv_
$LN2@Assign_rv_:

; 2128 : 			{
; 2129 : 			_Right._Orphan_all();

  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
$LN3@Assign_rv_:

; 2130 : 			}
; 2131 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2132 : 
; 2133 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2134 : 			+ _Memcpy_move_offset;

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00061	83 c4 04	 add	 esp, 4
  00064	83 c0 04	 add	 eax, 4
  00067	89 45 e0	 mov	 DWORD PTR __My_data_mem$[ebp], eax

; 2135 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2136 : 			+ _Memcpy_move_offset;

  0006a	8b 45 ec	 mov	 eax, DWORD PTR __Right_data$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00073	83 c4 04	 add	 esp, 4
  00076	83 c0 04	 add	 eax, 4
  00079	89 45 d4	 mov	 DWORD PTR __Right_data_mem$[ebp], eax

; 2137 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0007c	6a 18		 push	 24			; 00000018H
  0007e	8b 45 d4	 mov	 eax, DWORD PTR __Right_data_mem$[ebp]
  00081	50		 push	 eax
  00082	8b 4d e0	 mov	 ecx, DWORD PTR __My_data_mem$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 _memcpy
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2138 : 		_Right._Tidy_init();

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00091	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2139 : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2039 : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2038 : 		: _Mybase(_STD move(_Right._Getal()))

  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>

; 2040 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0005c	33 c0		 xor	 eax, eax
  0005e	88 85 23 ff ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  00064	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00075	83 c4 04	 add	 esp, 4
  00078	50		 push	 eax
  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2041 : 		}

  00081	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1976 : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1975 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1977 : 		_Tidy_init();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1978 : 		assign(_Count, _Ch);

  00059	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00061	51		 push	 ecx
  00062	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1979 : 		}

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1947 : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1946 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1948 : 		_Tidy_init();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1949 : 		assign(_Ptr, _Count);

  00059	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00060	51		 push	 ecx
  00061	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1950 : 		}

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1921 : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1920 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >

; 1922 : 		_Tidy_init();

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1923 : 		}

  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 351  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 353  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 346  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 348  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 331  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 333  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 326  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 327  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 328  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1826 : 		{	// return const reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1827 : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1828 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1821 : 		{	// return reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1822 : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1823 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1816 : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1817 : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1818 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1811 : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1812 : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1813 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all, COMDAT
; _this$ = ecx

; 1806 : 		{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1807 : 		_Get_data()._Swap_all(_Right._Get_data());

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	50		 push	 eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 1808 : 		}

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 1801 : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1802 : 		_Get_data()._Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1803 : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT
; _this$ = ecx

; 1790 : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1791 : 		return (_Get_data()._Myproxy);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data

; 1792 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 1776 : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1777 : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1778 : 		_Orphan_all();

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 1779 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	50		 push	 eax
  00051	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  0005a	83 c4 08	 add	 esp, 8

; 1780 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	50		 push	 eax
  00068	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00071	83 c4 08	 add	 esp, 8

; 1781 : 		_Myproxy() = 0;

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1782 : 		}

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	0f 1f 00	 npad	 3
$LN5@Free_proxy:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  000bc	eb ff ff ff	 DD	 -21			; ffffffebH
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  000c8	5f		 DB	 95			; 0000005fH
  000c9	50		 DB	 80			; 00000050H
  000ca	72		 DB	 114			; 00000072H
  000cb	6f		 DB	 111			; 0000006fH
  000cc	78		 DB	 120			; 00000078H
  000cd	79		 DB	 121			; 00000079H
  000ce	5f		 DB	 95			; 0000005fH
  000cf	61		 DB	 97			; 00000061H
  000d0	6c		 DB	 108			; 0000006cH
  000d1	6c		 DB	 108			; 0000006cH
  000d2	6f		 DB	 111			; 0000006fH
  000d3	63		 DB	 99			; 00000063H
  000d4	61		 DB	 97			; 00000061H
  000d5	74		 DB	 116			; 00000074H
  000d6	6f		 DB	 111			; 0000006fH
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -232						; size = 8
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 1768 : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1769 : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1770 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0003e	6a 01		 push	 1
  00040	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00043	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f0		 mov	 esi, eax
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0005b	89 30		 mov	 DWORD PTR [eax], esi

; 1771 : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0005d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00063	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00068	50		 push	 eax
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	50		 push	 eax
  00074	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1772 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00080	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  0008e	83 c4 04	 add	 esp, 4
  00091	8b f0		 mov	 esi, eax
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0009b	8b 00		 mov	 eax, DWORD PTR [eax]
  0009d	89 30		 mov	 DWORD PTR [eax], esi

; 1773 : 		}

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
  000ce	66 90		 npad	 2
$LN5@Alloc_prox:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  000d8	eb ff ff ff	 DD	 -21			; ffffffebH
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  000e4	5f		 DB	 95			; 0000005fH
  000e5	50		 DB	 80			; 00000050H
  000e6	72		 DB	 114			; 00000072H
  000e7	6f		 DB	 111			; 0000006fH
  000e8	78		 DB	 120			; 00000078H
  000e9	79		 DB	 121			; 00000079H
  000ea	5f		 DB	 95			; 0000005fH
  000eb	61		 DB	 97			; 00000061H
  000ec	6c		 DB	 108			; 0000006cH
  000ed	6c		 DB	 108			; 0000006cH
  000ee	6f		 DB	 111			; 0000006fH
  000ef	63		 DB	 99			; 00000063H
  000f0	61		 DB	 97			; 00000061H
  000f1	74		 DB	 116			; 00000074H
  000f2	6f		 DB	 111			; 0000006fH
  000f3	72		 DB	 114			; 00000072H
  000f4	00		 DB	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1727 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1728 : 		_Free_proxy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 1729 : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1713 : 		{	// default construct allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1712 : 		: _Mypair(_Zero_then_variadic_args_t())

  00042	0f b6 85 23 ff
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  00049	50		 push	 eax
  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1714 : 		_Alloc_proxy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 1715 : 		}

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1640 : 			{	// user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 			}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1635 : 		_Bxty()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1636 : 			{	// user-provided, for fancy pointers
; 1637 : 			}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 1629 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1630 : 		return (_Min_value(_Size, _Mysize - _Off));

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00029	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0002c	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00032	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00038	52		 push	 edx
  00039	8d 45 0c	 lea	 eax, DWORD PTR __Size$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00042	83 c4 08	 add	 esp, 8
  00045	8b 00		 mov	 eax, DWORD PTR [eax]

; 1631 : 		}

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1624 : 		{	// report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1625 : 		_Xout_of_range("invalid string position");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 1626 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 1608 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1609 : 		if (_Mysize < _Off)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00029	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  0002c	73 05		 jae	 SHORT $LN3@Check_offs

; 1610 : 			{
; 1611 : 			_Xran();

  0002e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 1612 : 			}
; 1613 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1603 : 		{	// returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1604 : 		return (_BUF_SIZE <= _Myres);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0002a	72 0c		 jb	 SHORT $LN3@Large_stri
  0002c	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  00036	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00038	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00042	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 1605 : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1592 : 		{	// determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1593 : 		const value_type * _Result = _Bx._Buf;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4
  00029	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 1594 : 		if (_Large_string_engaged())

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00034	0f b6 c0	 movzx	 eax, al
  00037	85 c0		 test	 eax, eax
  00039	74 12		 je	 SHORT $LN2@Myptr

; 1595 : 			{
; 1596 : 			_Result = _Unfancy(_Bx._Ptr);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1597 : 			}
; 1598 : 
; 1599 : 		return (_Result);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1600 : 		}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1581 : 		{	// determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1582 : 		value_type * _Result = _Bx._Buf;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4
  00029	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 1583 : 		if (_Large_string_engaged())

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00034	0f b6 c0	 movzx	 eax, al
  00037	85 c0		 test	 eax, eax
  00039	74 12		 je	 SHORT $LN2@Myptr

; 1584 : 			{
; 1585 : 			_Result = _Unfancy(_Bx._Ptr);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1586 : 			}
; 1587 : 
; 1588 : 		return (_Result);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1589 : 		}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1565 : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1562 : 		: _Bx(),

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 1563 : 		_Mysize(0),

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1564 : 		_Myres(0)

  00066	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00069	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1566 : 		}

  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 955  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 956  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  0001e	83 c8 ff	 or	 eax, -1

; 957  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 01		 push	 1
  00025	6a 01		 push	 1
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 1049 : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1050 : 		_Deallocate(_Ptr, _Count, sizeof(_Ty), alignof(_Ty));

  00023	6a 01		 push	 1
  00025	6a 01		 push	 1
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 1051 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 1038 : 	allocator() _NOEXCEPT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1039 : 		{	// construct default allocator (do nothing)
; 1040 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXIII@Z
_TEXT	SEGMENT
__Ptr_container$1 = -44					; size = 4
__Ptr_ptr$2 = -32					; size = 4
__Ptr_user$3 = -20					; size = 4
__Allocated_size$4 = -8					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
__Align$ = 20						; size = 4
?_Deallocate@std@@YAXPAXIII@Z PROC			; std::_Deallocate, COMDAT

; 143  : 	{	// deallocate storage for _Count elements of size _Sz with alignment _Align

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 144  : 	(void)_Align;
; 145  : 
; 146  : 	if (_Count > static_cast<size_t>(-1) / _Sz)

  0001e	83 c8 ff	 or	 eax, -1
  00021	33 d2		 xor	 edx, edx
  00023	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  00026	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  00029	76 0a		 jbe	 SHORT $LN2@Deallocate

; 147  : 		{
; 148  : 		goto _Invalid_parameter; // TRANSITION, VSO#359498

  0002b	e9 b7 00 00 00	 jmp	 $_Invalid_parameter$18
  00030	e9 b2 00 00 00	 jmp	 $_Invalid_parameter$18
$LN2@Deallocate:

; 149  : 		}
; 150  : 
; 151  : 		{
; 152  : 		size_t _Allocated_size = _Count * _Sz;

  00035	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00038	0f af 45 10	 imul	 eax, DWORD PTR __Sz$[ebp]
  0003c	89 45 f8	 mov	 DWORD PTR __Allocated_size$4[ebp], eax

; 153  : 
; 154  : #if defined(_M_IX86) || defined(_M_X64)
; 155  : 		// Boost the alignment of big allocations to help autovectorization.
; 156  :  #pragma warning(push)
; 157  :  #pragma warning(disable: 4127) // conditional expression is constant
; 158  :  #pragma warning(disable: 6326) // Potential comparison of a constant with another constant
; 159  : 		if (_Allocated_size >= _Big_allocation_threshold)

  0003f	81 7d f8 00 10
	00 00		 cmp	 DWORD PTR __Allocated_size$4[ebp], 4096 ; 00001000H
  00046	0f 82 89 00 00
	00		 jb	 $LN4@Deallocate

; 160  : 			{
; 161  :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 162  : 			if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 163  : 				{	// allocation will use aligned new
; 164  : 				if /* constexpr */ (__STDCPP_DEFAULT_NEW_ALIGNMENT__ * 2 >= _Big_allocation_alignment)
; 165  : 					{	// There are no valid alignments between __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 166  : 						// and _Big_allocation_alignment; the below conditional is dead.
; 167  : 					}
; 168  : 				else
; 169  : 					{
; 170  : 					if (_Align < _Big_allocation_alignment)
; 171  : 						{	// boost alignment
; 172  : 						_Align = _Big_allocation_alignment;
; 173  : 						}
; 174  : 					}
; 175  : 				}
; 176  : 			else
; 177  :  #endif /* _HAS_ALIGNED_NEW */
; 178  : 				{	// allocation will use unaligned new; boost alignment manually
; 179  : 				if (_Allocated_size + _Non_user_size <= _Allocated_size)

  0004c	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  0004f	83 c0 27	 add	 eax, 39			; 00000027H
  00052	3b 45 f8	 cmp	 eax, DWORD PTR __Allocated_size$4[ebp]
  00055	77 0a		 ja	 SHORT $LN5@Deallocate

; 180  : 					{
; 181  : 					goto _Invalid_parameter;

  00057	e9 8b 00 00 00	 jmp	 $_Invalid_parameter$18
  0005c	e9 86 00 00 00	 jmp	 $_Invalid_parameter$18
$LN5@Deallocate:

; 182  : 					}
; 183  : 				_Allocated_size += _Non_user_size;

  00061	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  00064	83 c0 27	 add	 eax, 39			; 00000027H
  00067	89 45 f8	 mov	 DWORD PTR __Allocated_size$4[ebp], eax

; 184  : 
; 185  : 				const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

  0006a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006d	89 45 ec	 mov	 DWORD PTR __Ptr_user$3[ebp], eax

; 186  : 				if ((_Ptr_user & (_Big_allocation_alignment - 1)) != 0)

  00070	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  00073	83 e0 1f	 and	 eax, 31			; 0000001fH
  00076	74 04		 je	 SHORT $LN7@Deallocate

; 187  : 					{
; 188  : 					goto _Invalid_parameter;

  00078	eb 6d		 jmp	 SHORT $_Invalid_parameter$18
  0007a	eb 6b		 jmp	 SHORT $_Invalid_parameter$18
$LN7@Deallocate:

; 189  : 					}
; 190  : 
; 191  : 				const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

  0007c	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  0007f	83 e8 04	 sub	 eax, 4
  00082	89 45 e0	 mov	 DWORD PTR __Ptr_ptr$2[ebp], eax

; 192  : 				const uintptr_t _Ptr_container =
; 193  : 					*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00085	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_ptr$2[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	89 4d d4	 mov	 DWORD PTR __Ptr_container$1[ebp], ecx

; 194  : 
; 195  :   #ifdef _DEBUG
; 196  : 				// If the following asserts, it likely means that we are performing
; 197  : 				// an aligned delete on memory coming from an unaligned allocation.
; 198  : 				if (reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] != _Big_allocation_sentinel)

  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	6b c8 ff	 imul	 ecx, eax, -1
  00095	8b 55 e0	 mov	 edx, DWORD PTR __Ptr_ptr$2[ebp]
  00098	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  0009f	74 04		 je	 SHORT $LN9@Deallocate

; 199  : 					{
; 200  : 					goto _Invalid_parameter;

  000a1	eb 44		 jmp	 SHORT $_Invalid_parameter$18
  000a3	eb 42		 jmp	 SHORT $_Invalid_parameter$18
$LN9@Deallocate:

; 201  : 					}
; 202  :   #endif /* _DEBUG */
; 203  : 
; 204  : 				// Extra paranoia on aligned allocation/deallocation
; 205  : 				if (_Ptr_container >= _Ptr_user)

  000a5	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  000a8	3b 45 ec	 cmp	 eax, DWORD PTR __Ptr_user$3[ebp]
  000ab	72 04		 jb	 SHORT $LN11@Deallocate

; 206  : 					{
; 207  : 					goto _Invalid_parameter;

  000ad	eb 38		 jmp	 SHORT $_Invalid_parameter$18
  000af	eb 36		 jmp	 SHORT $_Invalid_parameter$18
$LN11@Deallocate:

; 208  : 					}
; 209  : 
; 210  :   #ifdef _DEBUG
; 211  : 				if (2 * sizeof(void *) > _Ptr_user - _Ptr_container)

  000b1	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  000b4	2b 45 d4	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  000b7	83 f8 08	 cmp	 eax, 8
  000ba	73 04		 jae	 SHORT $LN13@Deallocate

; 212  :   #else /* _DEBUG */
; 213  : 				if (sizeof(void *) > _Ptr_user - _Ptr_container)
; 214  :   #endif /* _DEBUG */
; 215  : 					{
; 216  : 					goto _Invalid_parameter;

  000bc	eb 29		 jmp	 SHORT $_Invalid_parameter$18
  000be	eb 27		 jmp	 SHORT $_Invalid_parameter$18
$LN13@Deallocate:

; 217  : 					}
; 218  : 
; 219  : 				if (_Ptr_user - _Ptr_container > _Non_user_size)

  000c0	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  000c3	2b 45 d4	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  000c6	83 f8 27	 cmp	 eax, 39			; 00000027H
  000c9	76 04		 jbe	 SHORT $LN15@Deallocate

; 220  : 					{
; 221  : 					goto _Invalid_parameter;

  000cb	eb 1a		 jmp	 SHORT $_Invalid_parameter$18
  000cd	eb 18		 jmp	 SHORT $_Invalid_parameter$18
$LN15@Deallocate:

; 222  : 					}
; 223  : 
; 224  : 				_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000cf	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  000d2	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
$LN4@Deallocate:

; 225  : 				}
; 226  : 			}
; 227  :  #pragma warning(pop)
; 228  : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 229  : 
; 230  :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 231  : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 232  : 			{
; 233  : 			::operator delete(_Ptr, _Allocated_size, align_val_t{_Align});
; 234  : 			}
; 235  : 		else
; 236  :  #endif /* _HAS_ALIGNED_NEW */
; 237  : 			{
; 238  : 			::operator delete(_Ptr, _Allocated_size);

  000d5	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e2	83 c4 08	 add	 esp, 8

; 239  : 			}
; 240  : 		return;

  000e5	eb 2c		 jmp	 SHORT $LN1@Deallocate
$_Invalid_parameter$18:

; 241  : 		}
; 242  : 
; 243  : _Invalid_parameter:
; 244  : 	_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

  000e7	8b f4		 mov	 esi, esp
  000e9	6a 00		 push	 0
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA
  000f0	83 c0 65	 add	 eax, 101		; 00000065H
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00109	83 c4 14	 add	 esp, 20			; 00000014H
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Deallocate:

; 245  : 	}

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0011c	3b ec		 cmp	 ebp, esp
  0011e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
?_Deallocate@std@@YAXPAXIII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 223  : 		{	// cut ties with parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 224  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 225  : 		if (_Myproxy != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 38 00	 cmp	 DWORD PTR [eax], 0
  00048	0f 84 85 00 00
	00		 je	 $LN6@Orphan_me

; 226  : 			{	// adopted, remove self from list
; 227  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  0004e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	83 c1 04	 add	 ecx, 4
  00056	89 4d e0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
$LN2@Orphan_me:

; 228  : 			while (*_Pnext != 0 && *_Pnext != this)

  00059	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0005c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005f	74 17		 je	 SHORT $LN3@Orphan_me
  00061	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	3b 4d ec	 cmp	 ecx, DWORD PTR _this$[ebp]
  00069	74 0d		 je	 SHORT $LN3@Orphan_me

; 229  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  0006b	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	83 c1 04	 add	 ecx, 4
  00073	89 4d e0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  00076	eb e1		 jmp	 SHORT $LN2@Orphan_me
$LN3@Orphan_me:

; 230  : 
; 231  : 			if (*_Pnext == 0)

  00078	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0007b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007e	75 3f		 jne	 SHORT $LN5@Orphan_me

; 232  : 				{
; 233  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

  00080	68 e9 00 00 00	 push	 233			; 000000e9H
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
  0008f	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	8b f4		 mov	 esi, esp
  00099	6a 00		 push	 0
  0009b	68 e9 00 00 00	 push	 233			; 000000e9H
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b5	83 c4 14	 add	 esp, 20			; 00000014H
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Orphan_me:

; 234  : 				}
; 235  : 
; 236  : 			*_Pnext = _Mynextiter;

  000bf	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  000c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c8	89 10		 mov	 DWORD PTR [eax], edx

; 237  : 			_Myproxy = 0;

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN6@Orphan_me:

; 238  : 			}
; 239  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 240  : 		}

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 213  : 		{	// get owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 214  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	75 0c		 jne	 SHORT $LN3@Getcont
  0002b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  00035	eb 0d		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN4@Getcont:
  00044	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 215  : 		}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -60						; size = 4
__Parent_proxy$3 = -48					; size = 4
__Lock$4 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 179  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00021	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 180  : 		if (_Parent == 0)

  00045	83 7d 08 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  00049	75 30		 jne	 SHORT $LN2@Adopt

; 181  : 			{	// no future parent, just disown current parent
; 182  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 183  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	8b f4		 mov	 esi, esp
  0004d	6a 03		 push	 3
  0004f	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 184  : 			_Orphan_me();

  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 185  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 186  : 			}

  00067	8b f4		 mov	 esi, esp
  00069	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 187  : 		else

  00079	eb 5d		 jmp	 SHORT $LN5@Adopt
$LN2@Adopt:

; 188  : 			{	// have a parent, do adoption
; 189  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	89 4d d0	 mov	 DWORD PTR __Parent_proxy$3[ebp], ecx

; 190  : 
; 191  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 192  : 			if (_Myproxy != _Parent_proxy)

  00083	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	3b 4d d0	 cmp	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0008b	74 4b		 je	 SHORT $LN5@Adopt

; 193  : 				{	// change parentage
; 194  : 				_Lockit _Lock(_LOCK_DEBUG);

  0008d	8b f4		 mov	 esi, esp
  0008f	6a 03		 push	 3
  00091	8d 4d c4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 195  : 				_Orphan_me();

  000a1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 196  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  000a9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 4d d0	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 197  : 				_Parent_proxy->_Myfirstiter = this;

  000b5	8b 45 d0	 mov	 eax, DWORD PTR __Parent_proxy$3[ebp]
  000b8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 198  : 				_Myproxy = _Parent_proxy;

  000be	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	8b 4d d0	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  000c4	89 08		 mov	 DWORD PTR [eax], ecx

; 199  : 				}

  000c6	8b f4		 mov	 esi, esp
  000c8	8d 4d c4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Adopt:

; 200  : 
; 201  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 202  : 			_Myproxy = _Parent_proxy;
; 203  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 204  : 			}
; 205  : 		}

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Adopt
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f3	59		 pop	 ecx
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 04 00	 ret	 4
$LN10@Adopt:
  00114	02 00 00 00	 DD	 2
  00118	00 00 00 00	 DD	 $LN9@Adopt
$LN9@Adopt:
  0011c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00120	04 00 00 00	 DD	 4
  00124	00 00 00 00	 DD	 $LN6@Adopt
  00128	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0012c	04 00 00 00	 DD	 4
  00130	00 00 00 00	 DD	 $LN7@Adopt
$LN7@Adopt:
  00134	5f		 DB	 95			; 0000005fH
  00135	4c		 DB	 76			; 0000004cH
  00136	6f		 DB	 111			; 0000006fH
  00137	63		 DB	 99			; 00000063H
  00138	6b		 DB	 107			; 0000006bH
  00139	00		 DB	 0
$LN6@Adopt:
  0013a	5f		 DB	 95			; 0000005fH
  0013b	4c		 DB	 76			; 0000004cH
  0013c	6f		 DB	 111			; 0000006fH
  0013d	63		 DB	 99			; 00000063H
  0013e	6b		 DB	 107			; 0000006bH
  0013f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 171  : 		{	// destroy the iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 172  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 173  : 		_Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 174  : 		_Orphan_me();

  00059	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 175  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 176  : 		}

  00061	8b f4		 mov	 esi, esp
  00063	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	52		 push	 edx
  00074	8b cd		 mov	 ecx, ebp
  00076	50		 push	 eax
  00077	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Iterator_b
  0007d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00082	58		 pop	 eax
  00083	5a		 pop	 edx
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
  000ad	0f 1f 00	 npad	 3
$LN6@Iterator_b:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN5@Iterator_b
$LN5@Iterator_b:
  000b8	dc ff ff ff	 DD	 -36			; ffffffdcH
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN3@Iterator_b
$LN3@Iterator_b:
  000c4	5f		 DB	 95			; 0000005fH
  000c5	4c		 DB	 76			; 0000004cH
  000c6	6f		 DB	 111			; 0000006fH
  000c7	63		 DB	 99			; 00000063H
  000c8	6b		 DB	 107			; 0000006bH
  000c9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 144  : 		{	// construct orphaned iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 		: _Myproxy(0), _Mynextiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 145  : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -48						; size = 4
__Lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 263  : 	{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 264  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 265  : 	_Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 266  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 267  : 
; 268  : 	_Container_proxy *_Temp = _Myproxy;

  00059	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	89 4d d0	 mov	 DWORD PTR __Temp$[ebp], ecx

; 269  : 	_Myproxy = _Right._Myproxy;

  00061	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00067	8b 11		 mov	 edx, DWORD PTR [ecx]
  00069	89 10		 mov	 DWORD PTR [eax], edx

; 270  : 	_Right._Myproxy = _Temp;

  0006b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0006e	8b 4d d0	 mov	 ecx, DWORD PTR __Temp$[ebp]
  00071	89 08		 mov	 DWORD PTR [eax], ecx

; 271  : 
; 272  : 	if (_Myproxy != 0)

  00073	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00076	83 38 00	 cmp	 DWORD PTR [eax], 0
  00079	74 0a		 je	 SHORT $LN2@Swap_all

; 273  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  0007b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 11		 mov	 DWORD PTR [ecx], edx
$LN2@Swap_all:

; 274  : 	if (_Right._Myproxy != 0)

  00085	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00088	83 38 00	 cmp	 DWORD PTR [eax], 0
  0008b	74 0a		 je	 SHORT $LN3@Swap_all

; 275  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  0008d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00095	89 11		 mov	 DWORD PTR [ecx], edx
$LN3@Swap_all:

; 276  : 	}

  00097	8b f4		 mov	 esi, esp
  00099	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	52		 push	 edx
  000aa	8b cd		 mov	 ecx, ebp
  000ac	50		 push	 eax
  000ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Swap_all
  000b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b8	58		 pop	 eax
  000b9	5a		 pop	 edx
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	33 cd		 xor	 ecx, ebp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c2 04 00	 ret	 4
  000e5	0f 1f 00	 npad	 3
$LN8@Swap_all:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN7@Swap_all
$LN7@Swap_all:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN5@Swap_all
$LN5@Swap_all:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	4c		 DB	 76			; 0000004cH
  000fe	6f		 DB	 111			; 0000006fH
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -48						; size = 4
__Lock$3 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 248  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 249  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 250  : 	if (_Myproxy != 0)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004b	74 61		 je	 SHORT $LN6@Orphan_all

; 251  : 		{	// proxy allocated, drain it
; 252  : 		_Lockit _Lock(_LOCK_DEBUG);

  0004d	8b f4		 mov	 esi, esp
  0004f	6a 03		 push	 3
  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 253  : 
; 254  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00061	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	83 c1 04	 add	 ecx, 4
  00069	89 4d d0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  0006c	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 255  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

  0006e	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 55 d0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00076	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00079	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007b	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0007e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00081	74 0d		 je	 SHORT $LN3@Orphan_all

; 256  : 			(*_Pnext)->_Myproxy = 0;

  00083	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0008e	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 257  : 		_Myproxy->_Myfirstiter = 0;

  00090	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 258  : 		}

  0009c	8b f4		 mov	 esi, esp
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Orphan_all:

; 259  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 260  : 	}

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Orphan_all
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN10@Orphan_all:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN9@Orphan_all
$LN9@Orphan_all:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN7@Orphan_all
$LN7@Orphan_all:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	4c		 DB	 76			; 0000004cH
  000fe	6f		 DB	 111			; 0000006fH
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 124  : 		{	// destroy the container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 125  : 		_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 126  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 110  : 		{	// construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		: _Myproxy(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 111  : 		}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 98   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 97   : 		: _Mycont(0), _Myfirstiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 99   : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 476  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 477  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 478  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
tv68 = -200						; size = 4
tv69 = -196						; size = 4
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 471  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 472  : 		return (_Meta != eof() ? _Meta : !eof());

  0001e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00026	39 01		 cmp	 DWORD PTR [ecx], eax
  00028	74 0d		 je	 SHORT $LN5@not_eof
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  00035	eb 2b		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  00037	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003c	85 c0		 test	 eax, eax
  0003e	75 0c		 jne	 SHORT $LN3@not_eof
  00040	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv68[ebp], 1
  0004a	eb 0a		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  0004c	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
$LN4@not_eof:
  00056	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv68[ebp]
  0005c	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], ecx
$LN6@not_eof:
  00062	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 473  : 		}

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 466  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 467  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002a	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00034	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00036	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00040	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 468  : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 461  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 462  : 		return (static_cast<unsigned char>(_Ch));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00021	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 463  : 		}

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 456  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 457  : 		return (static_cast<char>(_Meta));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00021	8a 00		 mov	 al, BYTE PTR [eax]

; 458  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
tv67 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 446  : 		{	// test for element equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 447  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00024	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00027	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0002a	3b c8		 cmp	 ecx, eax
  0002c	75 0c		 jne	 SHORT $LN3@eq
  0002e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  00038	eb 0a		 jmp	 SHORT $LN4@eq
$LN3@eq:
  0003a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN4@eq:
  00044	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv67[ebp]

; 448  : 		}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 441  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 442  : 		_Left = _Right;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	88 10		 mov	 BYTE PTR [eax], dl

; 443  : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADQADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADQADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 436  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 437  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	0f be 4d 10	 movsx	 ecx, BYTE PTR __Ch$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 438  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADQADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 430  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 431  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 410  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 411  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 404  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 405  : 		return (_CSTD strlen(_First));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _strlen
  00027	83 c4 04	 add	 esp, 4

; 406  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 178  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 179  :         (void)_Size;
; 180  :         return _Where;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 181  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 682  : 		{	// return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 683  : 		return (INT_MAX);

  0001e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 684  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 0c		 push	 12			; 0000000cH
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 88   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :         return _Data._What ? _Data._What : "Unknown exception";

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0002a	74 0e		 je	 SHORT $LN3@what
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], edx
  00038	eb 0a		 jmp	 SHORT $LN4@what
$LN3@what:
  0003a	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
$LN4@what:
  00044	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 90   :     }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 83   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 84   :         __std_exception_destroy(&_Data);

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c0 04	 add	 eax, 4
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ___std_exception_destroy
  00038	83 c4 04	 add	 esp, 4

; 85   :     }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  0002c	33 c0		 xor	 eax, eax
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 04	 add	 ecx, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	83 c0 04	 add	 eax, 4
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_copy
  0004c	83 c4 08	 add	 esp, 8

; 68   :     }

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 60   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 59   :         : _Data()

  0002c	33 c0		 xor	 eax, eax
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 04	 add	 ecx, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 61   :         _Data._What = _Message;

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0003f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 62   :     }

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_memcpy_s.h
;	COMDAT _memcpy_s
_TEXT	SEGMENT
tv79 = -232						; size = 4
tv75 = -232						; size = 4
tv66 = -232						; size = 4
__Expr_val$1 = -32					; size = 4
__Expr_val$2 = -20					; size = 4
__Expr_val$3 = -8					; size = 4
__Destination$ = 8					; size = 4
__DestinationSize$ = 12					; size = 4
__Source$ = 16						; size = 4
__SourceSize$ = 20					; size = 4
_memcpy_s PROC						; COMDAT

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 42   :         if (_SourceSize == 0)

  0001e	83 7d 14 00	 cmp	 DWORD PTR __SourceSize$[ebp], 0
  00022	75 07		 jne	 SHORT $LN2@memcpy_s

; 43   :         {
; 44   :             return 0;

  00024	33 c0		 xor	 eax, eax
  00026	e9 48 01 00 00	 jmp	 $LN1@memcpy_s
$LN2@memcpy_s:

; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0002b	83 7d 08 00	 cmp	 DWORD PTR __Destination$[ebp], 0
  0002f	74 0c		 je	 SHORT $LN9@memcpy_s
  00031	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN10@memcpy_s
$LN9@memcpy_s:
  0003d	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN10@memcpy_s:
  00047	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]
  0004d	89 45 f8	 mov	 DWORD PTR __Expr_val$3[ebp], eax
  00050	83 7d f8 00	 cmp	 DWORD PTR __Expr_val$3[ebp], 0
  00054	75 2e		 jne	 SHORT $LN3@memcpy_s
  00056	8b f4		 mov	 esi, esp
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  0006b	8b f4		 mov	 esi, esp
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007f	e9 ef 00 00 00	 jmp	 $LN1@memcpy_s
$LN3@memcpy_s:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00084	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  00088	74 0c		 je	 SHORT $LN5@memcpy_s
  0008a	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  0008d	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  00090	0f 83 c7 00 00
	00		 jae	 $LN4@memcpy_s
$LN5@memcpy_s:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  00096	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  00099	50		 push	 eax
  0009a	6a 00		 push	 0
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __Destination$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 _memset
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  000a8	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  000ac	74 0c		 je	 SHORT $LN11@memcpy_s
  000ae	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv75[ebp], 1
  000b8	eb 0a		 jmp	 SHORT $LN12@memcpy_s
$LN11@memcpy_s:
  000ba	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN12@memcpy_s:
  000c4	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv75[ebp]
  000ca	89 45 ec	 mov	 DWORD PTR __Expr_val$2[ebp], eax
  000cd	83 7d ec 00	 cmp	 DWORD PTR __Expr_val$2[ebp], 0
  000d1	75 2b		 jne	 SHORT $LN6@memcpy_s
  000d3	8b f4		 mov	 esi, esp
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  000e8	8b f4		 mov	 esi, esp
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  000f0	3b f4		 cmp	 esi, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  000fc	eb 75		 jmp	 SHORT $LN1@memcpy_s
$LN6@memcpy_s:

; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000fe	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  00101	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  00104	72 0c		 jb	 SHORT $LN13@memcpy_s
  00106	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv79[ebp], 1
  00110	eb 0a		 jmp	 SHORT $LN14@memcpy_s
$LN13@memcpy_s:
  00112	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN14@memcpy_s:
  0011c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv79[ebp]
  00122	89 4d e0	 mov	 DWORD PTR __Expr_val$1[ebp], ecx
  00125	83 7d e0 00	 cmp	 DWORD PTR __Expr_val$1[ebp], 0
  00129	75 2b		 jne	 SHORT $LN7@memcpy_s
  0012b	8b f4		 mov	 esi, esp
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00133	3b f4		 cmp	 esi, esp
  00135	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013a	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  00140	8b f4		 mov	 esi, esp
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  00148	3b f4		 cmp	 esi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  00154	eb 1d		 jmp	 SHORT $LN1@memcpy_s
$LN7@memcpy_s:

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;

  00156	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0015b	eb 16		 jmp	 SHORT $LN1@memcpy_s
$LN4@memcpy_s:

; 57   :         }
; 58   : 
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  0015d	8b 45 14	 mov	 eax, DWORD PTR __SourceSize$[ebp]
  00160	50		 push	 eax
  00161	8b 4d 10	 mov	 ecx, DWORD PTR __Source$[ebp]
  00164	51		 push	 ecx
  00165	8b 55 08	 mov	 edx, DWORD PTR __Destination$[ebp]
  00168	52		 push	 edx
  00169	e8 00 00 00 00	 call	 _memcpy
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   :         return 0;

  00171	33 c0		 xor	 eax, eax
$LN1@memcpy_s:

; 61   :     }

  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0017c	3b ec		 cmp	 ebp, esp
  0017e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
_memcpy_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\fileutils\fileutils.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\fileutils\fileutils.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
