; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Repos\Galaxy\Galaxy\Engine\OGLBuffers\VertexArray.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Deallocate@std@@YAXPAXIII@Z			; std::_Deallocate
PUBLIC	?deallocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEXQAUBufferElement@Graphics@Engine@@I@Z ; std::allocator<Engine::Graphics::BufferElement>::deallocate
PUBLIC	?allocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEPAUBufferElement@Graphics@Engine@@I@Z ; std::allocator<Engine::Graphics::BufferElement>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SAIABV?$allocator@UBufferElement@Graphics@Engine@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SA?AV?$allocator@UBufferElement@Graphics@Engine@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::select_on_container_copy_construction
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::~_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >::~_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::~_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>
PUBLIC	??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::~vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	?size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::size
PUBLIC	?max_size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::max_size
PUBLIC	?capacity@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::capacity
PUBLIC	??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::operator[]
PUBLIC	?_Destroy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXPAUBufferElement@Graphics@Engine@@0@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Destroy
PUBLIC	?_Buy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAE_NI@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Buy
PUBLIC	?_Tidy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Tidy
PUBLIC	?_Xlength@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@CAXXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Xlength
PUBLIC	?__autoclassinit2@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEXI@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::__autoclassinit2
PUBLIC	?getElements@VertexBufferLayout@Graphics@Engine@@QAEAAV?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@XZ ; Engine::Graphics::VertexBufferLayout::getElements
PUBLIC	?getStride@VertexBufferLayout@Graphics@Engine@@QAEIXZ ; Engine::Graphics::VertexBufferLayout::getStride
PUBLIC	??1VertexBufferLayout@Graphics@Engine@@QAE@XZ	; Engine::Graphics::VertexBufferLayout::~VertexBufferLayout
PUBLIC	??0VertexArray@Graphics@Engine@@QAE@XZ		; Engine::Graphics::VertexArray::VertexArray
PUBLIC	??1VertexArray@Graphics@Engine@@QAE@XZ		; Engine::Graphics::VertexArray::~VertexArray
PUBLIC	?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z ; Engine::Graphics::VertexArray::addBuffer
PUBLIC	?bind@VertexArray@Graphics@Engine@@QAEXXZ	; Engine::Graphics::VertexArray::bind
PUBLIC	?unbind@VertexArray@Graphics@Engine@@QAEXXZ	; Engine::Graphics::VertexArray::unbind
PUBLIC	??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > ><std::allocator<Engine::Graphics::BufferElement>,void>
PUBLIC	??$_Ucopy@PAUBufferElement@Graphics@Engine@@@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEPAUBufferElement@Graphics@Engine@@PAU234@00@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Ucopy<Engine::Graphics::BufferElement *>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0UBufferElement@Graphics@Engine@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Engine::Graphics::BufferElement>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Destroy_range@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z ; std::_Destroy_range<std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
PUBLIC	??$forward@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YA$$QAV?$allocator@UBufferElement@Graphics@Engine@@@0@AAV10@@Z ; std::forward<std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@$$V@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1><std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	??$_Uninitialized_copy@PAUBufferElement@Graphics@Engine@@PAU123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z ; std::_Uninitialized_copy<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *,std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	??$_Destroy_range1@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
PUBLIC	?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ; std::_Default_allocate_traits<1>::_Get_bytes
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> > >
PUBLIC	??$_Unchecked@PAUBufferElement@Graphics@Engine@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@@Z ; std::_Unchecked<Engine::Graphics::BufferElement *>
PUBLIC	??$_Ptr_copy_cat@UBufferElement@Graphics@Engine@@U123@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUBufferElement@Graphics@Engine@@0@Z ; std::_Ptr_copy_cat<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement>
PUBLIC	??$_Uninitialized_copy_al_unchecked@UBufferElement@Graphics@Engine@@U123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
PUBLIC	??$_Rechecked@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAAAPAUBufferElement@Graphics@Engine@@AAPAU123@PAU123@@Z ; std::_Rechecked<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Copy_memmove@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00@Z ; std::_Copy_memmove<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>
PUBLIC	?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA ; `std::_Deallocate'::`1'::__LINE__Var
PUBLIC	??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1PO@LCGMAEHG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAg?$AAi?$AAn?$AAe?$AA?3?$AA?3?$AAG?$AAr?$AAa?$AAp?$AAh@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@	; `string'
PUBLIC	??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	_memmove:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	___glewEnableVertexAttribArray:DWORD
EXTRN	___glewVertexAttribPointer:DWORD
EXTRN	___glewBindVertexArray:DWORD
EXTRN	___glewDeleteVertexArrays:DWORD
EXTRN	___glewGenVertexArrays:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@
CONST	SEGMENT
??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, '_'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, '<', 00H, '1', 00H, '>', 00H, ':', 00H
	DB	':', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H, '_', 00H, 'b'
	DB	00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p'
	DB	00H, 't', 00H, 'r', 00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@
CONST	SEGMENT
??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@ DB '_Ptr != nullptr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1PO@LCGMAEHG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAg?$AAi?$AAn?$AAe?$AA?3?$AA?3?$AAG?$AAr?$AAa?$AAp?$AAh@
CONST	SEGMENT
??_C@_1PO@LCGMAEHG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAg?$AAi?$AAn?$AAe?$AA?3?$AA?3?$AAG?$AAr?$AAa?$AAp?$AAh@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'E', 00H
	DB	'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ':', 00H, ':'
	DB	00H, 'G', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 'h', 00H, 'i', 00H
	DB	'c', 00H, 's', 00H, ':', 00H, ':', 00H, 'B', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, 'E', 00H, 'l', 00H, 'e', 00H
	DB	'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 'E', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'G', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 'h'
	DB	00H, 'i', 00H, 'c', 00H, 's', 00H, ':', 00H, ':', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'E', 00H, 'l'
	DB	00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'[', 00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA DD 08fH ; `std::_Deallocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z$1
__ehfuncinfo$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1VertexArray@Graphics@Engine@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Copy_memmove@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00@Z
_TEXT	SEGMENT
__Count$ = -44						; size = 4
__Dest_ch$ = -32					; size = 4
__Last_ch$ = -20					; size = 4
__First_ch$ = -8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00@Z PROC ; std::_Copy_memmove<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>, COMDAT

; 2375 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2376 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR __First_ch$[ebp], eax

; 2377 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

  00024	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00027	89 45 ec	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 2378 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

  0002a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002d	89 45 e0	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 2379 : 	const size_t _Count = _Last_ch - _First_ch;

  00030	8b 45 ec	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  00033	2b 45 f8	 sub	 eax, DWORD PTR __First_ch$[ebp]
  00036	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax

; 2380 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00039	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR __First_ch$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 e0	 mov	 edx, DWORD PTR __Dest_ch$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 _memmove
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2381 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0004d	8b 45 e0	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00050	03 45 d4	 add	 eax, DWORD PTR __Count$[ebp]

; 2382 : 	}

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??$_Copy_memmove@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00@Z ENDP ; std::_Copy_memmove<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Rechecked@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAAAPAUBufferElement@Graphics@Engine@@AAPAU123@PAU123@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAAAPAUBufferElement@Graphics@Engine@@AAPAU123@PAU123@@Z PROC ; std::_Rechecked<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>, COMDAT

; 489  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 490  : 	_Dest = _Src;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00024	89 08		 mov	 DWORD PTR [eax], ecx

; 491  : 	return (_Dest);

  00026	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]

; 492  : 	}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Rechecked@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAAAPAUBufferElement@Graphics@Engine@@AAPAU123@PAU123@@Z ENDP ; std::_Rechecked<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@UBufferElement@Graphics@Engine@@U123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@UBufferElement@Graphics@Engine@@U123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >, COMDAT

; 108  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 109  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00@Z ; std::_Copy_memmove<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 110  : 	}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@UBufferElement@Graphics@Engine@@U123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Ptr_copy_cat@UBufferElement@Graphics@Engine@@U123@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUBufferElement@Graphics@Engine@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_copy_cat@UBufferElement@Graphics@Engine@@U123@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUBufferElement@Graphics@Engine@@0@Z PROC ; std::_Ptr_copy_cat<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement>, COMDAT

; 946  : 	{	// return pointer copy optimization category for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 947  : 	return {};

  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 948  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Ptr_copy_cat@UBufferElement@Graphics@Engine@@U123@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUBufferElement@Graphics@Engine@@0@Z ENDP ; std::_Ptr_copy_cat<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Unchecked@PAUBufferElement@Graphics@Engine@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUBufferElement@Graphics@Engine@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@@Z PROC ; std::_Unchecked<Engine::Graphics::BufferElement *>, COMDAT

; 458  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 459  : 	return (_Src);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 460  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unchecked@PAUBufferElement@Graphics@Engine@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@@Z ENDP ; std::_Unchecked<Engine::Graphics::BufferElement *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> > >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 08		 push	 8
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00049	89 11		 mov	 DWORD PTR [ecx], edx
  0004b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Bytes$ = 8						; size = 4
__Align$ = 12						; size = 4
?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z PROC ; std::_Default_allocate_traits<1>::_Get_bytes, COMDAT

; 55   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 56   : 		(void)_Align;
; 57   : 
; 58   : 		void * _Ptr = nullptr;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 59   :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 60   : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 61   : 			{
; 62   : 			_Ptr = ::operator new(_Bytes, align_val_t{_Align});
; 63   : 			}
; 64   : 		else
; 65   :  #endif /* _HAS_ALIGNED_NEW */
; 66   : 			{
; 67   : 			_Ptr = ::operator new(_Bytes);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 68   : 			}
; 69   : 
; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != nullptr);

  00034	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00038	75 5f		 jne	 SHORT $LN2@Get_bytes
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@
  0003f	85 c0		 test	 eax, eax
  00041	74 04		 je	 SHORT $LN4@Get_bytes
  00043	33 c9		 xor	 ecx, ecx
  00045	75 2d		 jne	 SHORT $LN5@Get_bytes
$LN4@Get_bytes:
  00047	8b f4		 mov	 esi, esp
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00053	6a 00		 push	 0
  00055	6a 46		 push	 70			; 00000046H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005c	6a 02		 push	 2
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00064	83 c4 18	 add	 esp, 24			; 00000018H
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	83 f8 01	 cmp	 eax, 1
  00071	75 01		 jne	 SHORT $LN5@Get_bytes
  00073	cc		 int	 3
$LN5@Get_bytes:
  00074	8b f4		 mov	 esi, esp
  00076	6a 00		 push	 0
  00078	6a 46		 push	 70			; 00000046H
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Get_bytes:

; 71   : 		return (_Ptr);

  00099	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 72   : 		}

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ENDP ; std::_Default_allocate_traits<1>::_Get_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ
_TEXT	SEGMENT
?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ PROC	; std::_Default_allocate_traits<1>::_Fail, COMDAT

; 50   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 51   : 		_Xbad_alloc();

  0001e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Fail:

; 52   : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ENDP	; std::_Default_allocate_traits<1>::_Fail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<Engine::Graphics::BufferElement> >, COMDAT

; 1200 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1201 : 		// nothing to do
; 1202 : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Destroy_range1@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUBufferElement@Graphics@Engine@@PAU123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z
_TEXT	SEGMENT
$T1 = -249						; size = 1
$T2 = -237						; size = 1
__UDest$ = -36						; size = 4
__ULast$ = -24						; size = 4
__UFirst$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUBufferElement@Graphics@Engine@@PAU123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z PROC ; std::_Uninitialized_copy<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *,std::allocator<Engine::Graphics::BufferElement> >, COMDAT

; 116  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00012	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 117  : 		// note: only called internally from elsewhere in the STL, debug checks
; 118  : 		// and deprecation warnings omitted
; 119  : 	const auto _UFirst = _Unchecked(_First);

  00028	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Unchecked@PAUBufferElement@Graphics@Engine@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@@Z ; std::_Unchecked<Engine::Graphics::BufferElement *>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f4	 mov	 DWORD PTR __UFirst$[ebp], eax

; 120  : 	const auto _ULast = _Unchecked(_Last);

  00037	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??$_Unchecked@PAUBufferElement@Graphics@Engine@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@@Z ; std::_Unchecked<Engine::Graphics::BufferElement *>
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR __ULast$[ebp], eax

; 121  : 	const auto _UDest = _Unchecked(_Dest);

  00046	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??$_Unchecked@PAUBufferElement@Graphics@Engine@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@@Z ; std::_Unchecked<Engine::Graphics::BufferElement *>
  0004f	83 c4 04	 add	 esp, 4
  00052	89 45 dc	 mov	 DWORD PTR __UDest$[ebp], eax

; 122  : 	return (_Rechecked(_Dest,

  00055	0f b6 85 13 ff
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d dc	 lea	 ecx, DWORD PTR __UDest$[ebp]
  00060	51		 push	 ecx
  00061	8d 55 f4	 lea	 edx, DWORD PTR __UFirst$[ebp]
  00064	52		 push	 edx
  00065	8d 85 07 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@UBufferElement@Graphics@Engine@@U123@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUBufferElement@Graphics@Engine@@0@Z ; std::_Ptr_copy_cat<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement>
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	8a 08		 mov	 cl, BYTE PTR [eax]
  00076	0f b6 d1	 movzx	 edx, cl
  00079	52		 push	 edx
  0007a	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d dc	 mov	 ecx, DWORD PTR __UDest$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 e8	 mov	 edx, DWORD PTR __ULast$[ebp]
  00085	52		 push	 edx
  00086	8b 45 f4	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_al_unchecked@UBufferElement@Graphics@Engine@@U123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<Engine::Graphics::BufferElement,Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
  0008f	83 c4 18	 add	 esp, 24			; 00000018H
  00092	50		 push	 eax
  00093	8d 4d 10	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ??$_Rechecked@PAUBufferElement@Graphics@Engine@@PAU123@@std@@YAAAPAUBufferElement@Graphics@Engine@@AAPAU123@PAU123@@Z ; std::_Rechecked<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *>
  0009c	83 c4 08	 add	 esp, 8
  0009f	8b 00		 mov	 eax, DWORD PTR [eax]

; 123  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 124  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 125  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>())));
; 126  : 	}

  000a1	52		 push	 edx
  000a2	8b cd		 mov	 ecx, ebp
  000a4	50		 push	 eax
  000a5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Uninitiali
  000ab	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b0	58		 pop	 eax
  000b1	5a		 pop	 edx
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b8	33 cd		 xor	 ecx, ebp
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN6@Uninitiali:
  000d0	02 00 00 00	 DD	 2
  000d4	00 00 00 00	 DD	 $LN5@Uninitiali
$LN5@Uninitiali:
  000d8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000dc	04 00 00 00	 DD	 4
  000e0	00 00 00 00	 DD	 $LN3@Uninitiali
  000e4	dc ff ff ff	 DD	 -36			; ffffffdcH
  000e8	04 00 00 00	 DD	 4
  000ec	00 00 00 00	 DD	 $LN4@Uninitiali
$LN4@Uninitiali:
  000f0	5f		 DB	 95			; 0000005fH
  000f1	55		 DB	 85			; 00000055H
  000f2	44		 DB	 68			; 00000044H
  000f3	65		 DB	 101			; 00000065H
  000f4	73		 DB	 115			; 00000073H
  000f5	74		 DB	 116			; 00000074H
  000f6	00		 DB	 0
$LN3@Uninitiali:
  000f7	5f		 DB	 95			; 0000005fH
  000f8	55		 DB	 85			; 00000055H
  000f9	46		 DB	 70			; 00000046H
  000fa	69		 DB	 105			; 00000069H
  000fb	72		 DB	 114			; 00000072H
  000fc	73		 DB	 115			; 00000073H
  000fd	74		 DB	 116			; 00000074H
  000fe	00		 DB	 0
??$_Uninitialized_copy@PAUBufferElement@Graphics@Engine@@PAU123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z ENDP ; std::_Uninitialized_copy<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *,std::allocator<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@$$V@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@$$V@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1><std::allocator<Engine::Graphics::BufferElement> >, COMDAT
; _this$ = ecx

; 319  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YA$$QAV?$allocator@UBufferElement@Graphics@Engine@@@0@AAV10@@Z ; std::forward<std::allocator<Engine::Graphics::BufferElement> >
  0002c	83 c4 04	 add	 esp, 4

; 320  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >

; 321  : 		{	// construct from forwarded values
; 322  : 		}

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@$$V@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1><std::allocator<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YA$$QAV?$allocator@UBufferElement@Graphics@Engine@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YA$$QAV?$allocator@UBufferElement@Graphics@Engine@@@0@AAV10@@Z PROC ; std::forward<std::allocator<Engine::Graphics::BufferElement> >, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YA$$QAV?$allocator@UBufferElement@Graphics@Engine@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z
_TEXT	SEGMENT
__Ptr$1 = -44						; size = 4
__Ptr_container$2 = -32					; size = 4
__Block_size$3 = -20					; size = 4
__User_size$ = -8					; size = 4
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Align$ = 16						; size = 4
??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z PROC ; std::_Allocate<std::_Default_allocate_traits<1> >, COMDAT

; 77   : 	{	// allocate storage for _Count elements of size _Sz with alignment _Align

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 78   : 	if (_Count == 0)

  0001e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00022	75 07		 jne	 SHORT $LN2@Allocate

; 79   : 		{
; 80   : 		return (nullptr);

  00024	33 c0		 xor	 eax, eax
  00026	e9 04 01 00 00	 jmp	 $LN7@Allocate
$LN2@Allocate:

; 81   : 		}
; 82   : 
; 83   : 	// check overflow of multiply
; 84   : 	if (static_cast<size_t>(-1) / _Sz < _Count)

  0002b	83 c8 ff	 or	 eax, -1
  0002e	33 d2		 xor	 edx, edx
  00030	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00033	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00036	73 05		 jae	 SHORT $LN3@Allocate

; 85   : 		{
; 86   : 		_Traits::_Fail();	// report no memory

  00038	e8 00 00 00 00	 call	 ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
$LN3@Allocate:

; 87   : 		}
; 88   : 
; 89   : 	const size_t _User_size = _Count * _Sz;

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00040	0f af 45 0c	 imul	 eax, DWORD PTR __Sz$[ebp]
  00044	89 45 f8	 mov	 DWORD PTR __User_size$[ebp], eax

; 90   : 
; 91   : #if defined(_M_IX86) || defined(_M_X64)
; 92   : 	// Boost the alignment of big allocations to help autovectorization.
; 93   :  #pragma warning(push)
; 94   :  #pragma warning(disable: 4127) // conditional expression is constant
; 95   :  #pragma warning(disable: 6326) // Potential comparison of a constant with another constant
; 96   : 	if (_Traits::_Try_aligned_allocation && _User_size >= _Big_allocation_threshold)

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 cb 00 00
	00		 je	 $LN4@Allocate
  00054	81 7d f8 00 10
	00 00		 cmp	 DWORD PTR __User_size$[ebp], 4096 ; 00001000H
  0005b	0f 82 be 00 00
	00		 jb	 $LN4@Allocate

; 97   : 		{
; 98   :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 99   : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 100  : 			{	// allocation will use aligned new
; 101  : 			if /* constexpr */ (__STDCPP_DEFAULT_NEW_ALIGNMENT__ * 2 >= _Big_allocation_alignment)
; 102  : 				{	// There are no valid alignments between __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 103  : 					// and _Big_allocation_alignment; the below conditional is dead.
; 104  : 				}
; 105  : 			else
; 106  : 				{
; 107  : 				if (_Align < _Big_allocation_alignment)
; 108  : 					{	// boost alignment
; 109  : 					_Align = _Big_allocation_alignment;
; 110  : 					}
; 111  : 				}
; 112  : 			}
; 113  : 		else
; 114  :  #endif /* _HAS_ALIGNED_NEW */
; 115  : 			{	// allocation will use unaligned new; boost alignment manually
; 116  : 			const size_t _Block_size = _Non_user_size + _User_size;

  00061	8b 45 f8	 mov	 eax, DWORD PTR __User_size$[ebp]
  00064	83 c0 27	 add	 eax, 39			; 00000027H
  00067	89 45 ec	 mov	 DWORD PTR __Block_size$3[ebp], eax

; 117  : 			if (_Block_size <= _User_size)

  0006a	8b 45 ec	 mov	 eax, DWORD PTR __Block_size$3[ebp]
  0006d	3b 45 f8	 cmp	 eax, DWORD PTR __User_size$[ebp]
  00070	77 05		 ja	 SHORT $LN5@Allocate

; 118  : 				{
; 119  : 				_Traits::_Fail();	// report no memory

  00072	e8 00 00 00 00	 call	 ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
$LN5@Allocate:

; 120  : 				}
; 121  : 
; 122  : 			const uintptr_t _Ptr_container =
; 123  : 				reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00077	8b 45 ec	 mov	 eax, DWORD PTR __Block_size$3[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00080	83 c4 04	 add	 esp, 4
  00083	89 45 e0	 mov	 DWORD PTR __Ptr_container$2[ebp], eax

; 124  : 			_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00086	83 7d e0 00	 cmp	 DWORD PTR __Ptr_container$2[ebp], 0
  0008a	75 5f		 jne	 SHORT $LN6@Allocate
  0008c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
  00091	85 c0		 test	 eax, eax
  00093	74 04		 je	 SHORT $LN8@Allocate
  00095	33 c9		 xor	 ecx, ecx
  00097	75 2d		 jne	 SHORT $LN9@Allocate
$LN8@Allocate:
  00099	8b f4		 mov	 esi, esp
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  000a5	6a 00		 push	 0
  000a7	6a 7c		 push	 124			; 0000007cH
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000ae	6a 02		 push	 2
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000b6	83 c4 18	 add	 esp, 24			; 00000018H
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	83 f8 01	 cmp	 eax, 1
  000c3	75 01		 jne	 SHORT $LN9@Allocate
  000c5	cc		 int	 3
$LN9@Allocate:
  000c6	8b f4		 mov	 esi, esp
  000c8	6a 00		 push	 0
  000ca	6a 7c		 push	 124			; 0000007cH
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000e1	83 c4 14	 add	 esp, 20			; 00000014H
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Allocate:

; 125  : 			void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 126  : 				& ~(_Big_allocation_alignment - 1));

  000eb	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$2[ebp]
  000ee	83 c0 27	 add	 eax, 39			; 00000027H
  000f1	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000f4	89 45 d4	 mov	 DWORD PTR __Ptr$1[ebp], eax

; 127  : 			static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000f7	b8 04 00 00 00	 mov	 eax, 4
  000fc	6b c8 ff	 imul	 ecx, eax, -1
  000ff	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$1[ebp]
  00102	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$2[ebp]
  00105	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 128  : 
; 129  :  #ifdef _DEBUG
; 130  : 			static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	6b c8 fe	 imul	 ecx, eax, -2
  00110	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$1[ebp]
  00113	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 131  :  #endif /* _DEBUG */
; 132  : 			return (_Ptr);

  0011a	8b 45 d4	 mov	 eax, DWORD PTR __Ptr$1[ebp]
  0011d	eb 10		 jmp	 SHORT $LN7@Allocate
$LN4@Allocate:

; 133  : 			}
; 134  : 		}
; 135  :  #pragma warning(pop)
; 136  : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	return (_Traits::_Get_bytes(_User_size, _Align));

  0011f	8b 45 10	 mov	 eax, DWORD PTR __Align$[ebp]
  00122	50		 push	 eax
  00123	8b 4d f8	 mov	 ecx, DWORD PTR __User_size$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ; std::_Default_allocate_traits<1>::_Get_bytes
  0012c	83 c4 08	 add	 esp, 8
$LN7@Allocate:

; 139  : 	}

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ENDP ; std::_Allocate<std::_Default_allocate_traits<1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 23   : 	return (_Right < _Left ? _Right : _Left);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 0b		 jae	 SHORT $LN3@Min_value
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0003e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 24   : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z
_TEXT	SEGMENT
$T1 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Engine::Graphics::BufferElement> >, COMDAT

; 1209 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1210 : 		// note that this is an optimization for debug mode codegen;
; 1211 : 		// in release mode the BE removes all of this
; 1212 : 	using _Val = typename _Alloc::value_type;
; 1213 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

  0001e	0f b6 85 3b ff
	ff ff		 movzx	 eax, BYTE PTR $T1[ebp]
  00025	50		 push	 eax
  00026	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<Engine::Graphics::BufferElement> >
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 1214 : 		is_trivially_destructible<_Val>,
; 1215 : 		_Uses_default_destroy<_Alloc, _Val *>>());
; 1216 : 	}

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??$_Destroy_range@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1317 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1318 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

  0001e	6a 01		 push	 1
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1319 : 	}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 950  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  : 		_Ptr->~_Uty();
; 952  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 936  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 937  : 		_Deallocate(_Ptr, _Count, sizeof(value_type), alignof(value_type));

  0001e	6a 04		 push	 4
  00020	6a 08		 push	 8
  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$?0UBufferElement@Graphics@Engine@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0UBufferElement@Graphics@Engine@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Engine::Graphics::BufferElement>, COMDAT
; _this$ = ecx

; 1045 : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0UBufferElement@Graphics@Engine@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Engine::Graphics::BufferElement>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 04		 push	 4
  00025	6a 08		 push	 8
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??$_Ucopy@PAUBufferElement@Graphics@Engine@@@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEPAUBufferElement@Graphics@Engine@@PAU234@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAUBufferElement@Graphics@Engine@@@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEPAUBufferElement@Graphics@Engine@@PAU234@00@Z PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Ucopy<Engine::Graphics::BufferElement *>, COMDAT
; _this$ = ecx

; 1912 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1913 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  0002b	50		 push	 eax
  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUBufferElement@Graphics@Engine@@PAU123@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAPAUBufferElement@Graphics@Engine@@PAU123@00AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z ; std::_Uninitialized_copy<Engine::Graphics::BufferElement *,Engine::Graphics::BufferElement *,std::allocator<Engine::Graphics::BufferElement> >
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 1914 : 		}

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUBufferElement@Graphics@Engine@@@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEPAUBufferElement@Graphics@Engine@@PAU234@00@Z ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Ucopy<Engine::Graphics::BufferElement *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > ><std::allocator<Engine::Graphics::BufferElement>,void>, COMDAT
; _this$ = ecx

; 499  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 497  : 		: _Mypair(_One_then_variadic_args_t(),

  00042	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$forward@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YA$$QAV?$allocator@UBufferElement@Graphics@Engine@@@0@AAV10@@Z ; std::forward<std::allocator<Engine::Graphics::BufferElement> >
  0004b	83 c4 04	 add	 esp, 4
  0004e	50		 push	 eax
  0004f	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  00056	51		 push	 ecx
  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@$$V@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1><std::allocator<Engine::Graphics::BufferElement> >
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 500  : 		_Alloc_proxy();

  00066	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Alloc_proxy

; 501  : 		}

  0006e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@XZ
__ehhandler$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > ><std::allocator<Engine::Graphics::BufferElement>,void>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\oglbuffers\vertexarray.cpp
;	COMDAT ?unbind@VertexArray@Graphics@Engine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?unbind@VertexArray@Graphics@Engine@@QAEXXZ PROC	; Engine::Graphics::VertexArray::unbind, COMDAT
; _this$ = ecx

; 37   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 			glBindVertexArray(0);

  00023	8b f4		 mov	 esi, esp
  00025	6a 00		 push	 0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewBindVertexArray
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?unbind@VertexArray@Graphics@Engine@@QAEXXZ ENDP	; Engine::Graphics::VertexArray::unbind
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\oglbuffers\vertexarray.cpp
;	COMDAT ?bind@VertexArray@Graphics@Engine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?bind@VertexArray@Graphics@Engine@@QAEXXZ PROC		; Engine::Graphics::VertexArray::bind, COMDAT
; _this$ = ecx

; 32   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 			glBindVertexArray(m_RendererID);

  00023	8b f4		 mov	 esi, esp
  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	51		 push	 ecx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewBindVertexArray
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 34   : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?bind@VertexArray@Graphics@Engine@@QAEXXZ ENDP		; Engine::Graphics::VertexArray::bind
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\oglbuffers\vertexarray.cpp
;	COMDAT ?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z
_TEXT	SEGMENT
_i$2 = -72						; size = 4
_elementPtr$ = -60					; size = 4
_elements$ = -48					; size = 16
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_buffer$ = 8						; size = 4
_layout$ = 12						; size = 20
?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z PROC ; Engine::Graphics::VertexArray::addBuffer, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00021	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 19   : 			bind();

  0004c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?bind@VertexArray@Graphics@Engine@@QAEXXZ ; Engine::Graphics::VertexArray::bind

; 20   : 			std::vector<BufferElement> elements = layout.getElements();

  00054	6a 10		 push	 16			; 00000010H
  00056	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  00059	e8 00 00 00 00	 call	 ?__autoclassinit2@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEXI@Z
  0005e	8d 4d 0c	 lea	 ecx, DWORD PTR _layout$[ebp]
  00061	e8 00 00 00 00	 call	 ?getElements@VertexBufferLayout@Graphics@Engine@@QAEAAV?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@XZ ; Engine::Graphics::VertexBufferLayout::getElements
  00066	50		 push	 eax
  00067	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
  0006f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 21   : 			unsigned int elementPtr = 0;

  00073	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _elementPtr$[ebp], 0

; 22   : 			for (int i = 0; i < elements.size(); i++)

  0007a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00081	eb 09		 jmp	 SHORT $LN4@addBuffer
$LN2@addBuffer:
  00083	8b 45 b8	 mov	 eax, DWORD PTR _i$2[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 b8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@addBuffer:
  0008c	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  0008f	e8 00 00 00 00	 call	 ?size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::size
  00094	39 45 b8	 cmp	 DWORD PTR _i$2[ebp], eax
  00097	73 7f		 jae	 SHORT $LN3@addBuffer

; 23   : 			{
; 24   : 				glEnableVertexAttribArray(i);

  00099	8b f4		 mov	 esi, esp
  0009b	8b 45 b8	 mov	 eax, DWORD PTR _i$2[ebp]
  0009e	50		 push	 eax
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewEnableVertexAttribArray
  000a5	3b f4		 cmp	 esi, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 25   : 				glVertexAttribPointer(i, elements[i].m_Count, elements[i].m_Type, elements[i].m_Normalized,

  000ac	8b f4		 mov	 esi, esp
  000ae	8b 45 c4	 mov	 eax, DWORD PTR _elementPtr$[ebp]
  000b1	50		 push	 eax
  000b2	8d 4d 0c	 lea	 ecx, DWORD PTR _layout$[ebp]
  000b5	e8 00 00 00 00	 call	 ?getStride@VertexBufferLayout@Graphics@Engine@@QAEIXZ ; Engine::Graphics::VertexBufferLayout::getStride
  000ba	50		 push	 eax
  000bb	8b 4d b8	 mov	 ecx, DWORD PTR _i$2[ebp]
  000be	51		 push	 ecx
  000bf	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  000c2	e8 00 00 00 00	 call	 ??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::operator[]
  000c7	8a 50 04	 mov	 dl, BYTE PTR [eax+4]
  000ca	0f b6 c2	 movzx	 eax, dl
  000cd	50		 push	 eax
  000ce	8b 4d b8	 mov	 ecx, DWORD PTR _i$2[ebp]
  000d1	51		 push	 ecx
  000d2	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  000d5	e8 00 00 00 00	 call	 ??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::operator[]
  000da	8b 10		 mov	 edx, DWORD PTR [eax]
  000dc	52		 push	 edx
  000dd	8b 45 b8	 mov	 eax, DWORD PTR _i$2[ebp]
  000e0	50		 push	 eax
  000e1	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  000e4	e8 00 00 00 00	 call	 ??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::operator[]
  000e9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ec	51		 push	 ecx
  000ed	8b 55 b8	 mov	 edx, DWORD PTR _i$2[ebp]
  000f0	52		 push	 edx
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewVertexAttribPointer
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 26   : 					layout.getStride() , (void*)elementPtr);
; 27   : 				elementPtr += elements[i].m_Size;

  000fe	8b 45 b8	 mov	 eax, DWORD PTR _i$2[ebp]
  00101	50		 push	 eax
  00102	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  00105	e8 00 00 00 00	 call	 ??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::operator[]
  0010a	8b 4d c4	 mov	 ecx, DWORD PTR _elementPtr$[ebp]
  0010d	03 48 0c	 add	 ecx, DWORD PTR [eax+12]
  00110	89 4d c4	 mov	 DWORD PTR _elementPtr$[ebp], ecx

; 28   : 			}

  00113	e9 6b ff ff ff	 jmp	 $LN2@addBuffer
$LN3@addBuffer:

; 29   : 		}

  00118	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0011c	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  0011f	e8 00 00 00 00	 call	 ??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::~vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
  00124	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012b	8d 4d 0c	 lea	 ecx, DWORD PTR _layout$[ebp]
  0012e	e8 00 00 00 00	 call	 ??1VertexBufferLayout@Graphics@Engine@@QAE@XZ
  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@addBuffer
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00147	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014e	59		 pop	 ecx
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx
  00152	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	33 cd		 xor	 ecx, ebp
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00162	3b ec		 cmp	 ebp, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 18 00	 ret	 24			; 00000018H
  0016f	90		 npad	 1
$LN11@addBuffer:
  00170	01 00 00 00	 DD	 1
  00174	00 00 00 00	 DD	 $LN10@addBuffer
$LN10@addBuffer:
  00178	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0017c	10 00 00 00	 DD	 16			; 00000010H
  00180	00 00 00 00	 DD	 $LN8@addBuffer
$LN8@addBuffer:
  00184	65		 DB	 101			; 00000065H
  00185	6c		 DB	 108			; 0000006cH
  00186	65		 DB	 101			; 00000065H
  00187	6d		 DB	 109			; 0000006dH
  00188	65		 DB	 101			; 00000065H
  00189	6e		 DB	 110			; 0000006eH
  0018a	74		 DB	 116			; 00000074H
  0018b	73		 DB	 115			; 00000073H
  0018c	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _layout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1VertexBufferLayout@Graphics@Engine@@QAE@XZ
__unwindfunclet$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z$1:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR _elements$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::~vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
__ehhandler$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 8a f0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-272]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?addBuffer@VertexArray@Graphics@Engine@@QAEXAAVBuffer@23@VVertexBufferLayout@23@@Z ENDP ; Engine::Graphics::VertexArray::addBuffer
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\oglbuffers\vertexarray.cpp
;	COMDAT ??1VertexArray@Graphics@Engine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1VertexArray@Graphics@Engine@@QAE@XZ PROC		; Engine::Graphics::VertexArray::~VertexArray, COMDAT
; _this$ = ecx

; 13   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1VertexArray@Graphics@Engine@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : 			glDeleteVertexArrays(1, &m_RendererID);

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b f4		 mov	 esi, esp
  00047	50		 push	 eax
  00048	6a 01		 push	 1
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewDeleteVertexArrays
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 15   : 		}

  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1VertexArray@Graphics@Engine@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1VertexArray@Graphics@Engine@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1VertexArray@Graphics@Engine@@QAE@XZ ENDP		; Engine::Graphics::VertexArray::~VertexArray
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\oglbuffers\vertexarray.cpp
;	COMDAT ??0VertexArray@Graphics@Engine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0VertexArray@Graphics@Engine@@QAE@XZ PROC		; Engine::Graphics::VertexArray::VertexArray, COMDAT
; _this$ = ecx

; 6    : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 7    : 			glGenVertexArrays(1, &m_RendererID);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b f4		 mov	 esi, esp
  00028	50		 push	 eax
  00029	6a 01		 push	 1
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGenVertexArrays
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 8    : 			bind();

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?bind@VertexArray@Graphics@Engine@@QAEXXZ ; Engine::Graphics::VertexArray::bind

; 9    : 
; 10   : 		}

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??0VertexArray@Graphics@Engine@@QAE@XZ ENDP		; Engine::Graphics::VertexArray::VertexArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1VertexBufferLayout@Graphics@Engine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1VertexBufferLayout@Graphics@Engine@@QAE@XZ PROC	; Engine::Graphics::VertexBufferLayout::~VertexBufferLayout, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::~vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1VertexBufferLayout@Graphics@Engine@@QAE@XZ ENDP	; Engine::Graphics::VertexBufferLayout::~VertexBufferLayout
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\oglbuffers\vertexbufferlayout.h
;	COMDAT ?getStride@VertexBufferLayout@Graphics@Engine@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getStride@VertexBufferLayout@Graphics@Engine@@QAEIXZ PROC ; Engine::Graphics::VertexBufferLayout::getStride, COMDAT
; _this$ = ecx

; 24   : 			inline unsigned int getStride() { return m_Stride; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?getStride@VertexBufferLayout@Graphics@Engine@@QAEIXZ ENDP ; Engine::Graphics::VertexBufferLayout::getStride
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\oglbuffers\vertexbufferlayout.h
;	COMDAT ?getElements@VertexBufferLayout@Graphics@Engine@@QAEAAV?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getElements@VertexBufferLayout@Graphics@Engine@@QAEAAV?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@XZ PROC ; Engine::Graphics::VertexBufferLayout::getElements, COMDAT
; _this$ = ecx

; 23   : 			inline std::vector<BufferElement>& getElements() { return elements; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?getElements@VertexBufferLayout@Graphics@Engine@@QAEAAV?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@XZ ENDP ; Engine::Graphics::VertexBufferLayout::getElements
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEXI@Z PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Xlength@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@CAXXZ PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Xlength, COMDAT

; 2015 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2016 : 		_Xlength_error("vector<T> too long");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 2017 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Xlength@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@CAXXZ ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Tidy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXXZ PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Tidy, COMDAT
; _this$ = ecx

; 2000 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2001 : 		this->_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Orphan_all

; 2002 : 
; 2003 : 		if (this->_Myfirst() != pointer())

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00033	83 38 00	 cmp	 DWORD PTR [eax], 0
  00036	74 6b		 je	 SHORT $LN1@Tidy

; 2004 : 			{	// destroy and deallocate old array
; 2005 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
  00040	8b 00		 mov	 eax, DWORD PTR [eax]
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	51		 push	 ecx
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXPAUBufferElement@Graphics@Engine@@0@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Destroy

; 2006 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?capacity@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::capacity
  0005e	50		 push	 eax
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00067	8b 00		 mov	 eax, DWORD PTR [eax]
  00069	50		 push	 eax
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEXQAUBufferElement@Graphics@Engine@@I@Z ; std::allocator<Engine::Graphics::BufferElement>::deallocate

; 2007 : 
; 2008 : 			this->_Myfirst() = pointer();

  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2009 : 			this->_Mylast() = pointer();

  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2010 : 			this->_Myend() = pointer();

  00095	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
  0009d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 2011 : 			}
; 2012 : 		}

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
?_Tidy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXXZ ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Buy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAE_NI@Z PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Buy, COMDAT
; _this$ = ecx

; 1962 : 		{	// allocate array with _Newcapacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1963 : 		this->_Myfirst() = pointer();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1964 : 		this->_Mylast() = pointer();

  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1965 : 		this->_Myend() = pointer();

  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1966 : 
; 1967 : 		if (_Newcapacity == 0)

  0004d	83 7d 08 00	 cmp	 DWORD PTR __Newcapacity$[ebp], 0
  00051	75 04		 jne	 SHORT $LN2@Buy

; 1968 : 			{
; 1969 : 			return (false);

  00053	32 c0		 xor	 al, al
  00055	eb 63		 jmp	 SHORT $LN4@Buy
$LN2@Buy:

; 1970 : 			}
; 1971 : 
; 1972 : 		if (_Newcapacity > max_size())

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?max_size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::max_size
  0005f	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00062	76 05		 jbe	 SHORT $LN3@Buy

; 1973 : 			{
; 1974 : 			_Xlength();

  00064	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@CAXXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Xlength
$LN3@Buy:

; 1975 : 			}
; 1976 : 
; 1977 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00069	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  00075	8b c8		 mov	 ecx, eax
  00077	e8 00 00 00 00	 call	 ?allocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEPAUBufferElement@Graphics@Engine@@I@Z ; std::allocator<Engine::Graphics::BufferElement>::allocate
  0007c	8b f0		 mov	 esi, eax
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00086	89 30		 mov	 DWORD PTR [eax], esi

; 1978 : 		this->_Mylast() = this->_Myfirst();

  00088	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00090	8b f0		 mov	 esi, eax
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
  0009a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009c	89 08		 mov	 DWORD PTR [eax], ecx

; 1979 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  000a6	8b 75 08	 mov	 esi, DWORD PTR __Newcapacity$[ebp]
  000a9	c1 e6 04	 shl	 esi, 4
  000ac	03 30		 add	 esi, DWORD PTR [eax]
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
  000b6	89 30		 mov	 DWORD PTR [eax], esi

; 1980 : 
; 1981 : 		return (true);

  000b8	b0 01		 mov	 al, 1
$LN4@Buy:

; 1982 : 		}

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?_Buy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAE_NI@Z ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Destroy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXPAUBufferElement@Graphics@Engine@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXPAUBufferElement@Graphics@Engine@@0@Z PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Destroy, COMDAT
; _this$ = ecx

; 1938 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1939 : 		_Destroy_range(_First, _Last, this->_Getal());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  0002b	50		 push	 eax
  0002c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@YAXPAUBufferElement@Graphics@Engine@@0AAV?$allocator@UBufferElement@Graphics@Engine@@@0@@Z ; std::_Destroy_range<std::allocator<Engine::Graphics::BufferElement> >
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1940 : 		}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?_Destroy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXPAUBufferElement@Graphics@Engine@@0@Z ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::operator[], COMDAT
; _this$ = ecx

; 1791 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1792 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1793 : 		if (size() <= _Pos)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::size
  0002b	3b 45 08	 cmp	 eax, DWORD PTR __Pos$[ebp]
  0002e	77 3f		 ja	 SHORT $LN2@operator

; 1794 : 			{	// report error
; 1795 : 			_DEBUG_ERROR("vector subscript out of range");

  00030	68 03 07 00 00	 push	 1795			; 00000703H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  0003f	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	8b f4		 mov	 esi, esp
  00049	6a 00		 push	 0
  0004b	68 03 07 00 00	 push	 1795			; 00000703H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1PO@LCGMAEHG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAg?$AAi?$AAn?$AAe?$AA?3?$AA?3?$AAG?$AAr?$AAa?$AAp?$AAh@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00065	83 c4 14	 add	 esp, 20			; 00000014H
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 1796 : 			}
; 1797 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1798 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1800 : 
; 1801 : 		return (this->_Myfirst()[_Pos]);

  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00077	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  0007a	c1 e1 04	 shl	 ecx, 4
  0007d	03 08		 add	 ecx, DWORD PTR [eax]
  0007f	8b c1		 mov	 eax, ecx

; 1802 : 		}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
??A?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAEAAUBufferElement@Graphics@Engine@@I@Z ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?capacity@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::capacity, COMDAT
; _this$ = ecx

; 1774 : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1775 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
  0002b	8b f0		 mov	 esi, eax
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	2b 08		 sub	 ecx, DWORD PTR [eax]
  00039	c1 f9 04	 sar	 ecx, 4
  0003c	8b c1		 mov	 eax, ecx

; 1776 : 		}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?capacity@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?max_size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?max_size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::max_size, COMDAT
; _this$ = ecx

; 1768 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1769 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SAIABV?$allocator@UBufferElement@Graphics@Engine@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::max_size
  00031	83 c4 04	 add	 esp, 4
  00034	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0003a	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  0003f	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00045	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00058	83 c4 08	 add	 esp, 8
  0005b	8b 00		 mov	 eax, DWORD PTR [eax]

; 1770 : 			_Alty_traits::max_size(this->_Getal())));
; 1771 : 		}

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?max_size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::size, COMDAT
; _this$ = ecx

; 1763 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1764 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
  0002b	8b f0		 mov	 esi, eax
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	2b 08		 sub	 ecx, DWORD PTR [eax]
  00039	c1 f9 04	 sar	 ecx, 4
  0003c	8b c1		 mov	 eax, ecx

; 1765 : 		}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::~vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >, COMDAT
; _this$ = ecx

; 919  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 920  : 		_Tidy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Tidy

; 921  : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::~_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::~vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv69 = -236						; size = 4
$T2 = -225						; size = 1
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >, COMDAT
; _this$ = ecx

; 767  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00022	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 766  : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

  00046	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  0004e	50		 push	 eax
  0004f	8d 85 1f ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SA?AV?$allocator@UBufferElement@Graphics@Engine@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::select_on_container_copy_construction
  0005b	83 c4 08	 add	 esp, 8
  0005e	50		 push	 eax
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ??$?0V?$allocator@UBufferElement@Graphics@Engine@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > ><std::allocator<Engine::Graphics::BufferElement>,void>
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 768  : 		if (_Buy(_Right.size()))

  0006e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00071	e8 00 00 00 00	 call	 ?size@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QBEIXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::size
  00076	50		 push	 eax
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Buy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAE_NI@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Buy
  0007f	0f b6 c0	 movzx	 eax, al
  00082	85 c0		 test	 eax, eax
  00084	74 6c		 je	 SHORT $LN1@vector

; 769  : 			{	// nonzero, fill it
; 770  : 			_TRY_BEGIN

  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 771  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

  0008a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  00092	8b 00		 mov	 eax, DWORD PTR [eax]
  00094	50		 push	 eax
  00095	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	51		 push	 ecx
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  000a3	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
  000a8	8b 10		 mov	 edx, DWORD PTR [eax]
  000aa	52		 push	 edx
  000ab	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ??$_Ucopy@PAUBufferElement@Graphics@Engine@@@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEPAUBufferElement@Graphics@Engine@@PAU234@00@Z ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Ucopy<Engine::Graphics::BufferElement *>
  000b3	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  000b9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
  000c1	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  000c7	89 08		 mov	 DWORD PTR [eax], ecx
  000c9	eb 17		 jmp	 SHORT $LN5@vector
__catch$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z$0:

; 772  : 			_CATCH_ALL
; 773  : 			_Tidy();

  000cb	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@AAEXXZ ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::_Tidy

; 774  : 			_RERAISE;

  000d3	6a 00		 push	 0
  000d5	6a 00		 push	 0
  000d7	e8 00 00 00 00	 call	 __CxxThrowException@8

; 775  : 			_CATCH_END

  000dc	b8 00 00 00 00	 mov	 eax, $LN9@vector
  000e1	c3		 ret	 0
$LN5@vector:
  000e2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000e9	eb 07		 jmp	 SHORT $LN1@vector
$LN9@vector:
  000eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN1@vector:

; 776  : 			}
; 777  : 		}

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000f9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector:
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::~_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >
__ehhandler$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 10 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-240]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >::vector<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::~_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::~_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 351  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 353  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 346  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 348  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 331  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 333  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 326  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 327  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 328  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >::~_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >::~_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >, COMDAT
; _this$ = ecx

; 436  : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12

; 433  : 		: _Myfirst(),

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 434  : 		_Mylast(),

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 435  : 		_Myend()

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 437  : 		}

  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend, COMDAT
; _this$ = ecx

; 633  : 		{	// return const reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 634  : 		return (_Get_data()._Myend);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  0002b	83 c0 0c	 add	 eax, 12			; 0000000cH

; 635  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend, COMDAT
; _this$ = ecx

; 628  : 		{	// return reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 629  : 		return (_Get_data()._Myend);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  0002b	83 c0 0c	 add	 eax, 12			; 0000000cH

; 630  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast, COMDAT
; _this$ = ecx

; 623  : 		{	// return const reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 624  : 		return (_Get_data()._Mylast);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  0002b	83 c0 08	 add	 eax, 8

; 625  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast, COMDAT
; _this$ = ecx

; 618  : 		{	// return reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 619  : 		return (_Get_data()._Mylast);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  0002b	83 c0 08	 add	 eax, 8

; 620  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst, COMDAT
; _this$ = ecx

; 613  : 		{	// return const reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 614  : 		return (_Get_data()._Myfirst);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  0002b	83 c0 04	 add	 eax, 4

; 615  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABQAUBufferElement@Graphics@Engine@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst, COMDAT
; _this$ = ecx

; 608  : 		{	// return reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 609  : 		return (_Get_data()._Myfirst);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  0002b	83 c0 04	 add	 eax, 4

; 610  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAUBufferElement@Graphics@Engine@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data, COMDAT
; _this$ = ecx

; 603  : 		{	// return const reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 604  : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second

; 605  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data, COMDAT
; _this$ = ecx

; 598  : 		{	// return reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 599  : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_second

; 600  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal, COMDAT
; _this$ = ecx

; 593  : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 594  : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first

; 595  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QBEABV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal, COMDAT
; _this$ = ecx

; 588  : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 589  : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Compressed_pair<std::allocator<Engine::Graphics::BufferElement>,std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> >,1>::_Get_first

; 590  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 578  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 579  : 		_Get_data()._Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 580  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy, COMDAT
; _this$ = ecx

; 567  : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 568  : 		return (_Get_data()._Myproxy);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data

; 569  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 553  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 554  : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0UBufferElement@Graphics@Engine@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Engine::Graphics::BufferElement>

; 555  : 		_Orphan_all();

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Orphan_all

; 556  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	50		 push	 eax
  00051	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  0005a	83 c4 08	 add	 esp, 8

; 557  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	50		 push	 eax
  00068	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00071	83 c4 08	 add	 esp, 8

; 558  : 		_Myproxy() = 0;

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 559  : 		}

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	0f 1f 00	 npad	 3
$LN5@Free_proxy:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  000bc	eb ff ff ff	 DD	 -21			; ffffffebH
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  000c8	5f		 DB	 95			; 0000005fH
  000c9	50		 DB	 80			; 00000050H
  000ca	72		 DB	 114			; 00000072H
  000cb	6f		 DB	 111			; 0000006fH
  000cc	78		 DB	 120			; 00000078H
  000cd	79		 DB	 121			; 00000079H
  000ce	5f		 DB	 95			; 0000005fH
  000cf	61		 DB	 97			; 00000061H
  000d0	6c		 DB	 108			; 0000006cH
  000d1	6c		 DB	 108			; 0000006cH
  000d2	6f		 DB	 111			; 0000006fH
  000d3	63		 DB	 99			; 00000063H
  000d4	61		 DB	 97			; 00000061H
  000d5	74		 DB	 116			; 00000074H
  000d6	6f		 DB	 111			; 0000006fH
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -232						; size = 8
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 545  : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 546  : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$allocator@UBufferElement@Graphics@Engine@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0UBufferElement@Graphics@Engine@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UBufferElement@Graphics@Engine@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Engine::Graphics::BufferElement>

; 547  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0003e	6a 01		 push	 1
  00040	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00043	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f0		 mov	 esi, eax
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
  0005b	89 30		 mov	 DWORD PTR [eax], esi

; 548  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0005d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00063	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00068	50		 push	 eax
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	50		 push	 eax
  00074	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 549  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00080	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Get_data
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<Engine::Graphics::BufferElement> > >
  0008e	83 c4 04	 add	 esp, 4
  00091	8b f0		 mov	 esi, eax
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Myproxy
  0009b	8b 00		 mov	 eax, DWORD PTR [eax]
  0009d	89 30		 mov	 DWORD PTR [eax], esi

; 550  : 		}

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
  000ce	66 90		 npad	 2
$LN5@Alloc_prox:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  000d8	eb ff ff ff	 DD	 -21			; ffffffebH
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  000e4	5f		 DB	 95			; 0000005fH
  000e5	50		 DB	 80			; 00000050H
  000e6	72		 DB	 114			; 00000072H
  000e7	6f		 DB	 111			; 0000006fH
  000e8	78		 DB	 120			; 00000078H
  000e9	79		 DB	 121			; 00000079H
  000ea	5f		 DB	 95			; 0000005fH
  000eb	61		 DB	 97			; 00000061H
  000ec	6c		 DB	 108			; 0000006cH
  000ed	6c		 DB	 108			; 0000006cH
  000ee	6f		 DB	 111			; 0000006fH
  000ef	63		 DB	 99			; 00000063H
  000f0	61		 DB	 97			; 00000061H
  000f1	74		 DB	 116			; 00000074H
  000f2	6f		 DB	 111			; 0000006fH
  000f3	72		 DB	 114			; 00000072H
  000f4	00		 DB	 0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::~_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >, COMDAT
; _this$ = ecx

; 504  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 505  : 		_Free_proxy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::_Free_proxy

; 506  : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@UBufferElement@Graphics@Engine@@@std@@V?$_Vector_val@U?$_Simple_types@UBufferElement@Graphics@Engine@@@std@@@2@$00@std@@QAE@XZ
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@UBufferElement@Graphics@Engine@@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >::~_Vector_alloc<std::_Vec_base_types<Engine::Graphics::BufferElement,std::allocator<Engine::Graphics::BufferElement> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SA?AV?$allocator@UBufferElement@Graphics@Engine@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SA?AV?$allocator@UBufferElement@Graphics@Engine@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::select_on_container_copy_construction, COMDAT

; 960  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 961  : 		return (_Al);

  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 962  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SA?AV?$allocator@UBufferElement@Graphics@Engine@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SAIABV?$allocator@UBufferElement@Graphics@Engine@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SAIABV?$allocator@UBufferElement@Graphics@Engine@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::max_size, COMDAT

; 955  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 956  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  0001e	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 957  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@UBufferElement@Graphics@Engine@@@std@@@std@@SAIABV?$allocator@UBufferElement@Graphics@Engine@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Engine::Graphics::BufferElement> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEPAUBufferElement@Graphics@Engine@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEPAUBufferElement@Graphics@Engine@@I@Z PROC ; std::allocator<Engine::Graphics::BufferElement>::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 04		 push	 4
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEPAUBufferElement@Graphics@Engine@@I@Z ENDP ; std::allocator<Engine::Graphics::BufferElement>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEXQAUBufferElement@Graphics@Engine@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEXQAUBufferElement@Graphics@Engine@@I@Z PROC ; std::allocator<Engine::Graphics::BufferElement>::deallocate, COMDAT
; _this$ = ecx

; 1049 : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1050 : 		_Deallocate(_Ptr, _Count, sizeof(_Ty), alignof(_Ty));

  00023	6a 04		 push	 4
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 1051 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?deallocate@?$allocator@UBufferElement@Graphics@Engine@@@std@@QAEXQAUBufferElement@Graphics@Engine@@I@Z ENDP ; std::allocator<Engine::Graphics::BufferElement>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXIII@Z
_TEXT	SEGMENT
__Ptr_container$1 = -44					; size = 4
__Ptr_ptr$2 = -32					; size = 4
__Ptr_user$3 = -20					; size = 4
__Allocated_size$4 = -8					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
__Align$ = 20						; size = 4
?_Deallocate@std@@YAXPAXIII@Z PROC			; std::_Deallocate, COMDAT

; 143  : 	{	// deallocate storage for _Count elements of size _Sz with alignment _Align

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 144  : 	(void)_Align;
; 145  : 
; 146  : 	if (_Count > static_cast<size_t>(-1) / _Sz)

  0001e	83 c8 ff	 or	 eax, -1
  00021	33 d2		 xor	 edx, edx
  00023	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  00026	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  00029	76 0a		 jbe	 SHORT $LN2@Deallocate

; 147  : 		{
; 148  : 		goto _Invalid_parameter; // TRANSITION, VSO#359498

  0002b	e9 b7 00 00 00	 jmp	 $_Invalid_parameter$18
  00030	e9 b2 00 00 00	 jmp	 $_Invalid_parameter$18
$LN2@Deallocate:

; 149  : 		}
; 150  : 
; 151  : 		{
; 152  : 		size_t _Allocated_size = _Count * _Sz;

  00035	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00038	0f af 45 10	 imul	 eax, DWORD PTR __Sz$[ebp]
  0003c	89 45 f8	 mov	 DWORD PTR __Allocated_size$4[ebp], eax

; 153  : 
; 154  : #if defined(_M_IX86) || defined(_M_X64)
; 155  : 		// Boost the alignment of big allocations to help autovectorization.
; 156  :  #pragma warning(push)
; 157  :  #pragma warning(disable: 4127) // conditional expression is constant
; 158  :  #pragma warning(disable: 6326) // Potential comparison of a constant with another constant
; 159  : 		if (_Allocated_size >= _Big_allocation_threshold)

  0003f	81 7d f8 00 10
	00 00		 cmp	 DWORD PTR __Allocated_size$4[ebp], 4096 ; 00001000H
  00046	0f 82 89 00 00
	00		 jb	 $LN4@Deallocate

; 160  : 			{
; 161  :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 162  : 			if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 163  : 				{	// allocation will use aligned new
; 164  : 				if /* constexpr */ (__STDCPP_DEFAULT_NEW_ALIGNMENT__ * 2 >= _Big_allocation_alignment)
; 165  : 					{	// There are no valid alignments between __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 166  : 						// and _Big_allocation_alignment; the below conditional is dead.
; 167  : 					}
; 168  : 				else
; 169  : 					{
; 170  : 					if (_Align < _Big_allocation_alignment)
; 171  : 						{	// boost alignment
; 172  : 						_Align = _Big_allocation_alignment;
; 173  : 						}
; 174  : 					}
; 175  : 				}
; 176  : 			else
; 177  :  #endif /* _HAS_ALIGNED_NEW */
; 178  : 				{	// allocation will use unaligned new; boost alignment manually
; 179  : 				if (_Allocated_size + _Non_user_size <= _Allocated_size)

  0004c	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  0004f	83 c0 27	 add	 eax, 39			; 00000027H
  00052	3b 45 f8	 cmp	 eax, DWORD PTR __Allocated_size$4[ebp]
  00055	77 0a		 ja	 SHORT $LN5@Deallocate

; 180  : 					{
; 181  : 					goto _Invalid_parameter;

  00057	e9 8b 00 00 00	 jmp	 $_Invalid_parameter$18
  0005c	e9 86 00 00 00	 jmp	 $_Invalid_parameter$18
$LN5@Deallocate:

; 182  : 					}
; 183  : 				_Allocated_size += _Non_user_size;

  00061	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  00064	83 c0 27	 add	 eax, 39			; 00000027H
  00067	89 45 f8	 mov	 DWORD PTR __Allocated_size$4[ebp], eax

; 184  : 
; 185  : 				const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

  0006a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006d	89 45 ec	 mov	 DWORD PTR __Ptr_user$3[ebp], eax

; 186  : 				if ((_Ptr_user & (_Big_allocation_alignment - 1)) != 0)

  00070	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  00073	83 e0 1f	 and	 eax, 31			; 0000001fH
  00076	74 04		 je	 SHORT $LN7@Deallocate

; 187  : 					{
; 188  : 					goto _Invalid_parameter;

  00078	eb 6d		 jmp	 SHORT $_Invalid_parameter$18
  0007a	eb 6b		 jmp	 SHORT $_Invalid_parameter$18
$LN7@Deallocate:

; 189  : 					}
; 190  : 
; 191  : 				const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

  0007c	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  0007f	83 e8 04	 sub	 eax, 4
  00082	89 45 e0	 mov	 DWORD PTR __Ptr_ptr$2[ebp], eax

; 192  : 				const uintptr_t _Ptr_container =
; 193  : 					*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00085	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_ptr$2[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	89 4d d4	 mov	 DWORD PTR __Ptr_container$1[ebp], ecx

; 194  : 
; 195  :   #ifdef _DEBUG
; 196  : 				// If the following asserts, it likely means that we are performing
; 197  : 				// an aligned delete on memory coming from an unaligned allocation.
; 198  : 				if (reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] != _Big_allocation_sentinel)

  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	6b c8 ff	 imul	 ecx, eax, -1
  00095	8b 55 e0	 mov	 edx, DWORD PTR __Ptr_ptr$2[ebp]
  00098	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  0009f	74 04		 je	 SHORT $LN9@Deallocate

; 199  : 					{
; 200  : 					goto _Invalid_parameter;

  000a1	eb 44		 jmp	 SHORT $_Invalid_parameter$18
  000a3	eb 42		 jmp	 SHORT $_Invalid_parameter$18
$LN9@Deallocate:

; 201  : 					}
; 202  :   #endif /* _DEBUG */
; 203  : 
; 204  : 				// Extra paranoia on aligned allocation/deallocation
; 205  : 				if (_Ptr_container >= _Ptr_user)

  000a5	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  000a8	3b 45 ec	 cmp	 eax, DWORD PTR __Ptr_user$3[ebp]
  000ab	72 04		 jb	 SHORT $LN11@Deallocate

; 206  : 					{
; 207  : 					goto _Invalid_parameter;

  000ad	eb 38		 jmp	 SHORT $_Invalid_parameter$18
  000af	eb 36		 jmp	 SHORT $_Invalid_parameter$18
$LN11@Deallocate:

; 208  : 					}
; 209  : 
; 210  :   #ifdef _DEBUG
; 211  : 				if (2 * sizeof(void *) > _Ptr_user - _Ptr_container)

  000b1	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  000b4	2b 45 d4	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  000b7	83 f8 08	 cmp	 eax, 8
  000ba	73 04		 jae	 SHORT $LN13@Deallocate

; 212  :   #else /* _DEBUG */
; 213  : 				if (sizeof(void *) > _Ptr_user - _Ptr_container)
; 214  :   #endif /* _DEBUG */
; 215  : 					{
; 216  : 					goto _Invalid_parameter;

  000bc	eb 29		 jmp	 SHORT $_Invalid_parameter$18
  000be	eb 27		 jmp	 SHORT $_Invalid_parameter$18
$LN13@Deallocate:

; 217  : 					}
; 218  : 
; 219  : 				if (_Ptr_user - _Ptr_container > _Non_user_size)

  000c0	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  000c3	2b 45 d4	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  000c6	83 f8 27	 cmp	 eax, 39			; 00000027H
  000c9	76 04		 jbe	 SHORT $LN15@Deallocate

; 220  : 					{
; 221  : 					goto _Invalid_parameter;

  000cb	eb 1a		 jmp	 SHORT $_Invalid_parameter$18
  000cd	eb 18		 jmp	 SHORT $_Invalid_parameter$18
$LN15@Deallocate:

; 222  : 					}
; 223  : 
; 224  : 				_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000cf	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  000d2	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
$LN4@Deallocate:

; 225  : 				}
; 226  : 			}
; 227  :  #pragma warning(pop)
; 228  : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 229  : 
; 230  :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 231  : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 232  : 			{
; 233  : 			::operator delete(_Ptr, _Allocated_size, align_val_t{_Align});
; 234  : 			}
; 235  : 		else
; 236  :  #endif /* _HAS_ALIGNED_NEW */
; 237  : 			{
; 238  : 			::operator delete(_Ptr, _Allocated_size);

  000d5	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e2	83 c4 08	 add	 esp, 8

; 239  : 			}
; 240  : 		return;

  000e5	eb 2c		 jmp	 SHORT $LN1@Deallocate
$_Invalid_parameter$18:

; 241  : 		}
; 242  : 
; 243  : _Invalid_parameter:
; 244  : 	_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

  000e7	8b f4		 mov	 esi, esp
  000e9	6a 00		 push	 0
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA
  000f0	83 c0 65	 add	 eax, 101		; 00000065H
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00109	83 c4 14	 add	 esp, 20			; 00000014H
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Deallocate:

; 245  : 	}

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0011c	3b ec		 cmp	 ebp, esp
  0011e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
?_Deallocate@std@@YAXPAXIII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -48						; size = 4
__Lock$3 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 248  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 249  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 250  : 	if (_Myproxy != 0)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004b	74 61		 je	 SHORT $LN6@Orphan_all

; 251  : 		{	// proxy allocated, drain it
; 252  : 		_Lockit _Lock(_LOCK_DEBUG);

  0004d	8b f4		 mov	 esi, esp
  0004f	6a 03		 push	 3
  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 253  : 
; 254  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00061	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	83 c1 04	 add	 ecx, 4
  00069	89 4d d0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  0006c	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 255  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

  0006e	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 55 d0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00076	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00079	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007b	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0007e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00081	74 0d		 je	 SHORT $LN3@Orphan_all

; 256  : 			(*_Pnext)->_Myproxy = 0;

  00083	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0008e	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 257  : 		_Myproxy->_Myfirstiter = 0;

  00090	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 258  : 		}

  0009c	8b f4		 mov	 esi, esp
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Orphan_all:

; 259  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 260  : 	}

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Orphan_all
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN10@Orphan_all:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN9@Orphan_all
$LN9@Orphan_all:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN7@Orphan_all
$LN7@Orphan_all:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	4c		 DB	 76			; 0000004cH
  000fe	6f		 DB	 111			; 0000006fH
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 124  : 		{	// destroy the container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 125  : 		_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 126  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 110  : 		{	// construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		: _Myproxy(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 111  : 		}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 98   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 97   : 		: _Mycont(0), _Myfirstiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 99   : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 178  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 179  :         (void)_Size;
; 180  :         return _Where;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 181  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 682  : 		{	// return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 683  : 		return (INT_MAX);

  0001e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 684  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
END
