; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Repos\Galaxy\Galaxy\Engine\Math\Mat4f.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?toRadians@Math@Engine@@YAMM@Z			; Engine::Math::toRadians
PUBLIC	?fill@?$array@M$0BA@@std@@QAEXABM@Z		; std::array<float,16>::fill
PUBLIC	?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z		; std::array<float,16>::swap
PUBLIC	??A?$array@M$0BA@@std@@QAEAAMI@Z		; std::array<float,16>::operator[]
PUBLIC	??A?$array@M$0BA@@std@@QBEABMI@Z		; std::array<float,16>::operator[]
PUBLIC	??0Mat4f@Math@Engine@@AAE@XZ			; Engine::Math::Mat4f::Mat4f
PUBLIC	?Identity@Mat4f@Math@Engine@@SA?AV123@XZ	; Engine::Math::Mat4f::Identity
PUBLIC	?translate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@@Z ; Engine::Math::Mat4f::translate
PUBLIC	?rotate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@ABM@Z ; Engine::Math::Mat4f::rotate
PUBLIC	?multiply@Mat4f@Math@Engine@@QAEAAV123@ABV123@@Z ; Engine::Math::Mat4f::multiply
PUBLIC	??XMat4f@Math@Engine@@QAEAAV012@ABV012@@Z	; Engine::Math::Mat4f::operator*=
PUBLIC	??DMath@Engine@@YA?AVMat4f@01@AAV201@ABV201@@Z	; Engine::Math::operator*
PUBLIC	?Orthographic@Mat4f@Math@Engine@@SA?AV123@MMMMMM@Z ; Engine::Math::Mat4f::Orthographic
PUBLIC	?Perspective@Mat4f@Math@Engine@@SA?AV123@MMMM@Z	; Engine::Math::Mat4f::Perspective
PUBLIC	??$swap@MX@std@@YAXAAM0@Z			; std::swap<float,void>
PUBLIC	??$_Swap_ranges_unchecked@PAMPAM@std@@YAPAMPAM00@Z ; std::_Swap_ranges_unchecked<float *,float *>
PUBLIC	??$_Fill_n_unchecked@PAMIM@std@@YAPAMPAMIABM@Z	; std::_Fill_n_unchecked<float *,unsigned int,float>
PUBLIC	??$iter_swap@PAMPAM@std@@YAXPAM0@Z		; std::iter_swap<float *,float *>
PUBLIC	??$_Fill_memset_is_safe@PAMM@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAMABM@Z ; std::_Fill_memset_is_safe<float *,float>
PUBLIC	??$_Fill_n_unchecked1@PAMIM@std@@YAPAMPAMIABMU?$integral_constant@_N$0A@@0@@Z ; std::_Fill_n_unchecked1<float *,unsigned int,float>
PUBLIC	??$move@AAM@std@@YA$$QAMAAM@Z			; std::move<float &>
PUBLIC	??_C@_1MO@DNICNODO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DK@PHOIHFMC@?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@PHAGCLKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AA1?$AA6?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$FL@ ; `string'
PUBLIC	??_C@_1DO@NCBLADDF@?$AA?$CC?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40490fdb
PUBLIC	__real@43340000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DO@NCBLADDF@?$AA?$CC?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@NCBLADDF@?$AA?$CC?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@PHAGCLKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AA1?$AA6?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$FL@
CONST	SEGMENT
??_C@_1EE@PHAGCLKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AA1?$AA6?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$FL@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'a', 00H, 'y', 00H, '<', 00H, 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'a', 00H, 't', 00H, ',', 00H, '1', 00H, '6', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@PHOIHFMC@?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@PHOIHFMC@?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 's', 00H
	DB	'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p'
	DB	00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@DNICNODO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1MO@DNICNODO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$move@AAM@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAM@std@@YA$$QAMAAM@Z PROC			; std::move<float &>, COMDAT

; 1552 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1553 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1554 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAM@std@@YA$$QAMAAM@Z ENDP			; std::move<float &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Fill_n_unchecked1@PAMIM@std@@YAPAMPAMIABMU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n_unchecked1@PAMIM@std@@YAPAMPAMIABMU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Fill_n_unchecked1<float *,unsigned int,float>, COMDAT

; 2931 : 	{	// copy _Val _Count times through [_Dest, ...), no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2932 : 	for (; 0 < _Count; --_Count, (void)++_Dest)

  0001e	eb 12		 jmp	 SHORT $LN4@Fill_n_unc
$LN2@Fill_n_unc:
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00023	83 e8 01	 sub	 eax, 1
  00026	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0002c	83 c1 04	 add	 ecx, 4
  0002f	89 4d 08	 mov	 DWORD PTR __Dest$[ebp], ecx
$LN4@Fill_n_unc:
  00032	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00036	76 0c		 jbe	 SHORT $LN3@Fill_n_unc

; 2933 : 		*_Dest = _Val;

  00038	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	89 10		 mov	 DWORD PTR [eax], edx
  00042	eb dc		 jmp	 SHORT $LN2@Fill_n_unc
$LN3@Fill_n_unc:

; 2934 : 	return (_Dest);

  00044	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2935 : 	}

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??$_Fill_n_unchecked1@PAMIM@std@@YAPAMPAMIABMU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Fill_n_unchecked1<float *,unsigned int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Fill_memset_is_safe@PAMM@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAMABM@Z
_TEXT	SEGMENT
$T1 = -197						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Fill_memset_is_safe@PAMM@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAMABM@Z PROC ; std::_Fill_memset_is_safe<float *,float>, COMDAT

; 2879 : 	{	// type deduction for _Fill_memset_is_safe_helper

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2880 : 	return {};

  0001e	33 c0		 xor	 eax, eax
  00020	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00026	8a 85 3b ff ff
	ff		 mov	 al, BYTE PTR $T1[ebp]

; 2881 : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Fill_memset_is_safe@PAMM@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAMABM@Z ENDP ; std::_Fill_memset_is_safe<float *,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$iter_swap@PAMPAM@std@@YAXPAM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAMPAM@std@@YAXPAM0@Z PROC			; std::iter_swap<float *,float *>, COMDAT

; 39   : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 40   : 	swap(*_Left, *_Right);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$swap@MX@std@@YAXAAM0@Z ; std::swap<float,void>
  0002b	83 c4 08	 add	 esp, 8

; 41   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??$iter_swap@PAMPAM@std@@YAXPAM0@Z ENDP			; std::iter_swap<float *,float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Fill_n_unchecked@PAMIM@std@@YAPAMPAMIABM@Z
_TEXT	SEGMENT
$T1 = -197						; size = 1
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_n_unchecked@PAMIM@std@@YAPAMPAMIABM@Z PROC	; std::_Fill_n_unchecked<float *,unsigned int,float>, COMDAT

; 2955 : 	{	// copy _Val _Count times through [_Dest, ...), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2956 : 		// note: _Fill_n_unchecked is called directly from elsewhere in the STL
; 2957 : 	return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00021	50		 push	 eax
  00022	8d 4d 08	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Fill_memset_is_safe@PAMM@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAMABM@Z ; std::_Fill_memset_is_safe<float *,float>
  0002b	83 c4 08	 add	 esp, 8
  0002e	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00034	0f b6 95 3b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  0003b	52		 push	 edx
  0003c	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??$_Fill_n_unchecked1@PAMIM@std@@YAPAMPAMIABMU?$integral_constant@_N$0A@@0@@Z ; std::_Fill_n_unchecked1<float *,unsigned int,float>
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 2958 : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
??$_Fill_n_unchecked@PAMIM@std@@YAPAMPAMIABM@Z ENDP	; std::_Fill_n_unchecked<float *,unsigned int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\algorithm
;	COMDAT ??$_Swap_ranges_unchecked@PAMPAM@std@@YAPAMPAM00@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Swap_ranges_unchecked@PAMPAM@std@@YAPAMPAM00@Z PROC	; std::_Swap_ranges_unchecked<float *,float *>, COMDAT

; 936  : 	{	// swap [_First1, _Last1) with [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 937  : 	for (; _First1 != _Last1; ++_First1, (void)++_Dest)

  0001e	eb 12		 jmp	 SHORT $LN4@Swap_range
$LN2@Swap_range:
  00020	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]
  00023	83 c0 04	 add	 eax, 4
  00026	89 45 08	 mov	 DWORD PTR __First1$[ebp], eax
  00029	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0002c	83 c1 04	 add	 ecx, 4
  0002f	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
$LN4@Swap_range:
  00032	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]
  00035	3b 45 0c	 cmp	 eax, DWORD PTR __Last1$[ebp]
  00038	74 12		 je	 SHORT $LN3@Swap_range

; 938  : 		_STD iter_swap(_First1, _Dest);

  0003a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __First1$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$iter_swap@PAMPAM@std@@YAXPAM0@Z ; std::iter_swap<float *,float *>
  00047	83 c4 08	 add	 esp, 8
  0004a	eb d4		 jmp	 SHORT $LN2@Swap_range
$LN3@Swap_range:

; 939  : 	return (_Dest);

  0004c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 940  : 	}

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??$_Swap_ranges_unchecked@PAMPAM@std@@YAPAMPAM00@Z ENDP	; std::_Swap_ranges_unchecked<float *,float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$swap@MX@std@@YAXAAM0@Z
_TEXT	SEGMENT
__Tmp$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@MX@std@@YAXAAM0@Z PROC				; std::swap<float,void>, COMDAT

; 65   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 66   : 	_Ty _Tmp = _STD move(_Left);

  00028	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$move@AAM@std@@YA$$QAMAAM@Z ; std::move<float &>
  00031	83 c4 04	 add	 esp, 4
  00034	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00038	f3 0f 11 45 f4	 movss	 DWORD PTR __Tmp$[ebp], xmm0

; 67   : 	_Left = _STD move(_Right);

  0003d	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$move@AAM@std@@YA$$QAMAAM@Z ; std::move<float &>
  00046	83 c4 04	 add	 esp, 4
  00049	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0004c	8b 10		 mov	 edx, DWORD PTR [eax]
  0004e	89 11		 mov	 DWORD PTR [ecx], edx

; 68   : 	_Right = _STD move(_Tmp);

  00050	8d 45 f4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$move@AAM@std@@YA$$QAMAAM@Z ; std::move<float &>
  00059	83 c4 04	 add	 esp, 4
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	89 11		 mov	 DWORD PTR [ecx], edx

; 69   : 	}

  00063	52		 push	 edx
  00064	8b cd		 mov	 ecx, ebp
  00066	50		 push	 eax
  00067	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@swap
  0006d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00072	58		 pop	 eax
  00073	5a		 pop	 edx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
  00092	66 90		 npad	 2
$LN5@swap:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@swap
$LN4@swap:
  0009c	f4 ff ff ff	 DD	 -12			; fffffff4H
  000a0	04 00 00 00	 DD	 4
  000a4	00 00 00 00	 DD	 $LN3@swap
$LN3@swap:
  000a8	5f		 DB	 95			; 0000005fH
  000a9	54		 DB	 84			; 00000054H
  000aa	6d		 DB	 109			; 0000006dH
  000ab	70		 DB	 112			; 00000070H
  000ac	00		 DB	 0
??$swap@MX@std@@YAXAAM0@Z ENDP				; std::swap<float,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?Perspective@Mat4f@Math@Engine@@SA?AV123@MMMM@Z
_TEXT	SEGMENT
tv157 = -296						; size = 4
tv155 = -296						; size = 4
tv153 = -296						; size = 4
tv151 = -296						; size = 4
_tanResult$ = -96					; size = 4
_normalizedFOV$ = -84					; size = 4
_result$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_aspectRatio$ = 12					; size = 4
_fov$ = 16						; size = 4
_far$ = 20						; size = 4
_near$ = 24						; size = 4
?Perspective@Mat4f@Math@Engine@@SA?AV123@MMMM@Z PROC	; Engine::Math::Mat4f::Perspective, COMDAT

; 98   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 99   : 			Mat4f result;

  00028	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0Mat4f@Math@Engine@@AAE@XZ ; Engine::Math::Mat4f::Mat4f

; 100  : 			float normalizedFOV = toRadians(fov);

  00030	51		 push	 ecx
  00031	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fov$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 ?toRadians@Math@Engine@@YAMM@Z ; Engine::Math::toRadians
  00040	83 c4 04	 add	 esp, 4
  00043	d9 5d ac	 fstp	 DWORD PTR _normalizedFOV$[ebp]

; 101  : 			float tanResult = std::tan(normalizedFOV / 2);

  00046	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _normalizedFOV$[ebp]
  0004b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00053	51		 push	 ecx
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	e8 00 00 00 00	 call	 ?tan@@YAMM@Z		; tan
  0005e	83 c4 04	 add	 esp, 4
  00061	d9 5d a0	 fstp	 DWORD PTR _tanResult$[ebp]

; 102  : 
; 103  : 			result.m_Matrix[0 + 0 * 4] = (1 / (tanResult)) /aspectRatio;

  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006c	f3 0f 5e 45 a0	 divss	 xmm0, DWORD PTR _tanResult$[ebp]
  00071	f3 0f 5e 45 0c	 divss	 xmm0, DWORD PTR _aspectRatio$[ebp]
  00076	6a 00		 push	 0
  00078	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0007b	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR tv151[ebp], xmm0
  00083	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00088	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR tv151[ebp]
  00090	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 104  : 			result.m_Matrix[1 + 1 * 4] = 1 / tanResult;

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009c	f3 0f 5e 45 a0	 divss	 xmm0, DWORD PTR _tanResult$[ebp]
  000a1	6a 05		 push	 5
  000a3	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  000a6	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR tv153[ebp], xmm0
  000ae	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  000b3	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR tv153[ebp]
  000bb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 105  : 			result.m_Matrix[2 + 2 * 4] =  (far + near) / (near -far);

  000bf	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _far$[ebp]
  000c4	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _near$[ebp]
  000c9	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _near$[ebp]
  000ce	f3 0f 5c 4d 14	 subss	 xmm1, DWORD PTR _far$[ebp]
  000d3	f3 0f 5e c1	 divss	 xmm0, xmm1
  000d7	6a 0a		 push	 10			; 0000000aH
  000d9	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  000dc	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR tv155[ebp], xmm0
  000e4	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  000e9	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR tv155[ebp]
  000f1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 106  : 			result.m_Matrix[3 + 2 * 4] = -1;

  000f5	6a 0b		 push	 11			; 0000000bH
  000f7	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  000fa	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00107	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 107  : 			result.m_Matrix[2 + 3 * 4] = (2 * far * near) / (near - far);

  0010b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00113	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _far$[ebp]
  00118	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _near$[ebp]
  0011d	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _near$[ebp]
  00122	f3 0f 5c 4d 14	 subss	 xmm1, DWORD PTR _far$[ebp]
  00127	f3 0f 5e c1	 divss	 xmm0, xmm1
  0012b	6a 0e		 push	 14			; 0000000eH
  0012d	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00130	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR tv157[ebp], xmm0
  00138	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0013d	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR tv157[ebp]
  00145	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 108  : 			
; 109  : 			return result;

  00149	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0014e	8d 75 b8	 lea	 esi, DWORD PTR _result$[ebp]
  00151	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00154	f3 a5		 rep movsd
  00156	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 110  : 
; 111  : 		}

  00159	52		 push	 edx
  0015a	8b cd		 mov	 ecx, ebp
  0015c	50		 push	 eax
  0015d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Perspectiv
  00163	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00168	58		 pop	 eax
  00169	5a		 pop	 edx
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00170	33 cd		 xor	 ecx, ebp
  00172	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00177	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  0017d	3b ec		 cmp	 ebp, esp
  0017f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c3		 ret	 0
$LN5@Perspectiv:
  00188	01 00 00 00	 DD	 1
  0018c	00 00 00 00	 DD	 $LN4@Perspectiv
$LN4@Perspectiv:
  00190	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00194	40 00 00 00	 DD	 64			; 00000040H
  00198	00 00 00 00	 DD	 $LN3@Perspectiv
$LN3@Perspectiv:
  0019c	72		 DB	 114			; 00000072H
  0019d	65		 DB	 101			; 00000065H
  0019e	73		 DB	 115			; 00000073H
  0019f	75		 DB	 117			; 00000075H
  001a0	6c		 DB	 108			; 0000006cH
  001a1	74		 DB	 116			; 00000074H
  001a2	00		 DB	 0
?Perspective@Mat4f@Math@Engine@@SA?AV123@MMMM@Z ENDP	; Engine::Math::Mat4f::Perspective
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?Orthographic@Mat4f@Math@Engine@@SA?AV123@MMMMMM@Z
_TEXT	SEGMENT
tv173 = -272						; size = 4
tv171 = -272						; size = 4
tv169 = -272						; size = 4
tv167 = -272						; size = 4
tv165 = -272						; size = 4
tv163 = -272						; size = 4
_result$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_right$ = 12						; size = 4
_left$ = 16						; size = 4
_top$ = 20						; size = 4
_bottom$ = 24						; size = 4
_far$ = 28						; size = 4
_near$ = 32						; size = 4
?Orthographic@Mat4f@Math@Engine@@SA?AV123@MMMMMM@Z PROC	; Engine::Math::Mat4f::Orthographic, COMDAT

; 84   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00012	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 85   : 			Mat4f result;

  00028	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0Mat4f@Math@Engine@@AAE@XZ ; Engine::Math::Mat4f::Mat4f

; 86   : 
; 87   : 			result.m_Matrix[0 + 0 * 4] = 2 / (right - left);

  00030	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  00035	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _left$[ebp]
  0003a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00042	f3 0f 5e c8	 divss	 xmm1, xmm0
  00046	6a 00		 push	 0
  00048	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0004b	f3 0f 11 8d f0
	fe ff ff	 movss	 DWORD PTR tv163[ebp], xmm1
  00053	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00058	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv163[ebp]
  00060	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 88   : 			result.m_Matrix[1 + 1 * 4] = 2 / (top - bottom);

  00064	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00069	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _bottom$[ebp]
  0006e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00076	f3 0f 5e c8	 divss	 xmm1, xmm0
  0007a	6a 05		 push	 5
  0007c	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0007f	f3 0f 11 8d f0
	fe ff ff	 movss	 DWORD PTR tv165[ebp], xmm1
  00087	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0008c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv165[ebp]
  00094	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 89   : 			result.m_Matrix[2 + 2 * 4] = 2 / (near  -  far);

  00098	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _near$[ebp]
  0009d	f3 0f 5c 45 1c	 subss	 xmm0, DWORD PTR _far$[ebp]
  000a2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  000aa	f3 0f 5e c8	 divss	 xmm1, xmm0
  000ae	6a 0a		 push	 10			; 0000000aH
  000b0	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  000b3	f3 0f 11 8d f0
	fe ff ff	 movss	 DWORD PTR tv167[ebp], xmm1
  000bb	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  000c0	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv167[ebp]
  000c8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 90   : 			result.m_Matrix[0 + 3 * 4] = -(right + left) / (right - left);

  000cc	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  000d1	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _left$[ebp]
  000d6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000dd	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _right$[ebp]
  000e2	f3 0f 5c 4d 10	 subss	 xmm1, DWORD PTR _left$[ebp]
  000e7	f3 0f 5e c1	 divss	 xmm0, xmm1
  000eb	6a 0c		 push	 12			; 0000000cH
  000ed	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  000f0	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR tv169[ebp], xmm0
  000f8	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  000fd	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv169[ebp]
  00105	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 91   : 			result.m_Matrix[1 + 3 * 4] = -(top + bottom) / (top - bottom);

  00109	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  0010e	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _bottom$[ebp]
  00113	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0011a	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _top$[ebp]
  0011f	f3 0f 5c 4d 18	 subss	 xmm1, DWORD PTR _bottom$[ebp]
  00124	f3 0f 5e c1	 divss	 xmm0, xmm1
  00128	6a 0d		 push	 13			; 0000000dH
  0012a	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0012d	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR tv171[ebp], xmm0
  00135	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0013a	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv171[ebp]
  00142	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 92   : 			result.m_Matrix[2 + 3 * 4] = -(far + near)	 /	 (near - far);

  00146	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _far$[ebp]
  0014b	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _near$[ebp]
  00150	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00157	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _near$[ebp]
  0015c	f3 0f 5c 4d 1c	 subss	 xmm1, DWORD PTR _far$[ebp]
  00161	f3 0f 5e c1	 divss	 xmm0, xmm1
  00165	6a 0e		 push	 14			; 0000000eH
  00167	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0016a	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR tv173[ebp], xmm0
  00172	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00177	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv173[ebp]
  0017f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 93   : 			result.m_Matrix[3 + 3 * 4] = 1;

  00183	6a 0f		 push	 15			; 0000000fH
  00185	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00188	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0018d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00195	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 94   : 
; 95   : 			return result;

  00199	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0019e	8d 75 b8	 lea	 esi, DWORD PTR _result$[ebp]
  001a1	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  001a4	f3 a5		 rep movsd
  001a6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : 		}

  001a9	52		 push	 edx
  001aa	8b cd		 mov	 ecx, ebp
  001ac	50		 push	 eax
  001ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Orthograph
  001b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001b8	58		 pop	 eax
  001b9	5a		 pop	 edx
  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi
  001bc	5b		 pop	 ebx
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c0	33 cd		 xor	 ecx, ebp
  001c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c7	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  001cd	3b ec		 cmp	 ebp, esp
  001cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c3		 ret	 0
$LN5@Orthograph:
  001d8	01 00 00 00	 DD	 1
  001dc	00 00 00 00	 DD	 $LN4@Orthograph
$LN4@Orthograph:
  001e0	b8 ff ff ff	 DD	 -72			; ffffffb8H
  001e4	40 00 00 00	 DD	 64			; 00000040H
  001e8	00 00 00 00	 DD	 $LN3@Orthograph
$LN3@Orthograph:
  001ec	72		 DB	 114			; 00000072H
  001ed	65		 DB	 101			; 00000065H
  001ee	73		 DB	 115			; 00000073H
  001ef	75		 DB	 117			; 00000075H
  001f0	6c		 DB	 108			; 0000006cH
  001f1	74		 DB	 116			; 00000074H
  001f2	00		 DB	 0
?Orthographic@Mat4f@Math@Engine@@SA?AV123@MMMMMM@Z ENDP	; Engine::Math::Mat4f::Orthographic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ??DMath@Engine@@YA?AVMat4f@01@AAV201@ABV201@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
??DMath@Engine@@YA?AVMat4f@01@AAV201@ABV201@@Z PROC	; Engine::Math::operator*, COMDAT

; 78   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 79   : 			//todo: fix ... it currently modifies left
; 80   : 			return left.multiply(right);

  0001e	8b 45 10	 mov	 eax, DWORD PTR _right$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _left$[ebp]
  00025	e8 00 00 00 00	 call	 ?multiply@Mat4f@Math@Engine@@QAEAAV123@ABV123@@Z ; Engine::Math::Mat4f::multiply
  0002a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002f	8b f0		 mov	 esi, eax
  00031	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00034	f3 a5		 rep movsd
  00036	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 81   : 		}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??DMath@Engine@@YA?AVMat4f@01@AAV201@ABV201@@Z ENDP	; Engine::Math::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ??XMat4f@Math@Engine@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_matrix$ = 8						; size = 4
??XMat4f@Math@Engine@@QAEAAV012@ABV012@@Z PROC		; Engine::Math::Mat4f::operator*=, COMDAT
; _this$ = ecx

; 74   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 			return multiply(matrix);

  00023	8b 45 08	 mov	 eax, DWORD PTR _matrix$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?multiply@Mat4f@Math@Engine@@QAEAAV123@ABV123@@Z ; Engine::Math::Mat4f::multiply

; 76   : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??XMat4f@Math@Engine@@QAEAAV012@ABV012@@Z ENDP		; Engine::Math::Mat4f::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?multiply@Mat4f@Math@Engine@@QAEAAV123@ABV123@@Z
_TEXT	SEGMENT
tv89 = -320						; size = 4
_element$1 = -120					; size = 4
_row$2 = -108						; size = 4
_column$3 = -96						; size = 4
_result$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_matrix$ = 8						; size = 4
?multiply@Mat4f@Math@Engine@@QAEAAV123@ABV123@@Z PROC	; Engine::Math::Mat4f::multiply, COMDAT
; _this$ = ecx

; 54   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-320]
  00013	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 			Mat4f result;

  0002d	8d 4d ac	 lea	 ecx, DWORD PTR _result$[ebp]
  00030	e8 00 00 00 00	 call	 ??0Mat4f@Math@Engine@@AAE@XZ ; Engine::Math::Mat4f::Mat4f

; 56   : 			for (int column = 0; column < MAT4F_DIMINSION; column++)

  00035	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _column$3[ebp], 0
  0003c	eb 09		 jmp	 SHORT $LN4@multiply
$LN2@multiply:
  0003e	8b 45 a0	 mov	 eax, DWORD PTR _column$3[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 a0	 mov	 DWORD PTR _column$3[ebp], eax
$LN4@multiply:
  00047	83 7d a0 04	 cmp	 DWORD PTR _column$3[ebp], 4
  0004b	0f 8d 96 00 00
	00		 jge	 $LN3@multiply

; 57   : 			{
; 58   : 				for (int row = 0; row < MAT4F_DIMINSION; row++)

  00051	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _row$2[ebp], 0
  00058	eb 09		 jmp	 SHORT $LN7@multiply
$LN5@multiply:
  0005a	8b 45 94	 mov	 eax, DWORD PTR _row$2[ebp]
  0005d	83 c0 01	 add	 eax, 1
  00060	89 45 94	 mov	 DWORD PTR _row$2[ebp], eax
$LN7@multiply:
  00063	83 7d 94 04	 cmp	 DWORD PTR _row$2[ebp], 4
  00067	7d 79		 jge	 SHORT $LN6@multiply

; 59   : 				{
; 60   : 					for (int element = 0; element < MAT4F_DIMINSION; element++)

  00069	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _element$1[ebp], 0
  00070	eb 09		 jmp	 SHORT $LN10@multiply
$LN8@multiply:
  00072	8b 45 88	 mov	 eax, DWORD PTR _element$1[ebp]
  00075	83 c0 01	 add	 eax, 1
  00078	89 45 88	 mov	 DWORD PTR _element$1[ebp], eax
$LN10@multiply:
  0007b	83 7d 88 04	 cmp	 DWORD PTR _element$1[ebp], 4
  0007f	7d 5c		 jge	 SHORT $LN9@multiply

; 61   : 					{
; 62   : 						result.m_Matrix[column + row * MAT4F_DIMINSION] +=

  00081	8b 45 94	 mov	 eax, DWORD PTR _row$2[ebp]
  00084	8b 4d a0	 mov	 ecx, DWORD PTR _column$3[ebp]
  00087	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0008a	52		 push	 edx
  0008b	8d 4d ac	 lea	 ecx, DWORD PTR _result$[ebp]
  0008e	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00093	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  00099	8b 45 88	 mov	 eax, DWORD PTR _element$1[ebp]
  0009c	8b 4d a0	 mov	 ecx, DWORD PTR _column$3[ebp]
  0009f	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000a2	52		 push	 edx
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  000ab	8b f0		 mov	 esi, eax
  000ad	8b 45 94	 mov	 eax, DWORD PTR _row$2[ebp]
  000b0	8b 4d 88	 mov	 ecx, DWORD PTR _element$1[ebp]
  000b3	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000b6	52		 push	 edx
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _matrix$[ebp]
  000ba	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QBEABMI@Z ; std::array<float,16>::operator[]
  000bf	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000c3	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  000c7	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000cd	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  000d1	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv89[ebp]
  000d7	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 63   : 							m_Matrix[column + element * MAT4F_DIMINSION] * matrix.m_Matrix[element + row * MAT4F_DIMINSION];
; 64   : 					}

  000db	eb 95		 jmp	 SHORT $LN8@multiply
$LN9@multiply:

; 65   : 				}

  000dd	e9 78 ff ff ff	 jmp	 $LN5@multiply
$LN6@multiply:

; 66   : 			}

  000e2	e9 57 ff ff ff	 jmp	 $LN2@multiply
$LN3@multiply:

; 67   : 
; 68   : 			m_Matrix.swap(result.m_Matrix);

  000e7	8d 45 ac	 lea	 eax, DWORD PTR _result$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	e8 00 00 00 00	 call	 ?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z ; std::array<float,16>::swap

; 69   : 			return *this;

  000f3	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]

; 70   : 		} 

  000f6	52		 push	 edx
  000f7	8b cd		 mov	 ecx, ebp
  000f9	50		 push	 eax
  000fa	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@multiply
  00100	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00105	58		 pop	 eax
  00106	5a		 pop	 edx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	33 cd		 xor	 ecx, ebp
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	81 c4 40 01 00
	00		 add	 esp, 320		; 00000140H
  0011a	3b ec		 cmp	 ebp, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
  00127	90		 npad	 1
$LN14@multiply:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN13@multiply
$LN13@multiply:
  00130	ac ff ff ff	 DD	 -84			; ffffffacH
  00134	40 00 00 00	 DD	 64			; 00000040H
  00138	00 00 00 00	 DD	 $LN12@multiply
$LN12@multiply:
  0013c	72		 DB	 114			; 00000072H
  0013d	65		 DB	 101			; 00000065H
  0013e	73		 DB	 115			; 00000073H
  0013f	75		 DB	 117			; 00000075H
  00140	6c		 DB	 108			; 0000006cH
  00141	74		 DB	 116			; 00000074H
  00142	00		 DB	 0
?multiply@Mat4f@Math@Engine@@QAEAAV123@ABV123@@Z ENDP	; Engine::Math::Mat4f::multiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?rotate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@ABM@Z
_TEXT	SEGMENT
tv208 = -356						; size = 4
tv206 = -356						; size = 4
tv204 = -356						; size = 4
tv202 = -356						; size = 4
tv200 = -356						; size = 4
tv198 = -356						; size = 4
tv196 = -356						; size = 4
tv194 = -356						; size = 4
tv192 = -356						; size = 4
_z$ = -156						; size = 4
_y$ = -144						; size = 4
_x$ = -132						; size = 4
_cosInv$ = -120						; size = 4
_sinResult$ = -108					; size = 4
_cosResult$ = -96					; size = 4
_radians$ = -84						; size = 4
_result$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_axis$ = 12						; size = 4
_angle$ = 16						; size = 4
?rotate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@ABM@Z PROC ; Engine::Math::Mat4f::rotate, COMDAT

; 26   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00012	b9 59 00 00 00	 mov	 ecx, 89			; 00000059H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 27   : 			Mat4f result = Identity();

  00028	8d 45 b8	 lea	 eax, DWORD PTR _result$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?Identity@Mat4f@Math@Engine@@SA?AV123@XZ ; Engine::Math::Mat4f::Identity
  00031	83 c4 04	 add	 esp, 4

; 28   : 			float radians = toRadians(angle);

  00034	8b 45 10	 mov	 eax, DWORD PTR _angle$[ebp]
  00037	51		 push	 ecx
  00038	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	e8 00 00 00 00	 call	 ?toRadians@Math@Engine@@YAMM@Z ; Engine::Math::toRadians
  00046	83 c4 04	 add	 esp, 4
  00049	d9 5d ac	 fstp	 DWORD PTR _radians$[ebp]

; 29   : 			float cosResult = std::cos(radians);

  0004c	51		 push	 ecx
  0004d	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _radians$[ebp]
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  0005c	83 c4 04	 add	 esp, 4
  0005f	d9 5d a0	 fstp	 DWORD PTR _cosResult$[ebp]

; 30   : 			float sinResult = std::sin(radians);

  00062	51		 push	 ecx
  00063	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _radians$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00072	83 c4 04	 add	 esp, 4
  00075	d9 5d 94	 fstp	 DWORD PTR _sinResult$[ebp]

; 31   : 			float cosInv = 1.0f - cosResult;

  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00080	f3 0f 5c 45 a0	 subss	 xmm0, DWORD PTR _cosResult$[ebp]
  00085	f3 0f 11 45 88	 movss	 DWORD PTR _cosInv$[ebp], xmm0

; 32   : 
; 33   : 			float x = axis.m_X;

  0008a	8b 45 0c	 mov	 eax, DWORD PTR _axis$[ebp]
  0008d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00091	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x$[ebp], xmm0

; 34   : 			float y = axis.m_Y;

  00099	8b 45 0c	 mov	 eax, DWORD PTR _axis$[ebp]
  0009c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000a1	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 35   : 			float z = axis.m_Z;

  000a9	8b 45 0c	 mov	 eax, DWORD PTR _axis$[ebp]
  000ac	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000b1	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _z$[ebp], xmm0

; 36   : 
; 37   : 			//first column
; 38   : 			result.m_Matrix[0 + 0 * 4] = x * cosInv + cosResult;

  000b9	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$[ebp]
  000c1	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _cosInv$[ebp]
  000c6	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _cosResult$[ebp]
  000cb	6a 00		 push	 0
  000cd	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  000d0	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv192[ebp], xmm0
  000d8	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  000dd	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv192[ebp]
  000e5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 39   : 			result.m_Matrix[1 + 0 * 4] = sinResult * z;

  000e9	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _sinResult$[ebp]
  000ee	f3 0f 59 85 64
	ff ff ff	 mulss	 xmm0, DWORD PTR _z$[ebp]
  000f6	6a 01		 push	 1
  000f8	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  000fb	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv194[ebp], xmm0
  00103	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00108	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv194[ebp]
  00110	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 40   : 			result.m_Matrix[2 + 0 * 4] = -sinResult * y;

  00114	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _sinResult$[ebp]
  00119	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00120	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _y$[ebp]
  00128	6a 02		 push	 2
  0012a	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0012d	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv196[ebp], xmm0
  00135	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0013a	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv196[ebp]
  00142	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 41   : 			//second column
; 42   : 			result.m_Matrix[0 + 1 * 4] = -sinResult * z;

  00146	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _sinResult$[ebp]
  0014b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00152	f3 0f 59 85 64
	ff ff ff	 mulss	 xmm0, DWORD PTR _z$[ebp]
  0015a	6a 04		 push	 4
  0015c	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0015f	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv198[ebp], xmm0
  00167	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0016c	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv198[ebp]
  00174	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 43   : 			result.m_Matrix[1 + 1 * 4] = y * cosInv + cosResult;

  00178	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  00180	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _cosInv$[ebp]
  00185	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _cosResult$[ebp]
  0018a	6a 05		 push	 5
  0018c	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0018f	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv200[ebp], xmm0
  00197	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0019c	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv200[ebp]
  001a4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 44   : 			result.m_Matrix[2 + 1 * 4] = sinResult * x;

  001a8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _sinResult$[ebp]
  001ad	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _x$[ebp]
  001b5	6a 06		 push	 6
  001b7	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  001ba	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv202[ebp], xmm0
  001c2	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  001c7	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv202[ebp]
  001cf	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 45   : 			//third column
; 46   : 			result.m_Matrix[0 + 2 * 4] = sinResult * y;

  001d3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _sinResult$[ebp]
  001d8	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _y$[ebp]
  001e0	6a 08		 push	 8
  001e2	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  001e5	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv204[ebp], xmm0
  001ed	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  001f2	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv204[ebp]
  001fa	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 47   : 			result.m_Matrix[1 + 2 * 4] = -sinResult * x;

  001fe	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _sinResult$[ebp]
  00203	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0020a	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00212	6a 09		 push	 9
  00214	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00217	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv206[ebp], xmm0
  0021f	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00224	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv206[ebp]
  0022c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 48   : 			result.m_Matrix[2 + 2 * 4] = z * cosInv + cosResult;	

  00230	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _z$[ebp]
  00238	f3 0f 59 45 88	 mulss	 xmm0, DWORD PTR _cosInv$[ebp]
  0023d	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _cosResult$[ebp]
  00242	6a 0a		 push	 10			; 0000000aH
  00244	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00247	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR tv208[ebp], xmm0
  0024f	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00254	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR tv208[ebp]
  0025c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 49   : 
; 50   : 			return result;

  00260	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00265	8d 75 b8	 lea	 esi, DWORD PTR _result$[ebp]
  00268	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0026b	f3 a5		 rep movsd
  0026d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 51   : 		}

  00270	52		 push	 edx
  00271	8b cd		 mov	 ecx, ebp
  00273	50		 push	 eax
  00274	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@rotate
  0027a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0027f	58		 pop	 eax
  00280	5a		 pop	 edx
  00281	5f		 pop	 edi
  00282	5e		 pop	 esi
  00283	5b		 pop	 ebx
  00284	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00287	33 cd		 xor	 ecx, ebp
  00289	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028e	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00294	3b ec		 cmp	 ebp, esp
  00296	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c3		 ret	 0
  0029f	90		 npad	 1
$LN5@rotate:
  002a0	01 00 00 00	 DD	 1
  002a4	00 00 00 00	 DD	 $LN4@rotate
$LN4@rotate:
  002a8	b8 ff ff ff	 DD	 -72			; ffffffb8H
  002ac	40 00 00 00	 DD	 64			; 00000040H
  002b0	00 00 00 00	 DD	 $LN3@rotate
$LN3@rotate:
  002b4	72		 DB	 114			; 00000072H
  002b5	65		 DB	 101			; 00000065H
  002b6	73		 DB	 115			; 00000073H
  002b7	75		 DB	 117			; 00000075H
  002b8	6c		 DB	 108			; 0000006cH
  002b9	74		 DB	 116			; 00000074H
  002ba	00		 DB	 0
?rotate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@ABM@Z ENDP ; Engine::Math::Mat4f::rotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?translate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@@Z
_TEXT	SEGMENT
_result$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_vector$ = 12						; size = 4
?translate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@@Z PROC ; Engine::Math::Mat4f::translate, COMDAT

; 17   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 18   : 			Mat4f result = Identity();

  00028	8d 45 b8	 lea	 eax, DWORD PTR _result$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?Identity@Mat4f@Math@Engine@@SA?AV123@XZ ; Engine::Math::Mat4f::Identity
  00031	83 c4 04	 add	 esp, 4

; 19   : 			result.m_Matrix[0 + 3 * 4] = vector.m_X;

  00034	6a 0c		 push	 12			; 0000000cH
  00036	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00039	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _vector$[ebp]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	89 10		 mov	 DWORD PTR [eax], edx

; 20   : 			result.m_Matrix[1 + 3 * 4] = vector.m_Y;

  00045	6a 0d		 push	 13			; 0000000dH
  00047	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0004a	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _vector$[ebp]
  00052	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00055	89 10		 mov	 DWORD PTR [eax], edx

; 21   : 			result.m_Matrix[2 + 3 * 4] = vector.m_Z;

  00057	6a 0e		 push	 14			; 0000000eH
  00059	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0005c	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _vector$[ebp]
  00064	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00067	89 10		 mov	 DWORD PTR [eax], edx

; 22   : 			return result;

  00069	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006e	8d 75 b8	 lea	 esi, DWORD PTR _result$[ebp]
  00071	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00074	f3 a5		 rep movsd
  00076	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 23   : 		}

  00079	52		 push	 edx
  0007a	8b cd		 mov	 ecx, ebp
  0007c	50		 push	 eax
  0007d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@translate
  00083	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00088	58		 pop	 eax
  00089	5a		 pop	 edx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN5@translate:
  000a8	01 00 00 00	 DD	 1
  000ac	00 00 00 00	 DD	 $LN4@translate
$LN4@translate:
  000b0	b8 ff ff ff	 DD	 -72			; ffffffb8H
  000b4	40 00 00 00	 DD	 64			; 00000040H
  000b8	00 00 00 00	 DD	 $LN3@translate
$LN3@translate:
  000bc	72		 DB	 114			; 00000072H
  000bd	65		 DB	 101			; 00000065H
  000be	73		 DB	 115			; 00000073H
  000bf	75		 DB	 117			; 00000075H
  000c0	6c		 DB	 108			; 0000006cH
  000c1	74		 DB	 116			; 00000074H
  000c2	00		 DB	 0
?translate@Mat4f@Math@Engine@@SA?AV123@ABUVec3f@23@@Z ENDP ; Engine::Math::Mat4f::translate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?Identity@Mat4f@Math@Engine@@SA?AV123@XZ
_TEXT	SEGMENT
_result$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?Identity@Mat4f@Math@Engine@@SA?AV123@XZ PROC		; Engine::Math::Mat4f::Identity, COMDAT

; 7    : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 8    : 			Mat4f result;

  00028	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0Mat4f@Math@Engine@@AAE@XZ ; Engine::Math::Mat4f::Mat4f

; 9    : 			result.m_Matrix[0 + 0 * 4] = 1;

  00030	6a 00		 push	 0
  00032	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00035	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00042	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 10   : 			result.m_Matrix[1 + 1 * 4] = 1;

  00046	6a 05		 push	 5
  00048	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  0004b	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00058	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 11   : 			result.m_Matrix[2 + 2 * 4] = 1;

  0005c	6a 0a		 push	 10			; 0000000aH
  0005e	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00061	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  00066	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 12   : 			result.m_Matrix[3 + 3 * 4] = 1;

  00072	6a 0f		 push	 15			; 0000000fH
  00074	8d 4d b8	 lea	 ecx, DWORD PTR _result$[ebp]
  00077	e8 00 00 00 00	 call	 ??A?$array@M$0BA@@std@@QAEAAMI@Z ; std::array<float,16>::operator[]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 13   : 			return result;

  00088	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008d	8d 75 b8	 lea	 esi, DWORD PTR _result$[ebp]
  00090	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00093	f3 a5		 rep movsd
  00095	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 14   : 		}

  00098	52		 push	 edx
  00099	8b cd		 mov	 ecx, ebp
  0009b	50		 push	 eax
  0009c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Identity
  000a2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a7	58		 pop	 eax
  000a8	5a		 pop	 edx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000af	33 cd		 xor	 ecx, ebp
  000b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b6	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000bc	3b ec		 cmp	 ebp, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
  000c7	90		 npad	 1
$LN5@Identity:
  000c8	01 00 00 00	 DD	 1
  000cc	00 00 00 00	 DD	 $LN4@Identity
$LN4@Identity:
  000d0	b8 ff ff ff	 DD	 -72			; ffffffb8H
  000d4	40 00 00 00	 DD	 64			; 00000040H
  000d8	00 00 00 00	 DD	 $LN3@Identity
$LN3@Identity:
  000dc	72		 DB	 114			; 00000072H
  000dd	65		 DB	 101			; 00000065H
  000de	73		 DB	 115			; 00000073H
  000df	75		 DB	 117			; 00000075H
  000e0	6c		 DB	 108			; 0000006cH
  000e1	74		 DB	 116			; 00000074H
  000e2	00		 DB	 0
?Identity@Mat4f@Math@Engine@@SA?AV123@XZ ENDP		; Engine::Math::Mat4f::Identity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.h
;	COMDAT ??0Mat4f@Math@Engine@@AAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??0Mat4f@Math@Engine@@AAE@XZ PROC			; Engine::Math::Mat4f::Mat4f, COMDAT
; _this$ = ecx

; 23   : 			inline Mat4f() { m_Matrix.fill(0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	0f 57 c0	 xorps	 xmm0, xmm0
  00029	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00038	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	0f 57 c0	 xorps	 xmm0, xmm0
  0003e	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	0f 57 c0	 xorps	 xmm0, xmm0
  00049	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0
  00059	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0
  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	0f 57 c0	 xorps	 xmm0, xmm0
  0006a	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0
  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	0f 57 c0	 xorps	 xmm0, xmm0
  00075	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0
  0007a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	0f 57 c0	 xorps	 xmm0, xmm0
  00080	f3 0f 11 42 20	 movss	 DWORD PTR [edx+32], xmm0
  00085	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0
  0009b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	0f 57 c0	 xorps	 xmm0, xmm0
  000a1	f3 0f 11 42 2c	 movss	 DWORD PTR [edx+44], xmm0
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	0f 57 c0	 xorps	 xmm0, xmm0
  000ac	f3 0f 11 40 30	 movss	 DWORD PTR [eax+48], xmm0
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 41 34	 movss	 DWORD PTR [ecx+52], xmm0
  000bc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000bf	0f 57 c0	 xorps	 xmm0, xmm0
  000c2	f3 0f 11 42 38	 movss	 DWORD PTR [edx+56], xmm0
  000c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	0f 57 c0	 xorps	 xmm0, xmm0
  000cd	f3 0f 11 40 3c	 movss	 DWORD PTR [eax+60], xmm0
  000d2	0f 57 c0	 xorps	 xmm0, xmm0
  000d5	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  000dd	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000e3	50		 push	 eax
  000e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	e8 00 00 00 00	 call	 ?fill@?$array@M$0BA@@std@@QAEXABM@Z ; std::array<float,16>::fill
  000ec	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000f8	3b ec		 cmp	 ebp, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
??0Mat4f@Math@Engine@@AAE@XZ ENDP			; Engine::Math::Mat4f::Mat4f
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\array
;	COMDAT ??A?$array@M$0BA@@std@@QBEABMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$array@M$0BA@@std@@QBEABMI@Z PROC			; std::array<float,16>::operator[], COMDAT
; _this$ = ecx

; 185  : 		{	// subscript nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 186  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 187  : 		if (_Size <= _Pos)

  00023	83 7d 08 10	 cmp	 DWORD PTR __Pos$[ebp], 16 ; 00000010H
  00027	72 3f		 jb	 SHORT $LN2@operator

; 188  : 			{
; 189  : 			_DEBUG_ERROR("array subscript out of range");

  00029	68 bd 00 00 00	 push	 189			; 000000bdH
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@DNICNODO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@PHOIHFMC@?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  00038	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	8b f4		 mov	 esi, esp
  00042	6a 00		 push	 0
  00044	68 bd 00 00 00	 push	 189			; 000000bdH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@DNICNODO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@PHAGCLKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AA1?$AA6?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$FL@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@NCBLADDF@?$AA?$CC?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 190  : 			}
; 191  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 192  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < _Size);
; 193  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 194  : 
; 195  : 		return (_Elems[_Pos]);

  00068	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 196  : 		}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
??A?$array@M$0BA@@std@@QBEABMI@Z ENDP			; std::array<float,16>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\array
;	COMDAT ??A?$array@M$0BA@@std@@QAEAAMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$array@M$0BA@@std@@QAEAAMI@Z PROC			; std::array<float,16>::operator[], COMDAT
; _this$ = ecx

; 171  : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 172  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 173  : 		if (_Size <= _Pos)

  00023	83 7d 08 10	 cmp	 DWORD PTR __Pos$[ebp], 16 ; 00000010H
  00027	72 3f		 jb	 SHORT $LN2@operator

; 174  : 			{
; 175  : 			_DEBUG_ERROR("array subscript out of range");

  00029	68 af 00 00 00	 push	 175			; 000000afH
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@DNICNODO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@PHOIHFMC@?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  00038	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	8b f4		 mov	 esi, esp
  00042	6a 00		 push	 0
  00044	68 af 00 00 00	 push	 175			; 000000afH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@DNICNODO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@PHAGCLKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AA1?$AA6?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$FL@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@NCBLADDF@?$AA?$CC?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 176  : 			}
; 177  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 178  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < _Size);
; 179  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 180  : 
; 181  : 		return (_Elems[_Pos]);

  00068	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 182  : 		}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
??A?$array@M$0BA@@std@@QAEAAMI@Z ENDP			; std::array<float,16>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\array
;	COMDAT ?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z PROC		; std::array<float,16>::swap, COMDAT
; _this$ = ecx

; 51   : 		{	// swap contents with _Other

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 		_Swap_ranges_unchecked(_Elems, _Elems + _Size, _Other._Elems);

  00042	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 40	 add	 ecx, 64			; 00000040H
  0004c	51		 push	 ecx
  0004d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ??$_Swap_ranges_unchecked@PAMPAM@std@@YAPAMPAM00@Z ; std::_Swap_ranges_unchecked<float *,float *>
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 53   : 		}

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?swap@?$array@M$0BA@@std@@QAEXAAV12@@Z ENDP		; std::array<float,16>::swap
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\array
;	COMDAT ?fill@?$array@M$0BA@@std@@QAEXABM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Value$ = 8						; size = 4
?fill@?$array@M$0BA@@std@@QAEXABM@Z PROC		; std::array<float,16>::fill, COMDAT
; _this$ = ecx

; 45   : 		{	// assign value to all elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 		_Fill_n_unchecked(_Elems, _Size, _Value);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Value$[ebp]
  00026	50		 push	 eax
  00027	6a 10		 push	 16			; 00000010H
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ??$_Fill_n_unchecked@PAMIM@std@@YAPAMPAMIABM@Z ; std::_Fill_n_unchecked<float *,unsigned int,float>
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?fill@?$array@M$0BA@@std@@QAEXABM@Z ENDP		; std::array<float,16>::fill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mathfunctions.h
;	COMDAT ?toRadians@Math@Engine@@YAMM@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
_angle$ = 8						; size = 4
?toRadians@Math@Engine@@YAMM@Z PROC			; Engine::Math::toRadians, COMDAT

; 9    : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 10   : 			return ((float) PI  * angle) / 180;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00026	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _angle$[ebp]
  0002b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43340000
  00033	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv68[ebp], xmm0
  0003b	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv68[ebp]

; 11   : 		}

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?toRadians@Math@Engine@@YAMM@Z ENDP			; Engine::Math::toRadians
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\cmath
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 297  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 298  : 	return (_CSTD tanf(_Xx));

  0001e	51		 push	 ecx
  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	e8 00 00 00 00	 call	 _tanf
  0002e	83 c4 04	 add	 esp, 4

; 299  : 	}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 282  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 283  : 	return (_CSTD sinf(_Xx));

  0001e	51		 push	 ecx
  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	e8 00 00 00 00	 call	 _sinf
  0002e	83 c4 04	 add	 esp, 4

; 284  : 	}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 75   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 76   : 	return (_CSTD cosf(_Xx));

  0001e	51		 push	 ecx
  0001f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	e8 00 00 00 00	 call	 _cosf
  0002e	83 c4 04	 add	 esp, 4

; 77   : 	}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 763  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 764  :             return (float)tan(_X);

  0001e	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00023	83 ec 08	 sub	 esp, 8
  00026	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002b	e8 00 00 00 00	 call	 _tan
  00030	83 c4 08	 add	 esp, 8
  00033	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv71[ebp]
  00039	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv71[ebp]

; 765  :         }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 748  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 749  :             return (float)sin(_X);

  0001e	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00023	83 ec 08	 sub	 esp, 8
  00026	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002b	e8 00 00 00 00	 call	 _sin
  00030	83 c4 08	 add	 esp, 8
  00033	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv71[ebp]
  00039	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv71[ebp]

; 750  :         }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 647  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 648  :             return (float)cos(_X);

  0001e	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00023	83 ec 08	 sub	 esp, 8
  00026	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002b	e8 00 00 00 00	 call	 _cos
  00030	83 c4 08	 add	 esp, 8
  00033	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv71[ebp]
  00039	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv71[ebp]

; 649  :         }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
