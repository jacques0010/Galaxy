; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Repos\Galaxy\Galaxy\Engine\Shaders\Shader.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?_Hash_bytes@std@@YAIPBEI@Z			; std::_Hash_bytes
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Deallocate@std@@YAXPAXIII@Z			; std::_Deallocate
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0?$tuple@$$V@std@@QAE@XZ			; std::tuple<>::tuple<>
PUBLIC	?data@?$array@M$0BA@@std@@QAEPAMXZ		; std::array<float,16>::data
PUBLIC	?getMatrixAsArray@Mat4f@Math@Engine@@QAEPAMXZ	; Engine::Math::Mat4f::getMatrixAsArray
PUBLIC	??0?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAE@U?$hash@PBD@1@U?$equal_to@PBD@1@@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >
PUBLIC	??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEIABQBD@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
PUBLIC	??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBE_NABQBD0@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
PUBLIC	?_Gethash@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$hash@PBD@2@XZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Gethash
PUBLIC	?_Getkeyeq@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$equal_to@PBD@2@XZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Getkeyeq
PUBLIC	?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAEAAMXZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size
PUBLIC	?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABMXZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size
PUBLIC	??R?$equal_to@PBD@std@@QBE_NABQBD0@Z		; std::equal_to<char const *>::operator()
PUBLIC	??R?$_Conditionally_enabled_hash@PBD$00@std@@QBEIABQBD@Z ; std::_Conditionally_enabled_hash<char const *,1>::operator()
PUBLIC	?_Do_hash@?$hash@PBD@std@@SAIABQBD@Z		; std::hash<char const *>::_Do_hash
PUBLIC	?_Get_first@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABU?$equal_to@PBD@2@XZ ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAEAAMXZ ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABMXZ ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second
PUBLIC	?_Get_first@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABU?$hash@PBD@2@XZ ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second
PUBLIC	??0?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>
PUBLIC	??0?$allocator@U?$pair@QBDH@std@@@std@@QAE@XZ	; std::allocator<std::pair<char const * const,int> >::allocator<std::pair<char const * const,int> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::max_size
PUBLIC	??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::~_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >
PUBLIC	?_Alloc_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getpfirst
PUBLIC	?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
PUBLIC	?_Buyheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buyheadnode
PUBLIC	?_Freeheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Freeheadnode
PUBLIC	?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buynode0
PUBLIC	?_Orphan_all@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Orphan_all
PUBLIC	?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
PUBLIC	?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
PUBLIC	?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
PUBLIC	?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
PUBLIC	?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
PUBLIC	?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
PUBLIC	?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABIXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
PUBLIC	??0?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >
PUBLIC	??1?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >::~_List_val<std::_List_simple_types<std::pair<char const * const,int> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::~_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>
PUBLIC	?_Freenode@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Freenode
PUBLIC	??1?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
PUBLIC	??0?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
PUBLIC	??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
PUBLIC	?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::begin
PUBLIC	?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::end
PUBLIC	?_Unchecked_begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_end
PUBLIC	?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter
PUBLIC	?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter
PUBLIC	?size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::size
PUBLIC	?max_size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::max_size
PUBLIC	?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::front
PUBLIC	?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unlinknode
PUBLIC	?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::erase
PUBLIC	?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::clear
PUBLIC	?_Unchecked_splice@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@00@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_splice
PUBLIC	?_Tidy@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Tidy
PUBLIC	?_Incsize@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXI@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Incsize
PUBLIC	?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Orphan_ptr
PUBLIC	??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >
PUBLIC	?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
PUBLIC	?_Unchecked_begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
PUBLIC	?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
PUBLIC	?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
PUBLIC	?size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::size
PUBLIC	?bucket_count@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::bucket_count
PUBLIC	?load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::load_factor
PUBLIC	?max_load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::max_load_factor
PUBLIC	?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase
PUBLIC	?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
PUBLIC	?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::lower_bound
PUBLIC	?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Destroy_if_node
PUBLIC	?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
PUBLIC	?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
PUBLIC	?_Begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Begin
PUBLIC	?_End@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_End
PUBLIC	?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Erase_bucket
PUBLIC	?_Insert_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert_bucket
PUBLIC	?_Hashval@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEIABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hashval
PUBLIC	?_Init@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXI@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Init
PUBLIC	?_Check_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Check_size
PUBLIC	?_Reinsert@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Reinsert
PUBLIC	?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size
PUBLIC	?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEABMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size
PUBLIC	?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::deallocate
PUBLIC	?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::~_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Free_proxy
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::~_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>
PUBLIC	??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::assign
PUBLIC	?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Reallocate_exactly
PUBLIC	?reserve@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXI@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::reserve
PUBLIC	?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::size
PUBLIC	?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
PUBLIC	?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity
PUBLIC	??A?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@I@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::operator[]
PUBLIC	?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@PAV32@IABV32@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Ufill
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@ABEII@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Calculate_growth
PUBLIC	?_Buy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAE_NI@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Buy
PUBLIC	?_Change_array@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@II@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Change_array
PUBLIC	?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Xlength
PUBLIC	??1?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::~_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >
PUBLIC	??0?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >
PUBLIC	??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
PUBLIC	?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
PUBLIC	??1?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::~unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >
PUBLIC	??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; Engine::Graphics::Shader::Shader
PUBLIC	??1Shader@Graphics@Engine@@QAE@XZ		; Engine::Graphics::Shader::~Shader
PUBLIC	?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z ; Engine::Graphics::Shader::setUniform1i
PUBLIC	?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z ; Engine::Graphics::Shader::setUniform1f
PUBLIC	?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z ; Engine::Graphics::Shader::setUniform2f
PUBLIC	?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z ; Engine::Graphics::Shader::setUniform3f
PUBLIC	?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z ; Engine::Graphics::Shader::setUniform4f
PUBLIC	?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z ; Engine::Graphics::Shader::setUniformMat4
PUBLIC	?bind@Shader@Graphics@Engine@@QAEXXZ		; Engine::Graphics::Shader::bind
PUBLIC	?unbind@Shader@Graphics@Engine@@QAEXXZ		; Engine::Graphics::Shader::unbind
PUBLIC	?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Engine::Graphics::Shader::compileSource
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
PUBLIC	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
PUBLIC	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	?__autoclassinit2@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
PUBLIC	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPAU?$pair@QBDH@1@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator->
PUBLIC	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::~_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	?__autoclassinit2@?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$try_emplace@$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::try_emplace<>
PUBLIC	??1?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::~pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@QBDH@std@@@std@@SAPAU?$pair@QBDH@2@AAU32@@Z ; std::pointer_traits<std::pair<char const * const,int> *>::pointer_to
PUBLIC	??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>
PUBLIC	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDH@1@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator*
PUBLIC	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator--
PUBLIC	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
PUBLIC	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
PUBLIC	??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
PUBLIC	??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator--
PUBLIC	?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2
PUBLIC	??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
PUBLIC	??$?0U?$pair@QBDH@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > ><std::pair<char const * const,int> >
PUBLIC	??$?0AAU?$hash@PBD@std@@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@M@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$hash@PBD@1@$$QAU21@AAU?$equal_to@PBD@1@$$QAM@Z ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1><std::hash<char const *> &,std::_One_then_variadic_args_t,std::equal_to<char const *> &,float>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
PUBLIC	??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Destroy_range@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > ><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &,void>
PUBLIC	??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_List_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >
PUBLIC	??$?0U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<std::pair<char const * const,int>,void *> >
PUBLIC	??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > ><std::allocator<std::pair<char const * const,int> > const &,void>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$_Fill_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@@Z ; std::_Fill_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
PUBLIC	??$addressof@$$CBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > const >
PUBLIC	??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Uninitialized_fill_n<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??$_Hash_representation@PBD@std@@YAIABQBD@Z	; std::_Hash_representation<char const *>
PUBLIC	??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
PUBLIC	??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
PUBLIC	??$forward@AAU?$hash@PBD@std@@@std@@YAAAU?$hash@PBD@0@AAU10@@Z ; std::forward<std::hash<char const *> &>
PUBLIC	??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_One_then_variadic_args_t>
PUBLIC	??$forward@AAU?$equal_to@PBD@std@@@std@@YAAAU?$equal_to@PBD@0@AAU10@@Z ; std::forward<std::equal_to<char const *> &>
PUBLIC	??$forward@M@std@@YA$$QAMAAM@Z			; std::forward<float>
PUBLIC	??$?0AAU?$equal_to@PBD@std@@M@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@$$QAM@Z ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Compressed_pair<std::equal_to<char const *>,float,1><std::equal_to<char const *> &,float>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
PUBLIC	?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ; std::_Default_allocate_traits<1>::_Get_bytes
PUBLIC	??$_Destroy_range1@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??$forward@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>
PUBLIC	??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>
PUBLIC	??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$destroy@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::_List_node<std::pair<char const * const,int>,void *> *>
PUBLIC	??$forward@ABV?$allocator@U?$pair@QBDH@std@@@std@@@std@@YAABV?$allocator@U?$pair@QBDH@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::pair<char const * const,int> > const &>
PUBLIC	??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > ><std::allocator<std::pair<char const * const,int> > const &,void>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Fill_memset_is_safe@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV20@@Z ; std::_Fill_memset_is_safe<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$_Fill_unchecked1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Fill_unchecked1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$_Unfancy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Uninit_alloc_fill_n1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ; std::_Unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
PUBLIC	??$_Ptr_move_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Trivially_copyable_ptr_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0@Z ; std::_Ptr_move_cat<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$move@AAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
PUBLIC	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
PUBLIC	??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >
PUBLIC	??$forward@ABQBD@std@@YAABQBDABQBD@Z		; std::forward<char const * const &>
PUBLIC	??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ; std::forward_as_tuple<char const * const &>
PUBLIC	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
PUBLIC	??$emplace@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::emplace<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$?0AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &,bool,0>
PUBLIC	??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1><std::allocator<std::pair<char const * const,int> > const &>
PUBLIC	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>
PUBLIC	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$construct@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::_List_node<std::pair<char const * const,int>,void *> *,std::_List_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
PUBLIC	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
PUBLIC	??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
PUBLIC	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
PUBLIC	??$emplace_front@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::emplace_front<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$_Insert@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Insert<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert<std::pair<char const * const,int> &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$forward@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAAAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$?0U?$pair@QBDH@std@@@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocator<std::_List_node<std::pair<char const * const,int>,void *> ><std::pair<char const * const,int> >
PUBLIC	??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV10@@Z ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>
PUBLIC	??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$forward@AAPAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<std::pair<char const * const,int>,void *> * &>
PUBLIC	??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
PUBLIC	??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$?0V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool,0>
PUBLIC	??$forward@AAU?$pair@QBDH@std@@@std@@YAAAU?$pair@QBDH@0@AAU10@@Z ; std::forward<std::pair<char const * const,int> &>
PUBLIC	??$_Buy_if_not_node@AAU?$pair@QBDH@std@@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@AAU?$pair@QBDH@1@V21@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Buy_if_not_node<std::pair<char const * const,int> &>
PUBLIC	??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,void>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
PUBLIC	??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
PUBLIC	??$forward@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
PUBLIC	??$_Unchecked@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
PUBLIC	??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>
PUBLIC	??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
PUBLIC	??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::move<std::tuple<char const * const &> &>
PUBLIC	??$get@$0A@ABQBD@std@@YAABQBD$$QAV?$tuple@ABQBD@0@@Z ; std::get<0,char const * const &>
PUBLIC	??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA ; `std::_Deallocate'::`1'::__LINE__Var
PUBLIC	??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_06LEBKBMLE@Vertex?$AA@			; `string'
PUBLIC	??_C@_08GHLJBJH@Fragment?$AA@			; `string'
PUBLIC	??_C@_09LLLMJHDJ@?$FLUnknown?$FN?$AA@		; `string'
PUBLIC	??_C@_0BK@EBDLGHGM@?5shader?5failed?5to?5compile?$AA@ ; `string'
PUBLIC	??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BBE@FDPLHAKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CA@MMOGIFNF@invalid?5unordered_map?$DMK?0?5T?$DO?5key?$AA@ ; `string'
PUBLIC	??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BBC@PGIAJODP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1EG@JEFJOLGA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CIA@BBFIDBON@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@	; `string'
PUBLIC	??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1BAE@IMLNAFPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?5@ ; `string'
PUBLIC	??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BBE@PDAGJJGF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ ; `string'
PUBLIC	??_C@_1EE@OACBNFCA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	?uncaught_exceptions@std@@YAHXZ:PROC		; std::uncaught_exceptions
EXTRN	_strlen:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z:PROC ; Engine::Util::loadAsString
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	___glewAttachShader:DWORD
EXTRN	___glewCompileShader:DWORD
EXTRN	___glewCreateProgram:DWORD
EXTRN	___glewCreateShader:DWORD
EXTRN	___glewDeleteProgram:DWORD
EXTRN	___glewDeleteShader:DWORD
EXTRN	___glewGetShaderInfoLog:DWORD
EXTRN	___glewGetShaderiv:DWORD
EXTRN	___glewGetUniformLocation:DWORD
EXTRN	___glewLinkProgram:DWORD
EXTRN	___glewShaderSource:DWORD
EXTRN	___glewUniform1f:DWORD
EXTRN	___glewUniform1i:DWORD
EXTRN	___glewUniform2f:DWORD
EXTRN	___glewUniform3f:DWORD
EXTRN	___glewUniform4f:DWORD
EXTRN	___glewUniformMatrix4fv:DWORD
EXTRN	___glewUseProgram:DWORD
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EE@OACBNFCA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe@
CONST	SEGMENT
??_C@_1EE@OACBNFCA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BBE@PDAGJJGF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1BBE@PDAGJJGF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '*', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, ',', 00H, 'i', 00H, 'n', 00H, 't', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn@
CONST	SEGMENT
??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i', 00H, 'd'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H
	DB	'e', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAE@IMLNAFPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?5@
CONST	SEGMENT
??_C@_1BAE@IMLNAFPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'p', 00H, 'a', 00H, 'i', 00H, 'r', 00H, '<'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ' ', 00H, '*', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ',', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H
	DB	'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, ' ', 00H, '*', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, ',', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'U', 00H, 'n', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'k', 00H, 'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@
CONST	SEGMENT
??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i', 00H, 'd', 00H, 'e'
	DB	00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@
CONST	SEGMENT
??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, '_'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, '<', 00H, '1', 00H, '>', 00H, ':', 00H
	DB	':', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H, '_', 00H, 'b'
	DB	00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p'
	DB	00H, 't', 00H, 'r', 00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@
CONST	SEGMENT
??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@ DB '_Ptr != nullptr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CIA@BBFIDBON@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@
CONST	SEGMENT
??_C@_1CIA@BBFIDBON@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd'
	DB	00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, 'e', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	's', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'p', 00H, 'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, '*', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ',', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, '_', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd'
	DB	00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, 'e', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	's', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'p', 00H, 'a', 00H, 'i', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, '*', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, ',', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@JEFJOLGA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl@
CONST	SEGMENT
??_C@_1EG@JEFJOLGA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BBC@PGIAJODP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1BBC@PGIAJODP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '*', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, ',', 00H, 'i', 00H, 'n', 00H, 't', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@
CONST	SEGMENT
??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'n'
	DB	00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MMOGIFNF@invalid?5unordered_map?$DMK?0?5T?$DO?5key?$AA@
CONST	SEGMENT
??_C@_0CA@MMOGIFNF@invalid?5unordered_map?$DMK?0?5T?$DO?5key?$AA@ DB 'inv'
	DB	'alid unordered_map<K, T> key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BBE@FDPLHAKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1BBE@FDPLHAKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a'
	DB	00H, 'i', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '*', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, ',', 00H, 'i', 00H, 'n', 00H, 't', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 's'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'l', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EBDLGHGM@?5shader?5failed?5to?5compile?$AA@
CONST	SEGMENT
??_C@_0BK@EBDLGHGM@?5shader?5failed?5to?5compile?$AA@ DB ' shader failed '
	DB	'to compile', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09LLLMJHDJ@?$FLUnknown?$FN?$AA@
CONST	SEGMENT
??_C@_09LLLMJHDJ@?$FLUnknown?$FN?$AA@ DB '[Unknown]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHLJBJH@Fragment?$AA@
CONST	SEGMENT
??_C@_08GHLJBJH@Fragment?$AA@ DB 'Fragment', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEBKBMLE@Vertex?$AA@
CONST	SEGMENT
??_C@_06LEBKBMLE@Vertex?$AA@ DB 'Vertex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA DD 08fH ; `std::_Deallocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '2', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'8', 00H, '2', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z$0
__ehfuncinfo$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0
__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$2
__ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$2
__catchsym$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$0
__unwindtable$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z
	DD	02H
	DD	FLAT:__tryblocktable$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$9
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$10
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
__unwindtable$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$2
__ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z$0
__unwindtable$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z$2
__ehfuncinfo$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$0
__tryblocktable$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$3
__unwindtable$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z$1
__ehfuncinfo$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0
__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3
__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z$0
__ehfuncinfo$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z$0
__ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0
__ehfuncinfo$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z$1
__ehfuncinfo$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z$1
__ehfuncinfo$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z$1
__ehfuncinfo$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z$1
__ehfuncinfo$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z$1
__ehfuncinfo$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z$1
__ehfuncinfo$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1Shader@Graphics@Engine@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2
__ehfuncinfo$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z$1
__ehfuncinfo$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z$0
__ehfuncinfo$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z$0
__unwindtable$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z$2
__ehfuncinfo$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z$0
__ehfuncinfo$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z$0
__ehfuncinfo$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$1
__ehfuncinfo$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z$0
__ehfuncinfo$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ$0
__ehfuncinfo$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z$0
__unwindtable$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z$2
__ehfuncinfo$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$get@$0A@ABQBD@std@@YAABQBD$$QAV?$tuple@ABQBD@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$0A@ABQBD@std@@YAABQBD$$QAV?$tuple@ABQBD@0@@Z PROC ; std::get<0,char const * const &>, COMDAT

; 779  : 	{	// get rvalue reference to _Index element of tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 780  : 	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
; 781  : 	typedef tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
; 782  : 	return (_STD forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$forward@ABQBD@std@@YAABQBDABQBD@Z ; std::forward<char const * const &>
  00029	83 c4 04	 add	 esp, 4

; 783  : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$get@$0A@ABQBD@std@@YAABQBD$$QAV?$tuple@ABQBD@0@@Z ENDP ; std::get<0,char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z PROC ; std::move<std::tuple<char const * const &> &>, COMDAT

; 1552 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1553 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1554 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ENDP ; std::move<std::tuple<char const * const &> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 1108 : 		: first(_STD get<_Indexes1>(_STD move(_Val1))...),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$move@AAV?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::move<std::tuple<char const * const &> &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$get@$0A@ABQBD@std@@YAABQBD$$QAV?$tuple@ABQBD@0@@Z ; std::get<0,char const * const &>
  00035	83 c4 04	 add	 esp, 4
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 10		 mov	 edx, DWORD PTR [eax]
  0003d	89 11		 mov	 DWORD PTR [ecx], edx

; 1109 : 			second(_STD get<_Indexes2>(_STD move(_Val2))...)

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1110 : 		{	// construct from pair of tuples
; 1111 : 		}

  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 10 00	 ret	 16			; 00000010H
??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -221						; size = 1
$T2 = -209						; size = 1
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z PROC ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>, COMDAT
; _this$ = ecx

; 1122 : 		: pair(_Val1, _Val2,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	0f b6 85 2f ff
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  0002a	50		 push	 eax
  0002b	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  00032	51		 push	 ecx
  00033	8d 55 10	 lea	 edx, DWORD PTR __Val2$[ebp]
  00036	52		 push	 edx
  00037	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0V?$tuple@ABQBD@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@QBDH@std@@QAE@AAV?$tuple@ABQBD@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><std::tuple<char const * const &>,std::tuple<>,0>

; 1123 : 			index_sequence_for<_Types1...>(),
; 1124 : 			index_sequence_for<_Types2...>())
; 1125 : 		{	// construct from pair of tuples
; 1126 : 		}

  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??$_Unchecked@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Iter$ = 12						; size = 4
??$_Unchecked@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT

; 377  : 	{	// make an unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 378  : 	return (typename _List_iterator<_Mylist>::_Unchecked_type(_Iter._Ptr,

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR __Iter$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00026	50		 push	 eax
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Iter$[ebp]
  0002a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002d	51		 push	 ecx
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00031	e8 00 00 00 00	 call	 ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00036	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : 		static_cast<const _Mylist *>(_Iter._Getcont())));
; 380  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Unchecked@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T2 = -224						; size = 4
$T3 = -212						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00020	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00040	50		 push	 eax
  00041	6a 08		 push	 8
  00043	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00048	83 c4 08	 add	 esp, 8
  0004b	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00061	83 c4 04	 add	 esp, 4
  00064	8a 10		 mov	 dl, BYTE PTR [eax]
  00066	0f b6 c2	 movzx	 eax, dl
  00069	50		 push	 eax
  0006a	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
  00073	83 c4 04	 add	 esp, 4
  00076	8b 10		 mov	 edx, DWORD PTR [eax]
  00078	52		 push	 edx
  00079	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00082	83 c4 04	 add	 esp, 4
  00085	8a 08		 mov	 cl, BYTE PTR [eax]
  00087	0f b6 d1	 movzx	 edx, cl
  0008a	52		 push	 edx
  0008b	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00091	e8 00 00 00 00	 call	 ??$?0ABQBD$$Z$$V@?$pair@QBDH@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABQBD@1@V?$tuple@$$V@1@@Z ; std::pair<char const * const,int>::pair<char const * const,int><char const * const &>
  00096	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0:
  00000	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  00010	83 c4 08	 add	 esp, 8
  00013	c3		 ret	 0
__ehhandler$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z:
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Arg$ = 8						; size = 4
??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z PROC	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>, COMDAT
; _this$ = ecx

; 158  : 		{	// construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 157  : 		: _Val(_STD forward<_Other>(_Arg))

  00023	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@ABQBD@std@@YAABQBDABQBD@Z ; std::forward<char const * const &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	89 01		 mov	 DWORD PTR [ecx], eax

; 159  : 		}

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z ENDP	; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 233  : 		{	// construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 234  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z
_TEXT	SEGMENT
tv90 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Plist$ = 12						; size = 12
??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,void>, COMDAT
; _this$ = ecx

; 595  : 		{	// erase element at _Plist

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 596  : 		return (erase(const_iterator{_Plist}));

  00053	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00056	8b cc		 mov	 ecx, esp
  00058	89 a5 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  0005e	8d 45 0c	 lea	 eax, DWORD PTR __Plist$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00067	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006a	51		 push	 ecx
  0006b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase
  00073	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00079	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0007f	83 ca 01	 or	 edx, 1
  00082	89 95 14 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8d 4d 0c	 lea	 ecx, DWORD PTR __Plist$[ebp]
  00092	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  00097	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 597  : 		}

  0009a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Plist$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,void>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??$_Buy_if_not_node@AAU?$pair@QBDH@std@@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@AAU?$pair@QBDH@1@V21@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
__Plist$ = 16						; size = 4
??$_Buy_if_not_node@AAU?$pair@QBDH@std@@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@AAU?$pair@QBDH@1@V21@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Buy_if_not_node<std::pair<char const * const,int> &>, COMDAT
; _this$ = ecx

; 751  : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 752  : 		return (_Plist);

  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	8b 4d 10	 mov	 ecx, DWORD PTR __Plist$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 753  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
??$_Buy_if_not_node@AAU?$pair@QBDH@std@@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@AAU?$pair@QBDH@1@V21@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Buy_if_not_node<std::pair<char const * const,int> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@AAU?$pair@QBDH@std@@@std@@YAAAU?$pair@QBDH@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@QBDH@std@@@std@@YAAAU?$pair@QBDH@0@AAU10@@Z PROC ; std::forward<std::pair<char const * const,int> &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@AAU?$pair@QBDH@std@@@std@@YAAAU?$pair@QBDH@0@AAU10@@Z ENDP ; std::forward<std::pair<char const * const,int> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$?0V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool,0>, COMDAT
; _this$ = ecx

; 202  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 200  : 		: first(_STD forward<_Other1>(_Val1)),

  00023	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z

; 201  : 				second(_STD forward<_Other2>(_Val2))

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  00041	83 c4 04	 add	 esp, 4
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8a 10		 mov	 dl, BYTE PTR [eax]
  00049	88 51 0c	 mov	 BYTE PTR [ecx+12], dl

; 203  : 		}

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
??$?0V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Al$ = -48						; size = 4
__Pnode$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
_<_Val_1>$ = 20						; size = 4
_<_Val_2>$ = 24						; size = 4
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 757  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00022	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 758  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  00046	8b 45 0c	 mov	 eax, DWORD PTR __Prev$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Next$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buynode0
  00056	89 45 dc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 759  : 		_Alnode& _Al = this->_Getal();

  00059	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  00061	89 45 d0	 mov	 DWORD PTR __Al$[ebp], eax

; 760  : 
; 761  : 		_TRY_BEGIN

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 762  : 		_Alnode_traits::construct(_Al,

  0006b	8b 45 18	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00074	83 c4 04	 add	 esp, 4
  00077	50		 push	 eax
  00078	8b 4d 14	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
  00081	83 c4 04	 add	 esp, 4
  00084	50		 push	 eax
  00085	8b 55 10	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  0008e	83 c4 04	 add	 esp, 4
  00091	50		 push	 eax
  00092	8b 45 dc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00095	83 c0 08	 add	 eax, 8
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
  0009e	83 c4 04	 add	 esp, 4
  000a1	50		 push	 eax
  000a2	8b 4d d0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ??$construct@U?$pair@QBDH@std@@ABUpiecewise_construct_t@2@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::pair<char const * const,int>,std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
  000ab	83 c4 14	 add	 esp, 20			; 00000014H
  000ae	eb 1d		 jmp	 SHORT $LN4@Buynode
__catch$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$0:

; 763  : 			_STD addressof(_Pnode->_Myval),
; 764  : 			_STD forward<_Valty>(_Val)...);
; 765  : 		_CATCH_ALL
; 766  : 		_Al.deallocate(_Pnode, 1);

  000b0	6a 01		 push	 1
  000b2	8b 45 dc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d d0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b9	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::deallocate

; 767  : 		_RERAISE;

  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	e8 00 00 00 00	 call	 __CxxThrowException@8

; 768  : 		_CATCH_END

  000c7	b8 00 00 00 00	 mov	 eax, $LN7@Buynode
  000cc	c3		 ret	 0
$LN4@Buynode:
  000cd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000d4	eb 07		 jmp	 SHORT __tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$1
$LN7@Buynode:
  000d6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z$1:

; 769  : 
; 770  : 		return (_Pnode);

  000dd	8b 45 dc	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:

; 771  : 		}

  000e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ea	59		 pop	 ecx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z PROC ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>, COMDAT
; _this$ = ecx

; 274  : 		: _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	33 c0		 xor	 eax, eax
  00025	88 85 2f ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0002b	0f b6 8d 2f ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  00032	51		 push	 ecx
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>

; 275  : 			_Myfirst(_STD forward<_This2>(_This_arg))

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __This_arg$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$forward@ABQBD@std@@YAABQBDABQBD@Z ; std::forward<char const * const &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$?0ABQBD@?$_Tuple_val@ABQBD@std@@QAE@ABQBD@Z ; std::_Tuple_val<char const * const &>::_Tuple_val<char const * const &><char const * const &>

; 276  : 		{	// construct from one arg per element
; 277  : 		}

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ENDP ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@AAPAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV10@@Z PROC ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV10@@Z ENDP ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$?0U?$pair@QBDH@std@@@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@QBDH@std@@@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z PROC ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocator<std::_List_node<std::pair<char const * const,int>,void *> ><std::pair<char const * const,int> >, COMDAT
; _this$ = ecx

; 1045 : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0U?$pair@QBDH@std@@@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ENDP ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocator<std::_List_node<std::pair<char const * const,int>,void *> ><std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAAAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAAAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAAAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
tv277 = -493						; size = 1
tv276 = -492						; size = 4
tv275 = -488						; size = 4
tv274 = -484						; size = 4
tv150 = -484						; size = 4
tv272 = -481						; size = 1
tv273 = -480						; size = 4
tv271 = -480						; size = 4
tv270 = -480						; size = 4
tv268 = -480						; size = 4
tv264 = -480						; size = 4
tv256 = -480						; size = 4
tv241 = -480						; size = 4
$T2 = -472						; size = 4
$T3 = -460						; size = 12
$T4 = -440						; size = 4
$T5 = -425						; size = 1
$T6 = -416						; size = 12
$T7 = -396						; size = 4
$T8 = -384						; size = 4
$T9 = -372						; size = 4
$T10 = -360						; size = 4
$T11 = -348						; size = 4
$T12 = -336						; size = 12
$T13 = -316						; size = 4
$T14 = -301						; size = 1
$T15 = -292						; size = 4
$T16 = -280						; size = 4
__Next$ = -76						; size = 4
__Plist$ = -64						; size = 4
__Where$ = -52						; size = 4
__Bucket$ = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
__Pnode$ = 16						; size = 4
??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert<std::pair<char const * const,int> &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT
; _this$ = ecx

; 970  : 		{	// try to insert existing node with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec e0 01 00
	00		 sub	 esp, 480		; 000001e0H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 10 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-496]
  00022	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00046	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00049	c7 85 28 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 971  : 		size_type _Bucket;
; 972  : 		_Unchecked_iterator _Where;

  00053	6a 04		 push	 4
  00055	8d 4d cc	 lea	 ecx, DWORD PTR __Where$[ebp]
  00058	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  0005d	8d 4d cc	 lea	 ecx, DWORD PTR __Where$[ebp]
  00060	e8 00 00 00 00	 call	 ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >

; 973  : 
; 974  : 		_TRY_BEGIN

  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 975  : 		_Bucket = _Hashval(_Traits::_Kfn(_Val));

  0006c	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
  00075	83 c4 04	 add	 esp, 4
  00078	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv241[ebp], eax
  0007e	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR tv241[ebp]
  00084	51		 push	 ecx
  00085	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?_Hashval@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEIABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hashval
  0008d	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv150[ebp], eax
  00093	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR tv150[ebp]
  00099	89 55 d8	 mov	 DWORD PTR __Bucket$[ebp], edx

; 976  : 		_Where = _End(_Bucket);

  0009c	8b 45 d8	 mov	 eax, DWORD PTR __Bucket$[ebp]
  0009f	50		 push	 eax
  000a0	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  000a6	51		 push	 ecx
  000a7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	e8 00 00 00 00	 call	 ?_End@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_End
  000af	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv270[ebp], eax
  000b5	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR tv270[ebp]
  000bb	8b 02		 mov	 eax, DWORD PTR [edx]
  000bd	89 45 cc	 mov	 DWORD PTR __Where$[ebp], eax
$LN2@Insert:

; 977  : 		while (_Where != _Begin(_Bucket))

  000c0	8b 45 d8	 mov	 eax, DWORD PTR __Bucket$[ebp]
  000c3	50		 push	 eax
  000c4	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  000ca	51		 push	 ecx
  000cb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Begin
  000d3	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv271[ebp], eax
  000d9	8b 95 20 fe ff
	ff		 mov	 edx, DWORD PTR tv271[ebp]
  000df	52		 push	 edx
  000e0	8d 4d cc	 lea	 ecx, DWORD PTR __Where$[ebp]
  000e3	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=
  000e8	88 85 1f fe ff
	ff		 mov	 BYTE PTR tv272[ebp], al
  000ee	0f b6 85 1f fe
	ff ff		 movzx	 eax, BYTE PTR tv272[ebp]
  000f5	85 c0		 test	 eax, eax
  000f7	0f 84 f7 00 00
	00		 je	 $LN3@Insert

; 978  : 			{
; 979  : #pragma warning(push)
; 980  : #pragma warning(disable: 4127)	// conditional expression is constant
; 981  : 			if (_Traitsobj(_Traits::_Kfn(_Val),

  000fd	8d 4d cc	 lea	 ecx, DWORD PTR __Where$[ebp]
  00100	e8 00 00 00 00	 call	 ??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator--
  00105	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  0010b	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR tv273[ebp]
  00111	e8 00 00 00 00	 call	 ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
  00116	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  0011c	8b 85 1c fe ff
	ff		 mov	 eax, DWORD PTR tv274[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
  00128	83 c4 04	 add	 esp, 4
  0012b	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv275[ebp], eax
  00131	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00134	51		 push	 ecx
  00135	e8 00 00 00 00	 call	 ??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
  0013a	83 c4 04	 add	 esp, 4
  0013d	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv276[ebp], eax
  00143	8b 95 18 fe ff
	ff		 mov	 edx, DWORD PTR tv275[ebp]
  00149	52		 push	 edx
  0014a	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR tv276[ebp]
  00150	50		 push	 eax
  00151	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00154	e8 00 00 00 00	 call	 ??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBE_NABQBD0@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
  00159	88 85 13 fe ff
	ff		 mov	 BYTE PTR tv277[ebp], al
  0015f	0f b6 8d 13 fe
	ff ff		 movzx	 ecx, BYTE PTR tv277[ebp]
  00166	85 c9		 test	 ecx, ecx
  00168	74 05		 je	 SHORT $LN5@Insert

; 982  : 				_Traits::_Kfn(*--_Where)))
; 983  : 				;	// still too high in bucket list
; 984  : 			else if (_Multi

  0016a	e9 80 00 00 00	 jmp	 $LN6@Insert
$LN5@Insert:

; 985  : 				|| (!_Traits::_Standard

  0016f	33 c0		 xor	 eax, eax
  00171	74 0c		 je	 SHORT $LN7@Insert

; 986  : 					&& _Traitsobj(_Traits::_Kfn(*_Where),
; 987  : 						_Traits::_Kfn(_Val))))
; 988  : 				{	// found insertion point, back up to it
; 989  : 				++_Where;

  00173	8d 4d cc	 lea	 ecx, DWORD PTR __Where$[ebp]
  00176	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++

; 990  : 				break;

  0017b	eb 77		 jmp	 SHORT $LN3@Insert

; 991  : 				}
; 992  : 			else

  0017d	eb 70		 jmp	 SHORT $LN6@Insert
$LN7@Insert:

; 993  : 				{	// discard new list element and return existing
; 994  : 				_Destroy_if_node(_Pnode);

  0017f	8b 45 10	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00182	50		 push	 eax
  00183	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Destroy_if_node

; 995  : 				return (_Pairib(_Make_iter(_Where), false));

  0018b	c6 85 d3 fe ff
	ff 00		 mov	 BYTE PTR $T14[ebp], 0
  00192	8b 45 cc	 mov	 eax, DWORD PTR __Where$[ebp]
  00195	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  0019b	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR $T13[ebp]
  001a1	51		 push	 ecx
  001a2	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  001a8	52		 push	 edx
  001a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	e8 00 00 00 00	 call	 ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
  001b1	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  001b7	8d 85 d3 fe ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  001bd	50		 push	 eax
  001be	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR tv256[ebp]
  001c4	51		 push	 ecx
  001c5	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001c8	e8 00 00 00 00	 call	 ??$?0V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool,0>
  001cd	8b 95 28 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  001d3	83 ca 01	 or	 edx, 1
  001d6	89 95 28 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  001dc	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  001e2	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  001e7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001ea	e9 a3 01 00 00	 jmp	 $LN11@Insert
$LN6@Insert:

; 996  : 				}
; 997  : #pragma warning(pop)
; 998  : 			}

  001ef	e9 cc fe ff ff	 jmp	 $LN2@Insert
$LN3@Insert:
  001f4	eb 1b		 jmp	 SHORT $LN12@Insert
__catch$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$0:

; 999  : 		_CATCH_ALL
; 1000 : 		_Destroy_if_node(_Pnode);

  001f6	8b 45 10	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001f9	50		 push	 eax
  001fa	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Destroy_if_node

; 1001 : 		_RERAISE;

  00202	6a 00		 push	 0
  00204	6a 00		 push	 0
  00206	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1002 : 		_CATCH_END

  0020b	b8 00 00 00 00	 mov	 eax, $LN23@Insert
  00210	c3		 ret	 0
$LN12@Insert:
  00211	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00218	eb 07		 jmp	 SHORT __tryend$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$1
$LN23@Insert:
  0021a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$1:

; 1003 : 
; 1004 : 		_Unchecked_iterator _Plist =

  00221	6a 04		 push	 4
  00223	8d 4d c0	 lea	 ecx, DWORD PTR __Plist$[ebp]
  00226	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  0022b	8b 45 10	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0022e	50		 push	 eax
  0022f	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00232	51		 push	 ecx
  00233	e8 00 00 00 00	 call	 ??$forward@AAU?$pair@QBDH@std@@@std@@YAAAU?$pair@QBDH@0@AAU10@@Z ; std::forward<std::pair<char const * const,int> &>
  00238	83 c4 04	 add	 esp, 4
  0023b	50		 push	 eax
  0023c	8d 55 c0	 lea	 edx, DWORD PTR __Plist$[ebp]
  0023f	52		 push	 edx
  00240	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00243	e8 00 00 00 00	 call	 ??$_Buy_if_not_node@AAU?$pair@QBDH@std@@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@AAU?$pair@QBDH@1@V21@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Buy_if_not_node<std::pair<char const * const,int> &>

; 1005 : 			_Buy_if_not_node(_STD forward<_Valty>(_Val), _Pnode);
; 1006 : 		_Unchecked_iterator _Next = _Plist;

  00248	6a 04		 push	 4
  0024a	8d 4d b4	 lea	 ecx, DWORD PTR __Next$[ebp]
  0024d	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00252	8b 45 c0	 mov	 eax, DWORD PTR __Plist$[ebp]
  00255	89 45 b4	 mov	 DWORD PTR __Next$[ebp], eax

; 1007 : 
; 1008 : 		if (_Where != ++_Next)	// move element into place

  00258	8d 4d b4	 lea	 ecx, DWORD PTR __Next$[ebp]
  0025b	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
  00260	50		 push	 eax
  00261	8d 4d cc	 lea	 ecx, DWORD PTR __Where$[ebp]
  00264	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=
  00269	0f b6 c0	 movzx	 eax, al
  0026c	85 c0		 test	 eax, eax
  0026e	74 3b		 je	 SHORT $LN9@Insert

; 1009 : 			_List._Unchecked_splice(_Where, _Plist, _Next);

  00270	8b 45 b4	 mov	 eax, DWORD PTR __Next$[ebp]
  00273	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  00279	8b 4d c0	 mov	 ecx, DWORD PTR __Plist$[ebp]
  0027c	89 8d 98 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], ecx
  00282	8b 55 cc	 mov	 edx, DWORD PTR __Where$[ebp]
  00285	89 95 8c fe ff
	ff		 mov	 DWORD PTR $T9[ebp], edx
  0028b	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR $T11[ebp]
  00291	50		 push	 eax
  00292	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp]
  00298	51		 push	 ecx
  00299	8b 95 8c fe ff
	ff		 mov	 edx, DWORD PTR $T9[ebp]
  0029f	52		 push	 edx
  002a0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002a3	83 c1 04	 add	 ecx, 4
  002a6	e8 00 00 00 00	 call	 ?_Unchecked_splice@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@00@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_splice
$LN9@Insert:

; 1010 : 
; 1011 : 		_Insert_bucket(_Plist, _Where, _Bucket);

  002ab	8b 45 d8	 mov	 eax, DWORD PTR __Bucket$[ebp]
  002ae	50		 push	 eax
  002af	8b 4d cc	 mov	 ecx, DWORD PTR __Where$[ebp]
  002b2	51		 push	 ecx
  002b3	8b 55 c0	 mov	 edx, DWORD PTR __Plist$[ebp]
  002b6	52		 push	 edx
  002b7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002ba	e8 00 00 00 00	 call	 ?_Insert_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert_bucket

; 1012 : 
; 1013 : 		_TRY_BEGIN

  002bf	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2

; 1014 : 		_Check_size();

  002c6	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002c9	e8 00 00 00 00	 call	 ?_Check_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Check_size
  002ce	eb 53		 jmp	 SHORT $LN14@Insert
__catch$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$2:

; 1015 : 		_CATCH_ALL
; 1016 : 		erase(_Make_iter(_Plist));

  002d0	8b 45 c0	 mov	 eax, DWORD PTR __Plist$[ebp]
  002d3	89 85 74 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  002d9	83 ec 0c	 sub	 esp, 12			; 0000000cH
  002dc	8b cc		 mov	 ecx, esp
  002de	89 a5 80 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], esp
  002e4	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR $T7[ebp]
  002ea	52		 push	 edx
  002eb	51		 push	 ecx
  002ec	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002ef	e8 00 00 00 00	 call	 ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
  002f4	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  002fa	50		 push	 eax
  002fb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002fe	e8 00 00 00 00	 call	 ??$erase@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@X@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@V21@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,void>
  00303	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv264[ebp], eax
  00309	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0030f	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ

; 1017 : 		_RERAISE;

  00314	6a 00		 push	 0
  00316	6a 00		 push	 0
  00318	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1018 : 		_CATCH_END

  0031d	b8 00 00 00 00	 mov	 eax, $LN25@Insert
  00322	c3		 ret	 0
$LN14@Insert:
  00323	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0032a	eb 07		 jmp	 SHORT __tryend$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$3
$LN25@Insert:
  0032c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z$3:

; 1019 : 
; 1020 : 		return (_Pairib(_Make_iter(_Plist), true));

  00333	c6 85 57 fe ff
	ff 01		 mov	 BYTE PTR $T5[ebp], 1
  0033a	8b 45 c0	 mov	 eax, DWORD PTR __Plist$[ebp]
  0033d	89 85 48 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00343	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  00349	51		 push	 ecx
  0034a	8d 95 34 fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00350	52		 push	 edx
  00351	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00354	e8 00 00 00 00	 call	 ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
  00359	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv268[ebp], eax
  0035f	8d 85 57 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00365	50		 push	 eax
  00366	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR tv268[ebp]
  0036c	51		 push	 ecx
  0036d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00370	e8 00 00 00 00	 call	 ??$?0V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool,0>
  00375	8b 95 28 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0037b	83 ca 01	 or	 edx, 1
  0037e	89 95 28 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00384	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0038a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0038f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN11@Insert:

; 1021 : 		}

  00392	52		 push	 edx
  00393	8b cd		 mov	 ecx, ebp
  00395	50		 push	 eax
  00396	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN31@Insert
  0039c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003a1	58		 pop	 eax
  003a2	5a		 pop	 edx
  003a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003ad	59		 pop	 ecx
  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003b4	33 cd		 xor	 ecx, ebp
  003b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003bb	81 c4 f0 01 00
	00		 add	 esp, 496		; 000001f0H
  003c1	3b ec		 cmp	 ebp, esp
  003c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c8	8b e5		 mov	 esp, ebp
  003ca	5d		 pop	 ebp
  003cb	c2 0c 00	 ret	 12			; 0000000cH
  003ce	66 90		 npad	 2
$LN31@Insert:
  003d0	03 00 00 00	 DD	 3
  003d4	00 00 00 00	 DD	 $LN30@Insert
$LN30@Insert:
  003d8	cc ff ff ff	 DD	 -52			; ffffffccH
  003dc	04 00 00 00	 DD	 4
  003e0	00 00 00 00	 DD	 $LN26@Insert
  003e4	c0 ff ff ff	 DD	 -64			; ffffffc0H
  003e8	04 00 00 00	 DD	 4
  003ec	00 00 00 00	 DD	 $LN27@Insert
  003f0	b4 ff ff ff	 DD	 -76			; ffffffb4H
  003f4	04 00 00 00	 DD	 4
  003f8	00 00 00 00	 DD	 $LN28@Insert
$LN28@Insert:
  003fc	5f		 DB	 95			; 0000005fH
  003fd	4e		 DB	 78			; 0000004eH
  003fe	65		 DB	 101			; 00000065H
  003ff	78		 DB	 120			; 00000078H
  00400	74		 DB	 116			; 00000074H
  00401	00		 DB	 0
$LN27@Insert:
  00402	5f		 DB	 95			; 0000005fH
  00403	50		 DB	 80			; 00000050H
  00404	6c		 DB	 108			; 0000006cH
  00405	69		 DB	 105			; 00000069H
  00406	73		 DB	 115			; 00000073H
  00407	74		 DB	 116			; 00000074H
  00408	00		 DB	 0
$LN26@Insert:
  00409	5f		 DB	 95			; 0000005fH
  0040a	57		 DB	 87			; 00000057H
  0040b	68		 DB	 104			; 00000068H
  0040c	65		 DB	 101			; 00000065H
  0040d	72		 DB	 114			; 00000072H
  0040e	65		 DB	 101			; 00000065H
  0040f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 0c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-500]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert<std::pair<char const * const,int> &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??$_Insert@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
__Newnode$ = -44					; size = 4
__Leftnode$ = -32					; size = 4
__Rightnode$ = -20					; size = 4
_this$ = -8						; size = 4
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
_<_Val_1>$ = 16						; size = 4
_<_Val_2>$ = 20						; size = 4
??$_Insert@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Insert<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 994  : 		{	// insert element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 995  : 		const _Nodeptr _Rightnode = _Where._Ptr;

  00023	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR __Rightnode$[ebp], eax

; 996  : 		const _Nodeptr _Leftnode = _Rightnode->_Prev;

  00029	8b 45 ec	 mov	 eax, DWORD PTR __Rightnode$[ebp]
  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002f	89 4d e0	 mov	 DWORD PTR __Leftnode$[ebp], ecx

; 997  : 		const _Nodeptr _Newnode = this->_Buynode(_Rightnode, _Leftnode, _STD forward<_Valty>(_Val)...);

  00032	8b 45 14	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
  00048	83 c4 04	 add	 esp, 4
  0004b	50		 push	 eax
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00055	83 c4 04	 add	 esp, 4
  00058	50		 push	 eax
  00059	8b 45 e0	 mov	 eax, DWORD PTR __Leftnode$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __Rightnode$[ebp]
  00060	51		 push	 ecx
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ??$_Buynode@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PAU21@0ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Buynode<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
  00069	89 45 d4	 mov	 DWORD PTR __Newnode$[ebp], eax

; 998  : 		_Incsize(1);

  0006c	6a 01		 push	 1
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Incsize@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXI@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Incsize

; 999  : 		_Rightnode->_Prev = _Newnode;

  00076	8b 45 ec	 mov	 eax, DWORD PTR __Rightnode$[ebp]
  00079	8b 4d d4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0007c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1000 : 		_Leftnode->_Next = _Newnode;

  0007f	8b 45 e0	 mov	 eax, DWORD PTR __Leftnode$[ebp]
  00082	8b 4d d4	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00085	89 08		 mov	 DWORD PTR [eax], ecx

; 1001 : 		}

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 10 00	 ret	 16			; 00000010H
??$_Insert@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Insert<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??$emplace_front@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
_<_Val_1>$ = 12						; size = 4
_<_Val_2>$ = 16						; size = 4
??$emplace_front@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::emplace_front<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 960  : 		{	// insert element at beginning

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 961  : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);

  00023	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_begin
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _<_Val_2>$[ebp]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_1>$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  0005d	83 c4 04	 add	 esp, 4
  00060	50		 push	 eax
  00061	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00067	52		 push	 edx
  00068	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	e8 00 00 00 00	 call	 ??$_Insert@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Insert<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >

; 962  : 
; 963  : #if _HAS_CXX17
; 964  : 		return (front());
; 965  : #endif /* _HAS_CXX17 */
; 966  : 		}

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 0c 00	 ret	 12			; 0000000cH
??$emplace_front@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::emplace_front<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z PROC ; std::forward<std::tuple<char const * const &> >, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ENDP ; std::forward<std::tuple<char const * const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__This_arg$ = 8						; size = 4
??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z PROC	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>, COMDAT
; _this$ = ecx

; 368  : 			: tuple(_Exact_args_t{}, _This_arg, _Rest_arg...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	33 c0		 xor	 eax, eax
  00025	88 85 2f ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __This_arg$[ebp]
  0002e	51		 push	 ecx
  0002f	0f b6 95 2f ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  00036	52		 push	 edx
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@ABQBD$$V$0A@@?$tuple@ABQBD@std@@QAE@U_Exact_args_t@1@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><std::_Exact_args_t,char const * const &,0>

; 369  : 		{	// construct from one or more copied elements
; 370  : 		}

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z ENDP	; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::_List_node<std::pair<char const * const,int>,void *> *,std::_List_node<std::pair<char const * const,int>,void *> * &>, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@AAPAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<std::pair<char const * const,int>,void *> * &>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	89 02		 mov	 DWORD PTR [edx], eax

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$construct@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::_List_node<std::pair<char const * const,int>,void *> *,std::_List_node<std::pair<char const * const,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QAV31@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00046	89 10		 mov	 DWORD PTR [eax], edx

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@ABV31@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@ABV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV10@@Z ; std::forward<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00046	89 10		 mov	 DWORD PTR [eax], edx

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@ABV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1><std::allocator<std::pair<char const * const,int> > const &>, COMDAT
; _this$ = ecx

; 319  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@U?$pair@QBDH@std@@@std@@@std@@YAABV?$allocator@U?$pair@QBDH@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::pair<char const * const,int> > const &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$?0U?$pair@QBDH@std@@@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocator<std::_List_node<std::pair<char const * const,int>,void *> ><std::pair<char const * const,int> >

; 320  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >

; 321  : 		{	// construct from forwarded values
; 322  : 		}

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1><std::allocator<std::pair<char const * const,int> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$?0AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &,bool,0>, COMDAT
; _this$ = ecx

; 202  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 200  : 		: first(_STD forward<_Other1>(_Val1)),

  00023	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAAAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z

; 201  : 				second(_STD forward<_Other2>(_Val2))

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$forward@_N@std@@YA$$QA_NAA_N@Z ; std::forward<bool>
  00041	83 c4 04	 add	 esp, 4
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8a 10		 mov	 dl, BYTE PTR [eax]
  00049	88 51 0c	 mov	 BYTE PTR [ecx+12], dl

; 203  : 		}

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
??$?0AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??$emplace@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_<_Val_0>$ = 12						; size = 4
_<_Val_1>$ = 16						; size = 4
_<_Val_2>$ = 20						; size = 4
??$emplace@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::emplace<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 300  : 		{	// try to insert value_type(_Val...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 301  : 		_List.emplace_front(_STD forward<_Valty>(_Val)...);

  0002d	8b 45 14	 mov	 eax, DWORD PTR _<_Val_2>$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
  00036	83 c4 04	 add	 esp, 4
  00039	50		 push	 eax
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Val_1>$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$forward@V?$tuple@ABQBD@std@@@std@@YA$$QAV?$tuple@ABQBD@0@AAV10@@Z ; std::forward<std::tuple<char const * const &> >
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	8b 55 0c	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	83 c1 04	 add	 ecx, 4
  0005a	e8 00 00 00 00	 call	 ??$emplace_front@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::emplace_front<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >

; 302  : 		return (_Insert(_List.front(), _Unchecked_begin()));

  0005f	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00065	50		 push	 eax
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_begin
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	51		 push	 ecx
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	83 c1 04	 add	 ecx, 4
  00077	e8 00 00 00 00	 call	 ?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::front
  0007c	50		 push	 eax
  0007d	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00080	52		 push	 edx
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert<std::pair<char const * const,int> &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  00089	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  0008f	83 c8 01	 or	 eax, 1
  00092	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00098	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 303  : 		}

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 10 00	 ret	 16			; 00000010H
??$emplace@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::emplace<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 876  : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 877  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00021	e8 00 00 00 00	 call	 ??0?$tuple@$$V@std@@QAE@XZ ; std::tuple<>::tuple<>
  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 878  : 	}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z PROC ; std::forward_as_tuple<char const * const &>, COMDAT

; 876  : 	{	// forward arguments in a tuple

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 877  : 	return (tuple<_Types&&...>(_STD forward<_Types>(_Args)...));

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$forward@ABQBD@std@@YAABQBDABQBD@Z ; std::forward<char const * const &>
  00046	83 c4 04	 add	 esp, 4
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??$?0ABQBD$0A@@?$tuple@ABQBD@std@@QAE@ABQBD@Z ; std::tuple<char const * const &>::tuple<char const * const &><char const * const &,0>
  00052	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 878  : 	}

  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ENDP ; std::forward_as_tuple<char const * const &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@ABQBD@std@@YAABQBDABQBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQBD@std@@YAABQBDABQBD@Z PROC		; std::forward<char const * const &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABQBD@std@@YAABQBDABQBD@Z ENDP		; std::forward<char const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z PROC ; std::_Rechecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>, COMDAT

; 489  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 490  : 	_Dest = _Src;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00024	89 08		 mov	 DWORD PTR [eax], ecx

; 491  : 	return (_Dest);

  00026	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]

; 492  : 	}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z ENDP ; std::_Rechecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 594  : 		constexpr _Unused_parameter(_Ty&&) _NOEXCEPT {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
tv80 = -224						; size = 4
__Next$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT

; 134  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 135  : 	_FwdIt _Next = _Dest;

  00041	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00044	89 45 e8	 mov	 DWORD PTR __Next$[ebp], eax

; 136  : 
; 137  : 	_TRY_BEGIN

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 138  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0004e	eb 12		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00050	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00053	83 c0 04	 add	 eax, 4
  00056	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0005c	83 c1 04	 add	 ecx, 4
  0005f	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN4@Uninitiali:
  00062	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00065	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00068	74 34		 je	 SHORT $LN3@Uninitiali

; 139  : 		{
; 140  : 		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Dest), _STD move(*_First));

  0006a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Unfancy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  00073	83 c4 04	 add	 esp, 4
  00076	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ??$move@AAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ; std::move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>
  00085	83 c4 04	 add	 esp, 4
  00088	50		 push	 eax
  00089	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv80[ebp]
  0008f	52		 push	 edx
  00090	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : 		}

  0009c	eb b2		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:
  0009e	eb 23		 jmp	 SHORT $LN7@Uninitiali
__catch$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:

; 142  : 
; 143  : 	_CATCH_ALL
; 144  : 	_Destroy_range(_Next, _Dest, _Al);

  000a0	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 e8	 mov	 edx, DWORD PTR __Next$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 145  : 	_RERAISE;

  000b4	6a 00		 push	 0
  000b6	6a 00		 push	 0
  000b8	e8 00 00 00 00	 call	 __CxxThrowException@8

; 146  : 	_CATCH_END

  000bd	b8 00 00 00 00	 mov	 eax, $LN10@Uninitiali
  000c2	c3		 ret	 0
$LN7@Uninitiali:
  000c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ca	eb 07		 jmp	 SHORT __tryend$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$1
$LN10@Uninitiali:
  000cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$1:

; 147  : 
; 148  : 	return (_Dest);

  000d3	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
$LN6@Uninitiali:

; 149  : 	}

  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000ea	3b ec		 cmp	 ebp, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$move@AAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>, COMDAT

; 1552 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1553 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1554 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Ptr_move_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Trivially_copyable_ptr_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Trivially_copyable_ptr_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0@Z PROC ; std::_Ptr_move_cat<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 963  : 	{	// return pointer move optimization category for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 964  : 	return {};

  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 965  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Ptr_move_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Trivially_copyable_ptr_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0@Z ENDP ; std::_Ptr_move_cat<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z PROC ; std::_Unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>, COMDAT

; 458  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 459  : 	return (_Src);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 460  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ENDP ; std::_Unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory
;	COMDAT ??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
tv78 = -224						; size = 4
__Next$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Uninit_alloc_fill_n1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT

; 182  : 	{	// copy _Count copies of _Val to raw _First, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 183  : 	_FwdIt _Next = _First;

  00041	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00044	89 45 e8	 mov	 DWORD PTR __Next$[ebp], eax

; 184  : 
; 185  : 	_TRY_BEGIN

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 186  : 	for (; 0 < _Count; --_Count, (void)++_First)

  0004e	eb 12		 jmp	 SHORT $LN4@Uninit_all
$LN2@Uninit_all:
  00050	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00053	83 e8 01	 sub	 eax, 1
  00056	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00059	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0005c	83 c1 04	 add	 ecx, 4
  0005f	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN4@Uninit_all:
  00062	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00066	76 2b		 jbe	 SHORT $LN3@Uninit_all

; 187  : 		{
; 188  : 		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_First), _Val);

  00068	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$_Unfancy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  00071	83 c4 04	 add	 esp, 4
  00074	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv78[ebp], eax
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0007d	51		 push	 ecx
  0007e	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv78[ebp]
  00084	52		 push	 edx
  00085	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::construct<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > const &>
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : 		}

  00091	eb bd		 jmp	 SHORT $LN2@Uninit_all
$LN3@Uninit_all:
  00093	eb 23		 jmp	 SHORT $LN7@Uninit_all
__catch$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z$0:

; 190  : 
; 191  : 	_CATCH_ALL
; 192  : 	_Destroy_range(_Next, _First, _Al);

  00095	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00098	50		 push	 eax
  00099	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0009c	51		 push	 ecx
  0009d	8b 55 e8	 mov	 edx, DWORD PTR __Next$[ebp]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 193  : 	_RERAISE;

  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	e8 00 00 00 00	 call	 __CxxThrowException@8

; 194  : 	_CATCH_END

  000b2	b8 00 00 00 00	 mov	 eax, $LN10@Uninit_all
  000b7	c3		 ret	 0
$LN7@Uninit_all:
  000b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000bf	eb 07		 jmp	 SHORT __tryend$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z$1
$LN10@Uninit_all:
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z$1:

; 195  : 
; 196  : 	return (_First);

  000c8	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
$LN6@Uninit_all:

; 197  : 	}

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000df	3b ec		 cmp	 ebp, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Uninit_alloc_fill_n1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$_Unfancy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z PROC ; std::_Unfancy<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ENDP ; std::_Unfancy<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Fill_unchecked1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_unchecked1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Fill_unchecked1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 2886 : 	{	// copy _Val through [_First, _Last), no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2887 : 	for (; _First != _Last; ++_First)

  0001e	eb 09		 jmp	 SHORT $LN4@Fill_unche
$LN2@Fill_unche:
  00020	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00023	83 c0 04	 add	 eax, 4
  00026	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Fill_unche:
  00029	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002c	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0002f	74 0c		 je	 SHORT $LN1@Fill_unche

; 2888 : 		*_First = _Val;

  00031	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00039	89 0a		 mov	 DWORD PTR [edx], ecx
  0003b	eb e3		 jmp	 SHORT $LN2@Fill_unche
$LN1@Fill_unche:

; 2889 : 	}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Fill_unchecked1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Fill_unchecked1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Fill_memset_is_safe@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV20@@Z
_TEXT	SEGMENT
$T1 = -197						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Fill_memset_is_safe@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV20@@Z PROC ; std::_Fill_memset_is_safe<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 2879 : 	{	// type deduction for _Fill_memset_is_safe_helper

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2880 : 	return {};

  0001e	33 c0		 xor	 eax, eax
  00020	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00026	8a 85 3b ff ff
	ff		 mov	 al, BYTE PTR $T1[ebp]

; 2881 : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Fill_memset_is_safe@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV20@@Z ENDP ; std::_Fill_memset_is_safe<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
_TEXT	SEGMENT
$T2 = -225						; size = 1
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Al$ = 8						; size = 4
??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > ><std::allocator<std::pair<char const * const,int> > const &,void>, COMDAT
; _this$ = ecx

; 555  : 		{	// construct head node, allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00022	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 553  : 		: _Mypair(_One_then_variadic_args_t(),

  00046	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@U?$pair@QBDH@std@@@std@@@std@@YAABV?$allocator@U?$pair@QBDH@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::pair<char const * const,int> > const &>
  0004f	83 c4 04	 add	 esp, 4
  00052	50		 push	 eax
  00053	0f b6 8d 1f ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  0005a	51		 push	 ecx
  0005b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1><std::allocator<std::pair<char const * const,int> > const &>
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 556  : 		_Myhead() = _Buyheadnode();

  0006a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buyheadnode
  00072	8b f0		 mov	 esi, eax
  00074	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0007c	89 30		 mov	 DWORD PTR [eax], esi

; 557  : 		_TRY_BEGIN

  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 558  : 		_Alloc_proxy();

  00082	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Alloc_proxy
  0008a	eb 22		 jmp	 SHORT $LN4@pair
__catch$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$0:

; 559  : 		_CATCH_ALL
; 560  : 		_Freeheadnode(_Myhead());

  0008c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  00094	8b 00		 mov	 eax, DWORD PTR [eax]
  00096	50		 push	 eax
  00097	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?_Freeheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Freeheadnode

; 561  : 		_RERAISE;

  0009f	6a 00		 push	 0
  000a1	6a 00		 push	 0
  000a3	e8 00 00 00 00	 call	 __CxxThrowException@8

; 562  : 		_CATCH_END

  000a8	b8 00 00 00 00	 mov	 eax, $LN8@pair
  000ad	c3		 ret	 0
$LN4@pair:
  000ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000b5	eb 07		 jmp	 SHORT $LN1@pair
$LN8@pair:
  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN1@pair:

; 563  : 		}

  000be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000c5	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@pair:
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$2:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@XZ
__ehhandler$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > ><std::allocator<std::pair<char const * const,int> > const &,void>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U?$pair@QBDH@std@@@std@@@std@@YAABV?$allocator@U?$pair@QBDH@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U?$pair@QBDH@std@@@std@@@std@@YAABV?$allocator@U?$pair@QBDH@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::pair<char const * const,int> > const &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABV?$allocator@U?$pair@QBDH@std@@@std@@@std@@YAABV?$allocator@U?$pair@QBDH@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::pair<char const * const,int> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::_List_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 950  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  : 		_Ptr->~_Uty();
; 952  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::_List_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<std::pair<char const * const,int>,void *> *>, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<std::pair<char const * const,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>, COMDAT
; _this$ = ecx

; 319  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>
  0002c	83 c4 04	 add	 esp, 4

; 320  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >

; 321  : 		{	// construct from forwarded values
; 322  : 		}

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT

; 1200 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1201 : 		// nothing to do
; 1202 : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Destroy_range1@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Bytes$ = 8						; size = 4
__Align$ = 12						; size = 4
?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z PROC ; std::_Default_allocate_traits<1>::_Get_bytes, COMDAT

; 55   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 56   : 		(void)_Align;
; 57   : 
; 58   : 		void * _Ptr = nullptr;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 59   :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 60   : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 61   : 			{
; 62   : 			_Ptr = ::operator new(_Bytes, align_val_t{_Align});
; 63   : 			}
; 64   : 		else
; 65   :  #endif /* _HAS_ALIGNED_NEW */
; 66   : 			{
; 67   : 			_Ptr = ::operator new(_Bytes);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 68   : 			}
; 69   : 
; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != nullptr);

  00034	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00038	75 5f		 jne	 SHORT $LN2@Get_bytes
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BA@MPNBGJJP@_Ptr?5?$CB?$DN?5nullptr?$AA@
  0003f	85 c0		 test	 eax, eax
  00041	74 04		 je	 SHORT $LN4@Get_bytes
  00043	33 c9		 xor	 ecx, ecx
  00045	75 2d		 jne	 SHORT $LN5@Get_bytes
$LN4@Get_bytes:
  00047	8b f4		 mov	 esi, esp
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@DCCKKOEA@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00053	6a 00		 push	 0
  00055	6a 46		 push	 70			; 00000046H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005c	6a 02		 push	 2
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00064	83 c4 18	 add	 esp, 24			; 00000018H
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	83 f8 01	 cmp	 eax, 1
  00071	75 01		 jne	 SHORT $LN5@Get_bytes
  00073	cc		 int	 3
$LN5@Get_bytes:
  00074	8b f4		 mov	 esi, esp
  00076	6a 00		 push	 0
  00078	6a 46		 push	 70			; 00000046H
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_1FK@PMIPGFGC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_?$AAt?$AAr?$AAa?$AAi?$AAt?$AAs?$AA?$DM?$AA1?$AA?$DO@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Get_bytes:

; 71   : 		return (_Ptr);

  00099	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 72   : 		}

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ENDP ; std::_Default_allocate_traits<1>::_Get_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ
_TEXT	SEGMENT
?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ PROC	; std::_Default_allocate_traits<1>::_Fail, COMDAT

; 50   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 51   : 		_Xbad_alloc();

  0001e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Fail:

; 52   : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ENDP	; std::_Default_allocate_traits<1>::_Fail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0AAU?$equal_to@PBD@std@@M@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@$$QAM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0AAU?$equal_to@PBD@std@@M@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@$$QAM@Z PROC ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Compressed_pair<std::equal_to<char const *>,float,1><std::equal_to<char const *> &,float>, COMDAT
; _this$ = ecx

; 319  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@AAU?$equal_to@PBD@std@@@std@@YAAAU?$equal_to@PBD@0@AAU10@@Z ; std::forward<std::equal_to<char const *> &>
  0002c	83 c4 04	 add	 esp, 4

; 320  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  0002f	8b 45 10	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$forward@M@std@@YA$$QAMAAM@Z ; std::forward<float>
  00038	83 c4 04	 add	 esp, 4
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	89 11		 mov	 DWORD PTR [ecx], edx

; 321  : 		{	// construct from forwarded values
; 322  : 		}

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
??$?0AAU?$equal_to@PBD@std@@M@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@$$QAM@Z ENDP ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Compressed_pair<std::equal_to<char const *>,float,1><std::equal_to<char const *> &,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@M@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@M@std@@YA$$QAMAAM@Z PROC			; std::forward<float>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@M@std@@YA$$QAMAAM@Z ENDP			; std::forward<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@AAU?$equal_to@PBD@std@@@std@@YAAAU?$equal_to@PBD@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$equal_to@PBD@std@@@std@@YAAAU?$equal_to@PBD@0@AAU10@@Z PROC ; std::forward<std::equal_to<char const *> &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@AAU?$equal_to@PBD@std@@@std@@YAAAU?$equal_to@PBD@0@AAU10@@Z ENDP ; std::forward<std::equal_to<char const *> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$forward@AAU?$hash@PBD@std@@@std@@YAAAU?$hash@PBD@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$hash@PBD@std@@@std@@YAAAU?$hash@PBD@0@AAU10@@Z PROC ; std::forward<std::hash<char const *> &>, COMDAT

; 1537 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1538 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1539 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@AAU?$hash@PBD@std@@@std@@YAAAU?$hash@PBD@0@AAU10@@Z ENDP ; std::forward<std::hash<char const *> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\unordered_map
;	COMDAT ??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z
_TEXT	SEGMENT
tv154 = -328						; size = 4
tv71 = -324						; size = 4
$T2 = -316						; size = 4
$T3 = -301						; size = 1
$T4 = -292						; size = 4
$T5 = -277						; size = 1
$T6 = -268						; size = 12
$T7 = -245						; size = 1
__Where$ = -44						; size = 12
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z PROC ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>, COMDAT
; _this$ = ecx

; 313  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd b8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-328]
  00021	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 314  : 		iterator _Where = _Mybase::find(_Keyval);

  0004f	6a 0c		 push	 12			; 0000000cH
  00051	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00054	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00059	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00060	51		 push	 ecx
  00061	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 315  : 		if (_Where == _Mybase::end())

  00070	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00076	50		 push	 eax
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  0007f	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  00085	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv71[ebp]
  0008b	89 8d b8 fe ff
	ff		 mov	 DWORD PTR tv154[ebp], ecx
  00091	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00095	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR tv154[ebp]
  0009b	52		 push	 edx
  0009c	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  0009f	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  000a4	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T7[ebp], al
  000aa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ae	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  000b4	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000b9	0f b6 85 0b ff
	ff ff		 movzx	 eax, BYTE PTR $T7[ebp]
  000c0	85 c0		 test	 eax, eax
  000c2	74 63		 je	 SHORT $LN2@Try_emplac

; 316  : 			return (_Mybase::emplace(

  000c4	8d 85 eb fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
  000d0	83 c4 04	 add	 esp, 4
  000d3	50		 push	 eax
  000d4	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 ??$forward@ABQBD@std@@YAABQBDABQBD@Z ; std::forward<char const * const &>
  000dd	83 c4 04	 add	 esp, 4
  000e0	50		 push	 eax
  000e1	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 ??$forward_as_tuple@ABQBD@std@@YA?AV?$tuple@ABQBD@0@ABQBD@Z ; std::forward_as_tuple<char const * const &>
  000ed	83 c4 08	 add	 esp, 8
  000f0	50		 push	 eax
  000f1	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
  000f6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	e8 00 00 00 00	 call	 ??$emplace@ABUpiecewise_construct_t@std@@V?$tuple@ABQBD@2@V?$tuple@$$V@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABQBD@1@$$QAV?$tuple@$$V@1@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::emplace<std::piecewise_construct_t const &,std::tuple<char const * const &>,std::tuple<> >
  00102	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00108	83 c9 01	 or	 ecx, 1
  0010b	89 8d c4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00111	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00118	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  0011b	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  00120	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00123	eb 4e		 jmp	 SHORT $LN1@Try_emplac

; 317  : 				piecewise_construct,
; 318  : 				_STD forward_as_tuple(_STD forward<_Keyty>(_Keyval)),
; 319  : 				_STD forward_as_tuple(_STD forward<_Mappedty>(_Mapval)...)));
; 320  : 		else

  00125	eb 3d		 jmp	 SHORT $LN3@Try_emplac
$LN2@Try_emplac:

; 321  : 			return (_Pairib(_Where, false));

  00127	c6 85 d3 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  0012e	8d 85 d3 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00134	50		 push	 eax
  00135	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00138	51		 push	 ecx
  00139	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0013c	e8 00 00 00 00	 call	 ??$?0AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool><std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > &,bool,0>
  00141	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00147	83 ca 01	 or	 edx, 1
  0014a	89 95 c4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00150	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00157	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  0015a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0015f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00162	eb 0f		 jmp	 SHORT $LN1@Try_emplac
$LN3@Try_emplac:

; 322  : 		}

  00164	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016b	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  0016e	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
$LN1@Try_emplac:
  00173	52		 push	 edx
  00174	8b cd		 mov	 ecx, ebp
  00176	50		 push	 eax
  00177	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Try_emplac
  0017d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00182	58		 pop	 eax
  00183	5a		 pop	 edx
  00184	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00187	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018e	59		 pop	 ecx
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	5b		 pop	 ebx
  00192	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00195	33 cd		 xor	 ecx, ebp
  00197	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019c	81 c4 48 01 00
	00		 add	 esp, 328		; 00000148H
  001a2	3b ec		 cmp	 ebp, esp
  001a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 08 00	 ret	 8
  001af	90		 npad	 1
$LN12@Try_emplac:
  001b0	01 00 00 00	 DD	 1
  001b4	00 00 00 00	 DD	 $LN11@Try_emplac
$LN11@Try_emplac:
  001b8	d4 ff ff ff	 DD	 -44			; ffffffd4H
  001bc	0c 00 00 00	 DD	 12			; 0000000cH
  001c0	00 00 00 00	 DD	 $LN9@Try_emplac
$LN9@Try_emplac:
  001c4	5f		 DB	 95			; 0000005fH
  001c5	57		 DB	 87			; 00000057H
  001c6	68		 DB	 104			; 00000068H
  001c7	65		 DB	 101			; 00000065H
  001c8	72		 DB	 114			; 00000072H
  001c9	65		 DB	 101			; 00000065H
  001ca	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z$1:
  00008	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a b4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-332]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z ENDP ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring_insert.h
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
_TEXT	SEGMENT
tv406 = -332						; size = 8
tv290 = -324						; size = 4
tv287 = -324						; size = 8
tv285 = -324						; size = 4
tv134 = -324						; size = 4
tv324 = -320						; size = 8
tv289 = -320						; size = 4
tv284 = -320						; size = 4
tv286 = -316						; size = 4
tv136 = -316						; size = 4
tv288 = -313						; size = 1
tv283 = -313						; size = 1
$T2 = -308						; size = 4
$T3 = -296						; size = 4
$T4 = -284						; size = 4
$T5 = -272						; size = 4
$T6 = -260						; size = 4
__Ok$ = -56						; size = 8
__Pad$ = -40						; size = 4
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned int>, COMDAT

; 24   : 	{	// insert a character-type sequence into _Ostr as if through a basic_string copy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd b4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-332]
  00021	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 25   : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 26   : 	_SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size

  0004b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00053	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00056	8b f4		 mov	 esi, esp
  00058	8b ca		 mov	 ecx, edx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  0006d	89 95 c4 fe ff
	ff		 mov	 DWORD PTR tv324[ebp+4], edx
  00073	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp+4], 0
  0007a	7c 53		 jl	 SHORT $LN17@Insert_str
  0007c	7f 09		 jg	 SHORT $LN24@Insert_str
  0007e	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp], 0
  00085	76 48		 jbe	 SHORT $LN17@Insert_str
$LN24@Insert_str:
  00087	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0008f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00092	8b f4		 mov	 esi, esp
  00094	8b ca		 mov	 ecx, edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  000a6	76 27		 jbe	 SHORT $LN17@Insert_str
  000a8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ad	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000b0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b3	8b f4		 mov	 esi, esp
  000b5	8b ca		 mov	 ecx, edx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000bd	3b f4		 cmp	 esi, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	2b 45 10	 sub	 eax, DWORD PTR __Size$[ebp]
  000c7	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
  000cd	eb 0a		 jmp	 SHORT $LN18@Insert_str
$LN17@Insert_str:
  000cf	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
$LN18@Insert_str:
  000d9	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv134[ebp]
  000df	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax

; 27   : 		? 0 : static_cast<_SizeT>(_Ostr.width()) - _Size;
; 28   : 	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  000e2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e9	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 29   : 
; 30   : 	if (!_Ok)

  000f5	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000f8	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000fd	0f b6 c0	 movzx	 eax, al
  00100	85 c0		 test	 eax, eax
  00102	75 0e		 jne	 SHORT $LN8@Insert_str

; 31   : 		_State |= ios_base::badbit;

  00104	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00107	83 c8 04	 or	 eax, 4
  0010a	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 32   : 	else

  0010d	e9 a5 02 00 00	 jmp	 $LN9@Insert_str
$LN8@Insert_str:

; 33   : 		{	// state okay, insert characters
; 34   : 		_TRY_IO_BEGIN

  00112	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 35   : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00116	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00119	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0011e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00121	8b f4		 mov	 esi, esp
  00123	8b ca		 mov	 ecx, edx
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv136[ebp], eax
  00138	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0013e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00143	83 f8 40	 cmp	 eax, 64			; 00000040H
  00146	0f 84 c0 00 00
	00		 je	 $LN11@Insert_str

; 36   : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0014c	eb 09		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  0014e	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  00151	83 e8 01	 sub	 eax, 1
  00154	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN4@Insert_str:
  00157	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0015b	0f 86 ab 00 00
	00		 jbe	 $LN11@Insert_str

; 37   : 				if (_Traits::eq_int_type(_Traits::eof(),

  00161	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00169	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016c	8b f4		 mov	 esi, esp
  0016e	8b ca		 mov	 ecx, edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  00183	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00186	8b 08		 mov	 ecx, DWORD PTR [eax]
  00188	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0018b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0018e	8b f4		 mov	 esi, esp
  00190	8b ca		 mov	 ecx, edx
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00198	3b f4		 cmp	 esi, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001a5	8b f4		 mov	 esi, esp
  001a7	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  001ae	50		 push	 eax
  001af	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001bb	3b f4		 cmp	 esi, esp
  001bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c2	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  001c8	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  001ce	89 8d fc fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  001d4	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001d9	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  001df	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  001e5	52		 push	 edx
  001e6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  001f2	83 c4 08	 add	 esp, 8
  001f5	0f b6 c8	 movzx	 ecx, al
  001f8	85 c9		 test	 ecx, ecx
  001fa	74 0b		 je	 SHORT $LN12@Insert_str

; 38   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 39   : 					{	// insertion failed, quit
; 40   : 					_State |= ios_base::badbit;

  001fc	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001ff	83 c8 04	 or	 eax, 4
  00202	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 41   : 					break;

  00205	eb 05		 jmp	 SHORT $LN11@Insert_str
$LN12@Insert_str:

; 42   : 					}
; 43   : 
; 44   : 		if (_State == ios_base::goodbit

  00207	e9 42 ff ff ff	 jmp	 $LN2@Insert_str
$LN11@Insert_str:

; 45   : 			&& _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size)

  0020c	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00210	0f 85 89 00 00
	00		 jne	 $LN13@Insert_str
  00216	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00219	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0021e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00221	8b f4		 mov	 esi, esp
  00223	8b ca		 mov	 ecx, edx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0022b	3b f4		 cmp	 esi, esp
  0022d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00232	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  00238	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  0023b	33 c9		 xor	 ecx, ecx
  0023d	8b f4		 mov	 esi, esp
  0023f	51		 push	 ecx
  00240	50		 push	 eax
  00241	8b 55 0c	 mov	 edx, DWORD PTR __Data$[ebp]
  00244	52		 push	 edx
  00245	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  0024b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00251	3b f4		 cmp	 esi, esp
  00253	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00258	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  0025e	89 95 c0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  00264	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00267	33 c9		 xor	 ecx, ecx
  00269	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv406[ebp], eax
  0026f	89 8d b8 fe ff
	ff		 mov	 DWORD PTR tv406[ebp+4], ecx
  00275	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR tv287[ebp]
  0027b	3b 95 b4 fe ff
	ff		 cmp	 edx, DWORD PTR tv406[ebp]
  00281	75 0e		 jne	 SHORT $LN25@Insert_str
  00283	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp+4]
  00289	3b 85 b8 fe ff
	ff		 cmp	 eax, DWORD PTR tv406[ebp+4]
  0028f	74 0e		 je	 SHORT $LN13@Insert_str
$LN25@Insert_str:

; 46   : 				!= (streamsize)_Size)
; 47   : 				_State |= ios_base::badbit;

  00291	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00294	83 c8 04	 or	 eax, 4
  00297	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 48   : 		else

  0029a	e9 c0 00 00 00	 jmp	 $LN14@Insert_str
$LN13@Insert_str:

; 49   : 			for (; 0 < _Pad; --_Pad)	// pad on right

  0029f	eb 09		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  002a1	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  002a4	83 e8 01	 sub	 eax, 1
  002a7	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN7@Insert_str:
  002aa	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002ae	0f 86 ab 00 00
	00		 jbe	 $LN14@Insert_str

; 50   : 				if (_Traits::eq_int_type(_Traits::eof(),

  002b4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002bc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002bf	8b f4		 mov	 esi, esp
  002c1	8b ca		 mov	 ecx, edx
  002c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002c9	3b f4		 cmp	 esi, esp
  002cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d0	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  002d6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002de	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e1	8b f4		 mov	 esi, esp
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  002f8	8b f4		 mov	 esi, esp
  002fa	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  00301	50		 push	 eax
  00302	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00308	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0030e	3b f4		 cmp	 esi, esp
  00310	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00315	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0031b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  00321	89 8d e4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00327	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0032c	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00332	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00338	52		 push	 edx
  00339	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0033f	50		 push	 eax
  00340	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00345	83 c4 08	 add	 esp, 8
  00348	0f b6 c8	 movzx	 ecx, al
  0034b	85 c9		 test	 ecx, ecx
  0034d	74 0b		 je	 SHORT $LN15@Insert_str

; 51   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 52   : 					{	// insertion failed, quit
; 53   : 					_State |= ios_base::badbit;

  0034f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00352	83 c8 04	 or	 eax, 4
  00355	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 54   : 					break;

  00358	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 55   : 					}

  0035a	e9 42 ff ff ff	 jmp	 $LN5@Insert_str
$LN14@Insert_str:

; 56   : 		_Ostr.width(0);

  0035f	8b f4		 mov	 esi, esp
  00361	6a 00		 push	 0
  00363	6a 00		 push	 0
  00365	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00368	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0036d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00370	8b ca		 mov	 ecx, edx
  00372	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00378	3b f4		 cmp	 esi, esp
  0037a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037f	eb 26		 jmp	 SHORT $LN19@Insert_str
__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0:

; 57   : 		_CATCH_IO_(_Ostr)

  00381	8b f4		 mov	 esi, esp
  00383	6a 01		 push	 1
  00385	6a 04		 push	 4
  00387	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0038a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00392	8b ca		 mov	 ecx, edx
  00394	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0039a	3b f4		 cmp	 esi, esp
  0039c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a1	b8 00 00 00 00	 mov	 eax, $LN23@Insert_str
  003a6	c3		 ret	 0
$LN19@Insert_str:
  003a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003ae	eb 07		 jmp	 SHORT $LN9@Insert_str
$LN23@Insert_str:
  003b0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@Insert_str:

; 58   : 		}
; 59   : 
; 60   : 	_Ostr.setstate(_State);

  003b7	8b f4		 mov	 esi, esp
  003b9	6a 00		 push	 0
  003bb	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003be	50		 push	 eax
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003c4	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c7	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003d0	3b f4		 cmp	 esi, esp
  003d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 61   : 	return (_Ostr);

  003d7	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003da	89 85 cc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003e7	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003ea	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003ef	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 62   : 	}

  003f5	52		 push	 edx
  003f6	8b cd		 mov	 ecx, ebp
  003f8	50		 push	 eax
  003f9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@Insert_str
  003ff	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00404	58		 pop	 eax
  00405	5a		 pop	 edx
  00406	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00409	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00410	59		 pop	 ecx
  00411	5f		 pop	 edi
  00412	5e		 pop	 esi
  00413	5b		 pop	 ebx
  00414	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00417	33 cd		 xor	 ecx, ebp
  00419	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0041e	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  00424	3b ec		 cmp	 ebp, esp
  00426	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0042b	8b e5		 mov	 esp, ebp
  0042d	5d		 pop	 ebp
  0042e	c3		 ret	 0
  0042f	90		 npad	 1
$LN29@Insert_str:
  00430	01 00 00 00	 DD	 1
  00434	00 00 00 00	 DD	 $LN28@Insert_str
$LN28@Insert_str:
  00438	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0043c	08 00 00 00	 DD	 8
  00440	00 00 00 00	 DD	 $LN26@Insert_str
$LN26@Insert_str:
  00444	5f		 DB	 95			; 0000005fH
  00445	4f		 DB	 79			; 0000004fH
  00446	6b		 DB	 107			; 0000006bH
  00447	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 140  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 142  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 128  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 129  :  #if _HAS_EXCEPTIONS
; 130  : 			if (_STD uncaught_exceptions() == 0)

  00042	e8 00 00 00 00	 call	 ?uncaught_exceptions@std@@YAHXZ ; std::uncaught_exceptions
  00047	85 c0		 test	 eax, eax
  00049	75 14		 jne	 SHORT $LN1@sentry

; 131  : 				{
; 132  : 				this->_Myostr._Osfx();

  0004b	8b f4		 mov	 esi, esp
  0004d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 133  : 				}
; 134  :  #else /* _HAS_EXCEPTIONS */
; 135  : 			this->_Myostr._Osfx();
; 136  :  #endif /* _HAS_EXCEPTIONS */
; 137  : 			}

  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 			: _Sentry_base(_Ostr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 6e		 je	 SHORT $LN2@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 4e		 je	 SHORT $LN2@sentry
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b7	74 2d		 je	 SHORT $LN2@sentry

; 123  : 				_Ostr.tie()->flush();

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b ca		 mov	 ecx, edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b f4		 mov	 esi, esp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 125  : 			}

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 			if (_Myostr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 108  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 			: _Myostr(_Ostr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 100  : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 102  : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -273						; size = 1
$T2 = -261						; size = 1
$T3 = -249						; size = 1
__UDest$ = -36						; size = 4
__ULast$ = -24						; size = 4
__UFirst$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT

; 164  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00012	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 165  : 		// note: only called internally from elsewhere in the STL, debug checks
; 166  : 		// and deprecation warnings omitted
; 167  : 	const auto _UFirst = _Unchecked(_First);

  00028	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ; std::_Unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f4	 mov	 DWORD PTR __UFirst$[ebp], eax

; 168  : 	const auto _ULast = _Unchecked(_Last);

  00037	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ; std::_Unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR __ULast$[ebp], eax

; 169  : 	const auto _UDest = _Unchecked(_Dest);

  00046	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@@Z ; std::_Unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
  0004f	83 c4 04	 add	 esp, 4
  00052	89 45 dc	 mov	 DWORD PTR __UDest$[ebp], eax

; 170  : 	return (_Rechecked(_Dest,

  00055	8d 45 dc	 lea	 eax, DWORD PTR __UDest$[ebp]
  00058	50		 push	 eax
  00059	8d 4d f4	 lea	 ecx, DWORD PTR __UFirst$[ebp]
  0005c	51		 push	 ecx
  0005d	8d 95 fb fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Trivially_copyable_ptr_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0@Z ; std::_Ptr_move_cat<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  00069	83 c4 08	 add	 esp, 8
  0006c	8b cc		 mov	 ecx, esp
  0006e	8d 85 07 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
  0007a	0f b6 8d ef fe
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  00081	51		 push	 ecx
  00082	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00085	52		 push	 edx
  00086	8b 45 dc	 mov	 eax, DWORD PTR __UDest$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d e8	 mov	 ecx, DWORD PTR __ULast$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 f4	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  00097	83 c4 18	 add	 esp, 24			; 00000018H
  0009a	50		 push	 eax
  0009b	8d 45 10	 lea	 eax, DWORD PTR __Dest$[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *>
  000a4	83 c4 08	 add	 esp, 8
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]

; 171  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 172  : 			_Ptr_move_cat(_UFirst, _UDest),
; 173  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>())));
; 174  : 	}

  000a9	52		 push	 edx
  000aa	8b cd		 mov	 ecx, ebp
  000ac	50		 push	 eax
  000ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Uninitiali
  000b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b8	58		 pop	 eax
  000b9	5a		 pop	 edx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c0	33 cd		 xor	 ecx, ebp
  000c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c7	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN6@Uninitiali:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN5@Uninitiali
$LN5@Uninitiali:
  000e0	f4 ff ff ff	 DD	 -12			; fffffff4H
  000e4	04 00 00 00	 DD	 4
  000e8	00 00 00 00	 DD	 $LN3@Uninitiali
  000ec	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f0	04 00 00 00	 DD	 4
  000f4	00 00 00 00	 DD	 $LN4@Uninitiali
$LN4@Uninitiali:
  000f8	5f		 DB	 95			; 0000005fH
  000f9	55		 DB	 85			; 00000055H
  000fa	44		 DB	 68			; 00000044H
  000fb	65		 DB	 101			; 00000065H
  000fc	73		 DB	 115			; 00000073H
  000fd	74		 DB	 116			; 00000074H
  000fe	00		 DB	 0
$LN3@Uninitiali:
  000ff	5f		 DB	 95			; 0000005fH
  00100	55		 DB	 85			; 00000055H
  00101	46		 DB	 70			; 00000046H
  00102	69		 DB	 105			; 00000069H
  00103	72		 DB	 114			; 00000072H
  00104	73		 DB	 115			; 00000073H
  00105	74		 DB	 116			; 00000074H
  00106	00		 DB	 0
??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??$_Hash_representation@PBD@std@@YAIABQBD@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Hash_representation@PBD@std@@YAIABQBD@Z PROC	; std::_Hash_representation<char const *>, COMDAT

; 2330 : 	{	// bitwise hashes the representation of a key

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2331 : 	return (_Hash_bytes(&reinterpret_cast<const unsigned char&>(_Keyval), sizeof(_Kty)));

  0001e	6a 04		 push	 4
  00020	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?_Hash_bytes@std@@YAIPBEI@Z ; std::_Hash_bytes
  00029	83 c4 08	 add	 esp, 8

; 2332 : 	}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Hash_representation@PBD@std@@YAIABQBD@Z ENDP	; std::_Hash_representation<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory
;	COMDAT ??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -197						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_fill_n<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT

; 214  : 	{	// copy _Count copies of _Val to raw _First, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 215  : 	return (_Uninit_alloc_fill_n1(_First, _Count, _Val, _Al,

  0001e	0f b6 85 3b ff
	ff ff		 movzx	 eax, BYTE PTR $T1[ebp]
  00025	50		 push	 eax
  00026	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$_Uninit_alloc_fill_n1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Uninit_alloc_fill_n1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  0003b	83 c4 14	 add	 esp, 20			; 00000014H

; 216  : 		_Conjunction_t<decltype(_Fill_memset_is_safe(_First, _Val)),
; 217  : 			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(_Val)>>()));
; 218  : 	}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_fill_n<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > const >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >, COMDAT

; 950  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  : 		_Ptr->~_Uty();
; 952  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$_Fill_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@@Z
_TEXT	SEGMENT
$T1 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@@Z PROC ; std::_Fill_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT

; 2901 : 	{	// copy _Val through [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2902 : 	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00021	50		 push	 eax
  00022	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Fill_memset_is_safe@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV20@@Z ; std::_Fill_memset_is_safe<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  0002b	83 c4 08	 add	 esp, 8
  0002e	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00034	0f b6 95 3b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  0003b	52		 push	 edx
  0003c	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??$_Fill_unchecked1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Fill_unchecked1<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 2903 : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
??$_Fill_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@@Z ENDP ; std::_Fill_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 1045 : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 08		 push	 8
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00049	89 11		 mov	 DWORD PTR [ecx], edx
  0004b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z PROC ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > ><std::allocator<std::pair<char const * const,int> > const &,void>, COMDAT
; _this$ = ecx

; 752  : 		{	// construct from allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 751  : 		: _Mybase(_STD forward<_Any_alloc>(_Al))

  00023	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@U?$pair@QBDH@std@@@std@@@std@@YAABV?$allocator@U?$pair@QBDH@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::pair<char const * const,int> > const &>
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > ><std::allocator<std::pair<char const * const,int> > const &,void>

; 753  : 		}

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ENDP ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > ><std::allocator<std::pair<char const * const,int> > const &,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$?0U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<std::pair<char const * const,int>,void *> >, COMDAT
; _this$ = ecx

; 1045 : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<std::pair<char const * const,int>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Node_alloc$ = -21					; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >, COMDAT

; 414  : 			{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00020	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 415  : 			using _Alnode = _Rebind_alloc_t<_Alloc, _List_node>;
; 416  : 			using _Alnode_traits = allocator_traits<_Alnode>;
; 417  : 			_Alnode _Node_alloc(_Al);
; 418  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Next));

  00040	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<std::pair<char const * const,int>,void *> *>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8d 4d eb	 lea	 ecx, DWORD PTR __Node_alloc$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::_List_node<std::pair<char const * const,int>,void *> *>
  00056	83 c4 08	 add	 esp, 8

; 419  : 			_Alnode_traits::destroy(_Node_alloc, _STD addressof(_Ptr->_Prev));

  00059	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005c	83 c0 04	 add	 eax, 4
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<std::pair<char const * const,int>,void *> *>
  00065	83 c4 04	 add	 esp, 4
  00068	50		 push	 eax
  00069	8d 4d eb	 lea	 ecx, DWORD PTR __Node_alloc$[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::_List_node<std::pair<char const * const,int>,void *> *>
  00072	83 c4 08	 add	 esp, 8

; 420  : 			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);

  00075	6a 01		 push	 1
  00077	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d eb	 lea	 ecx, DWORD PTR __Node_alloc$[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::deallocate
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH

; 421  : 			}

  00087	52		 push	 edx
  00088	8b cd		 mov	 ecx, ebp
  0008a	50		 push	 eax
  0008b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Freenode0
  00091	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00096	58		 pop	 eax
  00097	5a		 pop	 edx
  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
  000c1	0f 1f 00	 npad	 3
$LN6@Freenode0:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN5@Freenode0
$LN5@Freenode0:
  000cc	eb ff ff ff	 DD	 -21			; ffffffebH
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN3@Freenode0
$LN3@Freenode0:
  000d8	5f		 DB	 95			; 0000005fH
  000d9	4e		 DB	 78			; 0000004eH
  000da	6f		 DB	 111			; 0000006fH
  000db	64		 DB	 100			; 00000064H
  000dc	65		 DB	 101			; 00000065H
  000dd	5f		 DB	 95			; 0000005fH
  000de	61		 DB	 97			; 00000061H
  000df	6c		 DB	 108			; 0000006cH
  000e0	6c		 DB	 108			; 0000006cH
  000e1	6f		 DB	 111			; 0000006fH
  000e2	63		 DB	 99			; 00000063H
  000e3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 20 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-224]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > ><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &,void>, COMDAT
; _this$ = ecx

; 499  : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 497  : 		: _Mypair(_One_then_variadic_args_t(),

  00042	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>
  0004b	83 c4 04	 add	 esp, 4
  0004e	50		 push	 eax
  0004f	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  00056	51		 push	 ecx
  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &>
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 500  : 		_Alloc_proxy();

  00066	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Alloc_proxy

; 501  : 		}

  0006e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@XZ
__ehhandler$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > ><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &,void>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT

; 1209 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1210 : 		// note that this is an optimization for debug mode codegen;
; 1211 : 		// in release mode the BE removes all of this
; 1212 : 	using _Val = typename _Alloc::value_type;
; 1213 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

  0001e	0f b6 85 3b ff
	ff ff		 movzx	 eax, BYTE PTR $T1[ebp]
  00025	50		 push	 eax
  00026	8b 4d 10	 mov	 ecx, DWORD PTR __Al$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 1214 : 		is_trivially_destructible<_Val>,
; 1215 : 		_Uses_default_destroy<_Alloc, _Val *>>());
; 1216 : 	}

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1317 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1318 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

  0001e	6a 01		 push	 1
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1319 : 	}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 950  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  : 		_Ptr->~_Uty();
; 952  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 936  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 937  : 		_Deallocate(_Ptr, _Count, sizeof(value_type), alignof(value_type));

  0001e	6a 04		 push	 4
  00020	6a 08		 push	 8
  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$?0V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >, COMDAT
; _this$ = ecx

; 1045 : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 04		 push	 4
  00025	6a 08		 push	 8
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z PROC ; std::addressof<std::pair<char const * const,int> >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ENDP ; std::addressof<std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z
_TEXT	SEGMENT
__Ptr$1 = -44						; size = 4
__Ptr_container$2 = -32					; size = 4
__Block_size$3 = -20					; size = 4
__User_size$ = -8					; size = 4
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Align$ = 16						; size = 4
??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z PROC ; std::_Allocate<std::_Default_allocate_traits<1> >, COMDAT

; 77   : 	{	// allocate storage for _Count elements of size _Sz with alignment _Align

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 78   : 	if (_Count == 0)

  0001e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00022	75 07		 jne	 SHORT $LN2@Allocate

; 79   : 		{
; 80   : 		return (nullptr);

  00024	33 c0		 xor	 eax, eax
  00026	e9 04 01 00 00	 jmp	 $LN7@Allocate
$LN2@Allocate:

; 81   : 		}
; 82   : 
; 83   : 	// check overflow of multiply
; 84   : 	if (static_cast<size_t>(-1) / _Sz < _Count)

  0002b	83 c8 ff	 or	 eax, -1
  0002e	33 d2		 xor	 edx, edx
  00030	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00033	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  00036	73 05		 jae	 SHORT $LN3@Allocate

; 85   : 		{
; 86   : 		_Traits::_Fail();	// report no memory

  00038	e8 00 00 00 00	 call	 ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
$LN3@Allocate:

; 87   : 		}
; 88   : 
; 89   : 	const size_t _User_size = _Count * _Sz;

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00040	0f af 45 0c	 imul	 eax, DWORD PTR __Sz$[ebp]
  00044	89 45 f8	 mov	 DWORD PTR __User_size$[ebp], eax

; 90   : 
; 91   : #if defined(_M_IX86) || defined(_M_X64)
; 92   : 	// Boost the alignment of big allocations to help autovectorization.
; 93   :  #pragma warning(push)
; 94   :  #pragma warning(disable: 4127) // conditional expression is constant
; 95   :  #pragma warning(disable: 6326) // Potential comparison of a constant with another constant
; 96   : 	if (_Traits::_Try_aligned_allocation && _User_size >= _Big_allocation_threshold)

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 cb 00 00
	00		 je	 $LN4@Allocate
  00054	81 7d f8 00 10
	00 00		 cmp	 DWORD PTR __User_size$[ebp], 4096 ; 00001000H
  0005b	0f 82 be 00 00
	00		 jb	 $LN4@Allocate

; 97   : 		{
; 98   :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 99   : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 100  : 			{	// allocation will use aligned new
; 101  : 			if /* constexpr */ (__STDCPP_DEFAULT_NEW_ALIGNMENT__ * 2 >= _Big_allocation_alignment)
; 102  : 				{	// There are no valid alignments between __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 103  : 					// and _Big_allocation_alignment; the below conditional is dead.
; 104  : 				}
; 105  : 			else
; 106  : 				{
; 107  : 				if (_Align < _Big_allocation_alignment)
; 108  : 					{	// boost alignment
; 109  : 					_Align = _Big_allocation_alignment;
; 110  : 					}
; 111  : 				}
; 112  : 			}
; 113  : 		else
; 114  :  #endif /* _HAS_ALIGNED_NEW */
; 115  : 			{	// allocation will use unaligned new; boost alignment manually
; 116  : 			const size_t _Block_size = _Non_user_size + _User_size;

  00061	8b 45 f8	 mov	 eax, DWORD PTR __User_size$[ebp]
  00064	83 c0 27	 add	 eax, 39			; 00000027H
  00067	89 45 ec	 mov	 DWORD PTR __Block_size$3[ebp], eax

; 117  : 			if (_Block_size <= _User_size)

  0006a	8b 45 ec	 mov	 eax, DWORD PTR __Block_size$3[ebp]
  0006d	3b 45 f8	 cmp	 eax, DWORD PTR __User_size$[ebp]
  00070	77 05		 ja	 SHORT $LN5@Allocate

; 118  : 				{
; 119  : 				_Traits::_Fail();	// report no memory

  00072	e8 00 00 00 00	 call	 ?_Fail@?$_Default_allocate_traits@$00@std@@SAXXZ ; std::_Default_allocate_traits<1>::_Fail
$LN5@Allocate:

; 120  : 				}
; 121  : 
; 122  : 			const uintptr_t _Ptr_container =
; 123  : 				reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00077	8b 45 ec	 mov	 eax, DWORD PTR __Block_size$3[ebp]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00080	83 c4 04	 add	 esp, 4
  00083	89 45 e0	 mov	 DWORD PTR __Ptr_container$2[ebp], eax

; 124  : 			_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00086	83 7d e0 00	 cmp	 DWORD PTR __Ptr_container$2[ebp], 0
  0008a	75 5f		 jne	 SHORT $LN6@Allocate
  0008c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
  00091	85 c0		 test	 eax, eax
  00093	74 04		 je	 SHORT $LN8@Allocate
  00095	33 c9		 xor	 ecx, ecx
  00097	75 2d		 jne	 SHORT $LN9@Allocate
$LN8@Allocate:
  00099	8b f4		 mov	 esi, esp
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  000a5	6a 00		 push	 0
  000a7	6a 7c		 push	 124			; 0000007cH
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000ae	6a 02		 push	 2
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000b6	83 c4 18	 add	 esp, 24			; 00000018H
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	83 f8 01	 cmp	 eax, 1
  000c3	75 01		 jne	 SHORT $LN9@Allocate
  000c5	cc		 int	 3
$LN9@Allocate:
  000c6	8b f4		 mov	 esi, esp
  000c8	6a 00		 push	 0
  000ca	6a 7c		 push	 124			; 0000007cH
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000e1	83 c4 14	 add	 esp, 20			; 00000014H
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Allocate:

; 125  : 			void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 126  : 				& ~(_Big_allocation_alignment - 1));

  000eb	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$2[ebp]
  000ee	83 c0 27	 add	 eax, 39			; 00000027H
  000f1	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000f4	89 45 d4	 mov	 DWORD PTR __Ptr$1[ebp], eax

; 127  : 			static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000f7	b8 04 00 00 00	 mov	 eax, 4
  000fc	6b c8 ff	 imul	 ecx, eax, -1
  000ff	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$1[ebp]
  00102	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$2[ebp]
  00105	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 128  : 
; 129  :  #ifdef _DEBUG
; 130  : 			static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	6b c8 fe	 imul	 ecx, eax, -2
  00110	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$1[ebp]
  00113	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 131  :  #endif /* _DEBUG */
; 132  : 			return (_Ptr);

  0011a	8b 45 d4	 mov	 eax, DWORD PTR __Ptr$1[ebp]
  0011d	eb 10		 jmp	 SHORT $LN7@Allocate
$LN4@Allocate:

; 133  : 			}
; 134  : 		}
; 135  :  #pragma warning(pop)
; 136  : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	return (_Traits::_Get_bytes(_User_size, _Align));

  0011f	8b 45 10	 mov	 eax, DWORD PTR __Align$[ebp]
  00122	50		 push	 eax
  00123	8b 4d f8	 mov	 ecx, DWORD PTR __User_size$[ebp]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ?_Get_bytes@?$_Default_allocate_traits@$00@std@@SAPAXII@Z ; std::_Default_allocate_traits<1>::_Get_bytes
  0012c	83 c4 08	 add	 esp, 8
$LN7@Allocate:

; 139  : 	}

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ENDP ; std::_Allocate<std::_Default_allocate_traits<1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 943  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	89 02		 mov	 DWORD PTR [edx], eax

; 944  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 945  : 			_Objty(_STD forward<_Types>(_Args)...);
; 946  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -72					; size = 4
__Al$ = -60						; size = 4
__New_capacity$ = -48					; size = 4
__Old_capacity$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3594 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3595 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3596 : 		if (_New_size > max_size())

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00038	76 05		 jbe	 SHORT $LN2@Reallocate

; 3597 : 			{
; 3598 : 			_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3599 : 			}
; 3600 : 
; 3601 : 		auto& _My_data = this->_Get_data();

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00047	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3602 : 		const size_type _Old_capacity = _My_data._Myres;

  0004a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	89 4d dc	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3603 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00053	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005f	89 45 d0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3604 : 		auto& _Al = this->_Getal();

  00062	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0006a	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 3605 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0006d	33 c0		 xor	 eax, eax
  0006f	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00072	83 c1 01	 add	 ecx, 1
  00075	0f 92 c0	 setb	 al
  00078	f7 d8		 neg	 eax
  0007a	0b c1		 or	 eax, ecx
  0007c	50		 push	 eax
  0007d	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00080	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00085	89 45 b8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3606 : 		_My_data._Orphan_all();

  00088	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3607 : 		_My_data._Mysize = _New_size;

  00090	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00096	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3608 : 		_My_data._Myres = _New_capacity;

  00099	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009c	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0009f	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3609 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000a2	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000a9	51		 push	 ecx
  000aa	8b 55 b8	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000ba	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 3610 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000bf	83 7d dc 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000c3	72 21		 jb	 SHORT $LN3@Reallocate

; 3611 : 			{
; 3612 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000c5	8b 45 dc	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000c8	83 c0 01	 add	 eax, 1
  000cb	50		 push	 eax
  000cc	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d2	52		 push	 edx
  000d3	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3613 : 			_My_data._Bx._Ptr = _New_ptr;

  000db	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000de	8b 4d b8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3614 : 			}
; 3615 : 		else

  000e4	eb 20		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3616 : 			{
; 3617 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  000e6	8d 45 b8	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000e9	50		 push	 eax
  000ea	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ed	83 c1 04	 add	 ecx, 4
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000f6	83 c4 04	 add	 esp, 4
  000f9	50		 push	 eax
  000fa	8b 55 c4	 mov	 edx, DWORD PTR __Al$[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3618 : 			}
; 3619 : 
; 3620 : 		return (*this);

  00106	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3621 : 		}

  00109	52		 push	 edx
  0010a	8b cd		 mov	 ecx, ebp
  0010c	50		 push	 eax
  0010d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00113	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00118	58		 pop	 eax
  00119	5a		 pop	 edx
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00120	33 cd		 xor	 ecx, ebp
  00122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00127	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 0c 00	 ret	 12			; 0000000cH
  0013a	66 90		 npad	 2
$LN8@Reallocate:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00144	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00148	04 00 00 00	 DD	 4
  0014c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00150	5f		 DB	 95			; 0000005fH
  00151	4e		 DB	 78			; 0000004eH
  00152	65		 DB	 101			; 00000065H
  00153	77		 DB	 119			; 00000077H
  00154	5f		 DB	 95			; 0000005fH
  00155	70		 DB	 112			; 00000070H
  00156	74		 DB	 116			; 00000074H
  00157	72		 DB	 114			; 00000072H
  00158	00		 DB	 0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2429 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2430 : 			_Traits::copy(_New_ptr, _Ptr, _Count);

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2431 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  00037	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0003e	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00048	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00051	83 c4 08	 add	 esp, 8

; 2432 : 			}, _Ptr));

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 31   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 32   : 	return (_Left < _Right ? _Right : _Left);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 0b		 jae	 SHORT $LN3@Max_value
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
  0003e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 33   : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 950  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 951  : 		_Ptr->~_Uty();
; 952  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 311  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 312  : 		{	// construct from forwarded values
; 313  : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??$?0AAU?$hash@PBD@std@@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@M@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$hash@PBD@1@$$QAU21@AAU?$equal_to@PBD@1@$$QAM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
_<_Val2_2>$ = 24					; size = 4
??$?0AAU?$hash@PBD@std@@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@M@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$hash@PBD@1@$$QAU21@AAU?$equal_to@PBD@1@$$QAM@Z PROC ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1><std::hash<char const *> &,std::_One_then_variadic_args_t,std::equal_to<char const *> &,float>, COMDAT
; _this$ = ecx

; 319  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@AAU?$hash@PBD@std@@@std@@YAAAU?$hash@PBD@0@AAU10@@Z ; std::forward<std::hash<char const *> &>
  0002c	83 c4 04	 add	 esp, 4

; 320  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  0002f	8b 45 18	 mov	 eax, DWORD PTR _<_Val2_2>$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$forward@M@std@@YA$$QAMAAM@Z ; std::forward<float>
  00038	83 c4 04	 add	 esp, 4
  0003b	50		 push	 eax
  0003c	8b 4d 14	 mov	 ecx, DWORD PTR _<_Val2_1>$[ebp]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 ??$forward@AAU?$equal_to@PBD@std@@@std@@YAAAU?$equal_to@PBD@0@AAU10@@Z ; std::forward<std::equal_to<char const *> &>
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	8b 55 10	 mov	 edx, DWORD PTR _<_Val2_0>$[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_One_then_variadic_args_t>
  00052	83 c4 04	 add	 esp, 4
  00055	8a 00		 mov	 al, BYTE PTR [eax]
  00057	0f b6 c8	 movzx	 ecx, al
  0005a	51		 push	 ecx
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$?0AAU?$equal_to@PBD@std@@M@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@$$QAM@Z ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Compressed_pair<std::equal_to<char const *>,float,1><std::equal_to<char const *> &,float>

; 321  : 		{	// construct from forwarded values
; 322  : 		}

  00063	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 14 00	 ret	 20			; 00000014H
??$?0AAU?$hash@PBD@std@@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@M@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$hash@PBD@1@$$QAU21@AAU?$equal_to@PBD@1@$$QAM@Z ENDP ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1><std::hash<char const *> &,std::_One_then_variadic_args_t,std::equal_to<char const *> &,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$?0U?$pair@QBDH@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@QBDH@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z PROC ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > ><std::pair<char const * const,int> >, COMDAT
; _this$ = ecx

; 1045 : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0U?$pair@QBDH@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ENDP ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > ><std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\unordered_map
;	COMDAT ??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z PROC ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>, COMDAT

; 71   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 72   : 		return (_Val.first);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 73   : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ENDP ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator--, COMDAT
; _this$ = ecx

; 139  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 140  : 		--(*(_Mybase *)this);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator--

; 141  : 		return (*this);

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 142  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++, COMDAT
; _this$ = ecx

; 126  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 127  : 		++(*(_Mybase *)this);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator++

; 128  : 		return (*this);

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 129  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*, COMDAT
; _this$ = ecx

; 116  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 		return ((reference)**(_Mybase *)this);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDH@1@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator*

; 118  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx

; 112  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 111  : 		: _Mybase(_Pnode, _Plist)

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>

; 113  : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx

; 106  : 	_List_unchecked_iterator()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 		{	// construct with null node

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>

; 108  : 		}

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=, COMDAT
; _this$ = ecx

; 84   : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 		return (!(*this == _Right));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  0002f	0f b6 c8	 movzx	 ecx, al
  00032	85 c9		 test	 ecx, ecx
  00034	75 0c		 jne	 SHORT $LN3@operator
  00036	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  00040	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00042	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  0004c	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]

; 86   : 		}

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv67 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==, COMDAT
; _this$ = ecx

; 79   : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 		return (_Ptr == _Right._Ptr);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002d	75 0c		 jne	 SHORT $LN3@operator
  0002f	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  00039	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0003b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN4@operator:
  00045	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv67[ebp]

; 81   : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 66   : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 		_Ptr = _Ptr->_Prev;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002e	89 02		 mov	 DWORD PTR [edx], eax

; 68   : 		return (*this);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 69   : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 53   : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 		_Ptr = _Ptr->_Next;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 55   : 		return (*this);

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 56   : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDH@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDH@1@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 43   : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 		return (_Ptr->_Myval);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	83 c0 08	 add	 eax, 8

; 45   : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDH@1@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 		: _Ptr(_Pnode)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 39   : 		this->_Adopt(_Plist);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 40   : 		}

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 33   : 		{	// construct with null node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 		: _Ptr()

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 34   : 		}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@QBDH@std@@@std@@SAPAU?$pair@QBDH@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@QBDH@std@@@std@@SAPAU?$pair@QBDH@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<char const * const,int> *>::pointer_to, COMDAT

; 378  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 379  : 		return (_STD addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
  00027	83 c4 04	 add	 esp, 4

; 380  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@QBDH@std@@@std@@SAPAU?$pair@QBDH@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<char const * const,int> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 23   : 	return (_Right < _Left ? _Right : _Left);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 0b		 jae	 SHORT $LN3@Min_value
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0003e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 24   : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::~pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>::~pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\unordered_map
;	COMDAT ??$try_emplace@$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$try_emplace@$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z PROC ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::try_emplace<>, COMDAT
; _this$ = ecx

; 327  : 		{	// fail if _Keyval present, else emplace

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 328  : 		return (_Try_emplace(_Keyval, _STD forward<_Mappedty>(_Mapval)...));

  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??$_Try_emplace@ABQBD$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::_Try_emplace<char const * const &>
  0003d	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00043	83 ca 01	 or	 edx, 1
  00046	89 95 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 329  : 		}

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
??$try_emplace@$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z ENDP ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::try_emplace<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 981  : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 982  : 	_Ostr.put(_Ostr.widen('\n'));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b f4		 mov	 esi, esp
  0003e	0f b6 c0	 movzx	 eax, al
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 983  : 	_Ostr.flush();

  00052	8b f4		 mov	 esi, esp
  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 984  : 	return (_Ostr);

  00064	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 985  : 	}

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\string
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 168  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 169  : 	return (_Insert_string(_Ostr, _Str.data(), _Str.size()));

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00021	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0002a	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  0002f	50		 push	 eax
  00030	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 	}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv342 = -348						; size = 8
tv290 = -344						; size = 4
tv287 = -344						; size = 8
tv285 = -344						; size = 4
tv328 = -340						; size = 8
tv289 = -340						; size = 4
tv284 = -340						; size = 4
tv286 = -336						; size = 4
tv137 = -336						; size = 4
tv288 = -333						; size = 1
tv283 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 770  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 771  : 	typedef char _Elem;
; 772  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 773  : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 774  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0004b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00054	83 c4 04	 add	 esp, 4
  00057	33 c9		 xor	 ecx, ecx
  00059	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0005c	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 775  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv328[ebp], eax
  00081	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv328[ebp+4], edx
  00087	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp+4], 0
  0008e	7c 79		 jl	 SHORT $LN17@operator
  00090	7f 09		 jg	 SHORT $LN24@operator
  00092	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp], 0
  00099	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  0009b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a6	8b f4		 mov	 esi, esp
  000a8	8b ca		 mov	 ecx, edx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  000bd	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  000c3	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp+4]
  000c9	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000cc	7c 3b		 jl	 SHORT $LN17@operator
  000ce	7f 0b		 jg	 SHORT $LN25@operator
  000d0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv342[ebp]
  000d6	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000d9	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000de	8b 02		 mov	 eax, DWORD PTR [edx]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e3	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000e6	8b f4		 mov	 esi, esp
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000f8	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000fb	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00101	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00107	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00109	0f 57 c0	 xorps	 xmm0, xmm0
  0010c	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  00114	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  0011a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0011d	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00123	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 776  : 		? 0 : _Ostr.width() - _Count;
; 777  : 	const typename _Myos::sentry _Ok(_Ostr);

  00126	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0012d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00132	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 778  : 
; 779  : 	if (!_Ok)

  00139	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0013c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00141	0f b6 c0	 movzx	 eax, al
  00144	85 c0		 test	 eax, eax
  00146	75 0e		 jne	 SHORT $LN8@operator

; 780  : 		_State |= ios_base::badbit;

  00148	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0014b	83 c8 04	 or	 eax, 4
  0014e	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 781  : 	else

  00151	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 782  : 		{	// state okay, insert
; 783  : 		_TRY_IO_BEGIN

  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 784  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0015a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00162	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00165	8b f4		 mov	 esi, esp
  00167	8b ca		 mov	 ecx, edx
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0016f	3b f4		 cmp	 esi, esp
  00171	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00176	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  0017c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00182	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00187	83 f8 40	 cmp	 eax, 64			; 00000040H
  0018a	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 785  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00190	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00192	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00195	83 e8 01	 sub	 eax, 1
  00198	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0019b	83 d9 00	 sbb	 ecx, 0
  0019e	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001a1	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001a4	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a8	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001ae	7f 0a		 jg	 SHORT $LN26@operator
  001b0	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001b4	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 786  : 				if (_Traits::eq_int_type(_Traits::eof(),

  001ba	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c5	8b f4		 mov	 esi, esp
  001c7	8b ca		 mov	 ecx, edx
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d6	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  001dc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001e7	8b f4		 mov	 esi, esp
  001e9	8b ca		 mov	 ecx, edx
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001fe	8b f4		 mov	 esi, esp
  00200	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  00207	50		 push	 eax
  00208	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00214	3b f4		 cmp	 esi, esp
  00216	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021b	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00221	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00227	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0022d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00232	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00238	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0023e	52		 push	 edx
  0023f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0024b	83 c4 08	 add	 esp, 8
  0024e	0f b6 c8	 movzx	 ecx, al
  00251	85 c9		 test	 ecx, ecx
  00253	74 0b		 je	 SHORT $LN12@operator

; 787  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 788  : 					{	// insertion failed, quit
; 789  : 					_State |= ios_base::badbit;

  00255	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00258	83 c8 04	 or	 eax, 4
  0025b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 790  : 					break;

  0025e	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 791  : 					}
; 792  : 
; 793  : 		if (_State == ios_base::goodbit

  00260	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 794  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00265	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00269	75 6e		 jne	 SHORT $LN13@operator
  0026b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0026e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00270	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00273	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00276	8b f4		 mov	 esi, esp
  00278	8b ca		 mov	 ecx, edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0028d	8b f4		 mov	 esi, esp
  0028f	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00292	50		 push	 eax
  00293	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00296	51		 push	 ecx
  00297	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0029a	52		 push	 edx
  0029b	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002a7	3b f4		 cmp	 esi, esp
  002a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ae	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  002b4	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  002ba	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  002c0	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002c3	75 0b		 jne	 SHORT $LN27@operator
  002c5	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp+4]
  002cb	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002ce	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 795  : 			_State |= ios_base::badbit;

  002d0	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002d3	83 c8 04	 or	 eax, 4
  002d6	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 796  : 
; 797  : 		if (_State == ios_base::goodbit)

  002d9	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002dd	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 798  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002e3	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002e5	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002e8	83 e8 01	 sub	 eax, 1
  002eb	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ee	83 d9 00	 sbb	 ecx, 0
  002f1	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002f4	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002f7	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002fb	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  00301	7f 0a		 jg	 SHORT $LN28@operator
  00303	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00307	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 799  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0030d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00310	8b 08		 mov	 ecx, DWORD PTR [eax]
  00312	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00315	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00318	8b f4		 mov	 esi, esp
  0031a	8b ca		 mov	 ecx, edx
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00322	3b f4		 cmp	 esi, esp
  00324	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00329	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  0032f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00332	8b 08		 mov	 ecx, DWORD PTR [eax]
  00334	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00337	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0033a	8b f4		 mov	 esi, esp
  0033c	8b ca		 mov	 ecx, edx
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00344	3b f4		 cmp	 esi, esp
  00346	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  00351	8b f4		 mov	 esi, esp
  00353	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  0035a	50		 push	 eax
  0035b	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00367	3b f4		 cmp	 esi, esp
  00369	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036e	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00374	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0037a	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0038b	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00391	52		 push	 edx
  00392	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0039e	83 c4 08	 add	 esp, 8
  003a1	0f b6 c8	 movzx	 ecx, al
  003a4	85 c9		 test	 ecx, ecx
  003a6	74 0b		 je	 SHORT $LN15@operator

; 800  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 801  : 					{	// insertion failed, quit
; 802  : 					_State |= ios_base::badbit;

  003a8	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003ab	83 c8 04	 or	 eax, 4
  003ae	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 803  : 					break;

  003b1	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 804  : 					}

  003b3	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 805  : 		_Ostr.width(0);

  003b8	8b f4		 mov	 esi, esp
  003ba	6a 00		 push	 0
  003bc	6a 00		 push	 0
  003be	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c9	8b ca		 mov	 ecx, edx
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003d1	3b f4		 cmp	 esi, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 806  : 		_CATCH_IO_(_Ostr)

  003da	8b f4		 mov	 esi, esp
  003dc	6a 01		 push	 1
  003de	6a 04		 push	 4
  003e0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003e8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003eb	8b ca		 mov	 ecx, edx
  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003f3	3b f4		 cmp	 esi, esp
  003f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fa	b8 00 00 00 00	 mov	 eax, $LN23@operator
  003ff	c3		 ret	 0
$LN19@operator:
  00400	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00407	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00409	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 807  : 		}
; 808  : 
; 809  : 	_Ostr.setstate(_State);

  00410	8b f4		 mov	 esi, esp
  00412	6a 00		 push	 0
  00414	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00417	50		 push	 eax
  00418	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0041b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0041d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00420	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00423	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00429	3b f4		 cmp	 esi, esp
  0042b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 810  : 	return (_Ostr);

  00430	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00433	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00439	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00440	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00443	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00448	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 811  : 	}

  0044e	52		 push	 edx
  0044f	8b cd		 mov	 ecx, ebp
  00451	50		 push	 eax
  00452	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00458	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045d	58		 pop	 eax
  0045e	5a		 pop	 edx
  0045f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00462	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00469	59		 pop	 ecx
  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00470	33 cd		 xor	 ecx, ebp
  00472	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00477	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  0047d	3b ec		 cmp	 ebp, esp
  0047f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00484	8b e5		 mov	 esp, ebp
  00486	5d		 pop	 ebp
  00487	c3		 ret	 0
$LN32@operator:
  00488	01 00 00 00	 DD	 1
  0048c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00490	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00494	08 00 00 00	 DD	 8
  00498	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0049c	5f		 DB	 95			; 0000005fH
  0049d	4f		 DB	 79			; 0000004fH
  0049e	6b		 DB	 107			; 0000006bH
  0049f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::~_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::~_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPAU?$pair@QBDH@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPAU?$pair@QBDH@1@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator->, COMDAT
; _this$ = ecx

; 335  : 		{	// return pointer to class object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 336  : 		return (pointer_traits<pointer>::pointer_to(**this));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAU?$pair@QBDH@std@@@std@@SAPAU?$pair@QBDH@2@AAU32@@Z ; std::pointer_traits<std::pair<char const * const,int> *>::pointer_to
  00031	83 c4 04	 add	 esp, 4

; 337  : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPAU?$pair@QBDH@1@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*, COMDAT
; _this$ = ecx

; 330  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 331  : 		return ((reference)**(_Mybase *)this);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*

; 332  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx

; 324  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 323  : 		: _Mybase(_Pnode, _Plist)

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >

; 325  : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv128 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==, COMDAT
; _this$ = ecx

; 267  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 268  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 269  : 		if (this->_Getcont() != _Right._Getcont())

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002b	8b f0		 mov	 esi, eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00035	3b f0		 cmp	 esi, eax
  00037	74 3f		 je	 SHORT $LN2@operator

; 270  : 			{	// report error
; 271  : 			_DEBUG_ERROR("list iterators incompatible");

  00039	68 0f 01 00 00	 push	 271			; 0000010fH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
  00048	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b f4		 mov	 esi, esp
  00052	6a 00		 push	 0
  00054	68 0f 01 00 00	 push	 271			; 0000010fH
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1BBE@FDPLHAKA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$CC?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 272  : 			}
; 273  : 
; 274  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 275  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);

  00078	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0007e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00081	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00084	75 0c		 jne	 SHORT $LN4@operator
  00086	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv128[ebp], 1
  00090	eb 0a		 jmp	 SHORT $LN5@operator
$LN4@operator:
  00092	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN5@operator:
  0009c	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv128[ebp]

; 279  : 		}

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000ab	3b ec		 cmp	 ebp, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
$T2 = -248						; size = 4
__Tmp$ = -44						; size = 12
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++, COMDAT
; _this$ = ecx

; 228  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00021	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 229  : 		_List_const_iterator _Tmp = *this;

  0004f	6a 0c		 push	 12			; 0000000cH
  00051	8d 4d d4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00054	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00059	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	50		 push	 eax
  0005d	8d 4d d4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00060	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 230  : 		++*this;

  0006c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++

; 231  : 		return (_Tmp);

  00074	8d 45 d4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00077	50		 push	 eax
  00078	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0007b	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00080	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00086	83 c9 01	 or	 ecx, 1
  00089	89 8d 08 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0008f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00096	8d 4d d4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00099	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0009e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 232  : 		}

  000a1	52		 push	 edx
  000a2	8b cd		 mov	 ecx, ebp
  000a4	50		 push	 eax
  000a5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@operator
  000ab	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b0	58		 pop	 eax
  000b1	5a		 pop	 edx
  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c3	33 cd		 xor	 ecx, ebp
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000d0	3b ec		 cmp	 ebp, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
  000dd	0f 1f 00	 npad	 3
$LN9@operator:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN8@operator
$LN8@operator:
  000e8	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000ec	0c 00 00 00	 DD	 12			; 0000000cH
  000f0	00 00 00 00	 DD	 $LN6@operator
$LN6@operator:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	54		 DB	 84			; 00000054H
  000f6	6d		 DB	 109			; 0000006dH
  000f7	70		 DB	 112			; 00000070H
  000f8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 00 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-256]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -20						; size = 4
_this$ = -8						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++, COMDAT
; _this$ = ecx

; 206  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 207  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 208  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002b	89 45 ec	 mov	 DWORD PTR __Mycont$[ebp], eax

; 209  : 		if (_Mycont == 0
; 210  : 			|| this->_Ptr == nullptr
; 211  : 			|| this->_Ptr == _Mycont->_Myhead)

  0002e	83 7d ec 00	 cmp	 DWORD PTR __Mycont$[ebp], 0
  00032	74 17		 je	 SHORT $LN3@operator
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003b	74 0e		 je	 SHORT $LN3@operator
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d ec	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  00043	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00046	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00049	75 3f		 jne	 SHORT $LN2@operator
$LN3@operator:

; 212  : 			{	// report error
; 213  : 			_DEBUG_ERROR("list iterator not incrementable");

  0004b	68 d5 00 00 00	 push	 213			; 000000d5H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
  0005a	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	8b f4		 mov	 esi, esp
  00064	6a 00		 push	 0
  00066	68 d5 00 00 00	 push	 213			; 000000d5H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1BBE@PDAGJJGF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@OACBNFCA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe@
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 214  : 			}
; 215  : 
; 216  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 217  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr);
; 218  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 219  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 220  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 221  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 222  : 
; 223  : 		this->_Ptr = this->_Ptr->_Next;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00090	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00093	8b 01		 mov	 eax, DWORD PTR [ecx]
  00095	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 224  : 		return (*this);

  00098	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 225  : 		}

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ
_TEXT	SEGMENT
__Mycont$ = -20						; size = 4
_this$ = -8						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*, COMDAT
; _this$ = ecx

; 180  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 181  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 182  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002b	89 45 ec	 mov	 DWORD PTR __Mycont$[ebp], eax

; 183  : 		if (_Mycont == 0
; 184  : 			|| this->_Ptr == nullptr
; 185  : 			|| this->_Ptr == _Mycont->_Myhead)

  0002e	83 7d ec 00	 cmp	 DWORD PTR __Mycont$[ebp], 0
  00032	74 17		 je	 SHORT $LN3@operator
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003b	74 0e		 je	 SHORT $LN3@operator
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d ec	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  00043	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00046	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00049	75 3f		 jne	 SHORT $LN2@operator
$LN3@operator:

; 186  : 			{	// report error
; 187  : 			_DEBUG_ERROR("list iterator not dereferencable");

  0004b	68 bb 00 00 00	 push	 187			; 000000bbH
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@
  0005a	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	8b f4		 mov	 esi, esp
  00064	6a 00		 push	 0
  00066	68 bb 00 00 00	 push	 187			; 000000bbH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1BBC@PGIAJODP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@JEFJOLGA@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl@
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00080	83 c4 14	 add	 esp, 20			; 00000014H
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 188  : 			}
; 189  : 
; 190  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 191  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr);
; 192  : 		const auto _Mycont = static_cast<const _Mylist *>(this->_Getcont());
; 193  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 194  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 195  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 196  : 
; 197  : 		return (this->_Ptr->_Myval);

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00090	83 c0 08	 add	 eax, 8

; 198  : 		}

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx

; 174  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 173  : 		: _Mybase(_Pnode, _Plist)

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>

; 175  : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12

; 37   : 		: _Ptr(_Pnode)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00031	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 39   : 		this->_Adopt(_Plist);

  00034	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  00037	50		 push	 eax
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 40   : 		}

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
tv80 = -1736						; size = 4
$T2 = -1728						; size = 4
_message$3 = -1140					; size = 1024
_logLength$4 = -108					; size = 4
_shaderType$5 = -96					; size = 28
_compileStatus$ = -60					; size = 4
_source$ = -48						; size = 4
_shader$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_shaderSource$ = 8					; size = 4
_type$ = 12						; size = 4
?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; Engine::Graphics::Shader::compileSource, COMDAT
; _this$ = ecx

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec bc 06 00
	00		 sub	 esp, 1724		; 000006bcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 38 f9 ff
	ff		 lea	 edi, DWORD PTR [ebp-1736]
  00021	b9 af 01 00 00	 mov	 ecx, 431		; 000001afH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 110  : 			unsigned int shader = glCreateShader(type);

  00045	8b f4		 mov	 esi, esp
  00047	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewCreateShader
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	89 45 dc	 mov	 DWORD PTR _shader$[ebp], eax

; 111  : 			const char* source = shaderSource.c_str();

  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _shaderSource$[ebp]
  0005e	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00063	89 45 d0	 mov	 DWORD PTR _source$[ebp], eax

; 112  : 			glShaderSource(shader, 1, &source, NULL);

  00066	8b f4		 mov	 esi, esp
  00068	6a 00		 push	 0
  0006a	8d 45 d0	 lea	 eax, DWORD PTR _source$[ebp]
  0006d	50		 push	 eax
  0006e	6a 01		 push	 1
  00070	8b 4d dc	 mov	 ecx, DWORD PTR _shader$[ebp]
  00073	51		 push	 ecx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewShaderSource
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 113  : 			glCompileShader(shader);

  00081	8b f4		 mov	 esi, esp
  00083	8b 45 dc	 mov	 eax, DWORD PTR _shader$[ebp]
  00086	50		 push	 eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewCompileShader
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 114  : 
; 115  : 			int compileStatus;
; 116  : 			glGetShaderiv(shader, GL_COMPILE_STATUS, &compileStatus);

  00094	8b f4		 mov	 esi, esp
  00096	8d 45 c4	 lea	 eax, DWORD PTR _compileStatus$[ebp]
  00099	50		 push	 eax
  0009a	68 81 8b 00 00	 push	 35713			; 00008b81H
  0009f	8b 4d dc	 mov	 ecx, DWORD PTR _shader$[ebp]
  000a2	51		 push	 ecx
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetShaderiv
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 117  : 			if (compileStatus != GL_TRUE)

  000b0	83 7d c4 01	 cmp	 DWORD PTR _compileStatus$[ebp], 1
  000b4	0f 84 0b 01 00
	00		 je	 $LN4@compileSou

; 118  : 			{
; 119  : 				std::string shaderType;

  000ba	8d 4d a0	 lea	 ecx, DWORD PTR _shaderType$5[ebp]
  000bd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  : 				switch (type)

  000c9	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  000cc	89 85 38 f9 ff
	ff		 mov	 DWORD PTR tv80[ebp], eax
  000d2	81 bd 38 f9 ff
	ff 30 8b 00 00	 cmp	 DWORD PTR tv80[ebp], 35632 ; 00008b30H
  000dc	74 1d		 je	 SHORT $LN6@compileSou
  000de	81 bd 38 f9 ff
	ff 31 8b 00 00	 cmp	 DWORD PTR tv80[ebp], 35633 ; 00008b31H
  000e8	74 02		 je	 SHORT $LN5@compileSou
  000ea	eb 1e		 jmp	 SHORT $LN7@compileSou
$LN5@compileSou:

; 121  : 				{
; 122  : 				case GL_VERTEX_SHADER:
; 123  : 					shaderType = "Vertex";

  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_06LEBKBMLE@Vertex?$AA@
  000f1	8d 4d a0	 lea	 ecx, DWORD PTR _shaderType$5[ebp]
  000f4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 124  : 					break;

  000f9	eb 1c		 jmp	 SHORT $LN2@compileSou
$LN6@compileSou:

; 125  : 				case GL_FRAGMENT_SHADER:
; 126  : 					shaderType = "Fragment";

  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_08GHLJBJH@Fragment?$AA@
  00100	8d 4d a0	 lea	 ecx, DWORD PTR _shaderType$5[ebp]
  00103	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 127  : 					break;

  00108	eb 0d		 jmp	 SHORT $LN2@compileSou
$LN7@compileSou:

; 128  : 				default:
; 129  : 					shaderType = "[Unknown]";

  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_09LLLMJHDJ@?$FLUnknown?$FN?$AA@
  0010f	8d 4d a0	 lea	 ecx, DWORD PTR _shaderType$5[ebp]
  00112	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN2@compileSou:

; 130  : 					break;
; 131  : 				};
; 132  : 				std::cout << shaderType << " shader failed to compile" << std::endl;

  00117	8b f4		 mov	 esi, esp
  00119	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EBDLGHGM@?5shader?5failed?5to?5compile?$AA@
  00123	8d 45 a0	 lea	 eax, DWORD PTR _shaderType$5[ebp]
  00126	50		 push	 eax
  00127	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00133	83 c4 08	 add	 esp, 8
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0013c	83 c4 08	 add	 esp, 8
  0013f	8b c8		 mov	 ecx, eax
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00147	3b f4		 cmp	 esi, esp
  00149	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 133  : 
; 134  : 				int logLength = 0;

  0014e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _logLength$4[ebp], 0

; 135  : 				char message[1024];
; 136  : 				glGetShaderInfoLog(shader, 1024, &logLength, message);

  00155	8b f4		 mov	 esi, esp
  00157	8d 85 8c fb ff
	ff		 lea	 eax, DWORD PTR _message$3[ebp]
  0015d	50		 push	 eax
  0015e	8d 4d 94	 lea	 ecx, DWORD PTR _logLength$4[ebp]
  00161	51		 push	 ecx
  00162	68 00 04 00 00	 push	 1024			; 00000400H
  00167	8b 55 dc	 mov	 edx, DWORD PTR _shader$[ebp]
  0016a	52		 push	 edx
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetShaderInfoLog
  00171	3b f4		 cmp	 esi, esp
  00173	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 137  : 
; 138  : 				std::cout << message << std::endl;

  00178	8b f4		 mov	 esi, esp
  0017a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0017f	8d 85 8c fb ff
	ff		 lea	 eax, DWORD PTR _message$3[ebp]
  00185	50		 push	 eax
  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0018c	51		 push	 ecx
  0018d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00192	83 c4 08	 add	 esp, 8
  00195	8b c8		 mov	 ecx, eax
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0019d	3b f4		 cmp	 esi, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 139  : 				return 0;

  001a4	c7 85 40 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  001ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b5	8d 4d a0	 lea	 ecx, DWORD PTR _shaderType$5[ebp]
  001b8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001bd	8b 85 40 f9 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  001c3	eb 03		 jmp	 SHORT $LN1@compileSou
$LN4@compileSou:

; 140  : 			}
; 141  : 			return shader;

  001c5	8b 45 dc	 mov	 eax, DWORD PTR _shader$[ebp]
$LN1@compileSou:

; 142  : 		}

  001c8	52		 push	 edx
  001c9	8b cd		 mov	 ecx, ebp
  001cb	50		 push	 eax
  001cc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@compileSou
  001d2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001d7	58		 pop	 eax
  001d8	5a		 pop	 edx
  001d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e3	59		 pop	 ecx
  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	5b		 pop	 ebx
  001e7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	81 c4 c8 06 00
	00		 add	 esp, 1736		; 000006c8H
  001f7	3b ec		 cmp	 ebp, esp
  001f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 08 00	 ret	 8
$LN17@compileSou:
  00204	05 00 00 00	 DD	 5
  00208	00 00 00 00	 DD	 $LN16@compileSou
$LN16@compileSou:
  0020c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00210	04 00 00 00	 DD	 4
  00214	00 00 00 00	 DD	 $LN10@compileSou
  00218	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0021c	04 00 00 00	 DD	 4
  00220	00 00 00 00	 DD	 $LN11@compileSou
  00224	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00228	1c 00 00 00	 DD	 28			; 0000001cH
  0022c	00 00 00 00	 DD	 $LN12@compileSou
  00230	94 ff ff ff	 DD	 -108			; ffffff94H
  00234	04 00 00 00	 DD	 4
  00238	00 00 00 00	 DD	 $LN13@compileSou
  0023c	8c fb ff ff	 DD	 -1140			; fffffb8cH
  00240	00 04 00 00	 DD	 1024			; 00000400H
  00244	00 00 00 00	 DD	 $LN14@compileSou
$LN14@compileSou:
  00248	6d		 DB	 109			; 0000006dH
  00249	65		 DB	 101			; 00000065H
  0024a	73		 DB	 115			; 00000073H
  0024b	73		 DB	 115			; 00000073H
  0024c	61		 DB	 97			; 00000061H
  0024d	67		 DB	 103			; 00000067H
  0024e	65		 DB	 101			; 00000065H
  0024f	00		 DB	 0
$LN13@compileSou:
  00250	6c		 DB	 108			; 0000006cH
  00251	6f		 DB	 111			; 0000006fH
  00252	67		 DB	 103			; 00000067H
  00253	4c		 DB	 76			; 0000004cH
  00254	65		 DB	 101			; 00000065H
  00255	6e		 DB	 110			; 0000006eH
  00256	67		 DB	 103			; 00000067H
  00257	74		 DB	 116			; 00000074H
  00258	68		 DB	 104			; 00000068H
  00259	00		 DB	 0
$LN12@compileSou:
  0025a	73		 DB	 115			; 00000073H
  0025b	68		 DB	 104			; 00000068H
  0025c	61		 DB	 97			; 00000061H
  0025d	64		 DB	 100			; 00000064H
  0025e	65		 DB	 101			; 00000065H
  0025f	72		 DB	 114			; 00000072H
  00260	54		 DB	 84			; 00000054H
  00261	79		 DB	 121			; 00000079H
  00262	70		 DB	 112			; 00000070H
  00263	65		 DB	 101			; 00000065H
  00264	00		 DB	 0
$LN11@compileSou:
  00265	63		 DB	 99			; 00000063H
  00266	6f		 DB	 111			; 0000006fH
  00267	6d		 DB	 109			; 0000006dH
  00268	70		 DB	 112			; 00000070H
  00269	69		 DB	 105			; 00000069H
  0026a	6c		 DB	 108			; 0000006cH
  0026b	65		 DB	 101			; 00000065H
  0026c	53		 DB	 83			; 00000053H
  0026d	74		 DB	 116			; 00000074H
  0026e	61		 DB	 97			; 00000061H
  0026f	74		 DB	 116			; 00000074H
  00270	75		 DB	 117			; 00000075H
  00271	73		 DB	 115			; 00000073H
  00272	00		 DB	 0
$LN10@compileSou:
  00273	73		 DB	 115			; 00000073H
  00274	6f		 DB	 111			; 0000006fH
  00275	75		 DB	 117			; 00000075H
  00276	72		 DB	 114			; 00000072H
  00277	63		 DB	 99			; 00000063H
  00278	65		 DB	 101			; 00000065H
  00279	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR _shaderType$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 34 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1740]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; Engine::Graphics::Shader::compileSource
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?unbind@Shader@Graphics@Engine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?unbind@Shader@Graphics@Engine@@QAEXXZ PROC		; Engine::Graphics::Shader::unbind, COMDAT
; _this$ = ecx

; 35   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 			glUseProgram(0);

  00023	8b f4		 mov	 esi, esp
  00025	6a 00		 push	 0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUseProgram
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?unbind@Shader@Graphics@Engine@@QAEXXZ ENDP		; Engine::Graphics::Shader::unbind
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?bind@Shader@Graphics@Engine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?bind@Shader@Graphics@Engine@@QAEXXZ PROC		; Engine::Graphics::Shader::bind, COMDAT
; _this$ = ecx

; 30   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 			glUseProgram(m_ProgramID);

  00023	8b f4		 mov	 esi, esp
  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	51		 push	 ecx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUseProgram
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 32   : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?bind@Shader@Graphics@Engine@@QAEXXZ ENDP		; Engine::Graphics::Shader::bind
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z
_TEXT	SEGMENT
tv151 = -296						; size = 4
tv153 = -292						; size = 4
tv149 = -288						; size = 4
tv152 = -284						; size = 4
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -233						; size = 1
_location$5 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_value$ = 12						; size = 64
?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z PROC ; Engine::Graphics::Shader::setUniformMat4, COMDAT
; _this$ = ecx

; 95   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00021	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 96   : 			if (locationCache.find(name) == locationCache.end())

  00042	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00054	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv152[ebp], eax
  0005a	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv152[ebp]
  00060	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv149[ebp], ecx
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv149[ebp]
  00073	52		 push	 edx
  00074	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  00077	50		 push	 eax
  00078	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 04	 add	 ecx, 4
  00085	e8 00 00 00 00	 call	 ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
  0008a	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv153[ebp], eax
  00090	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv153[ebp]
  00096	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv151[ebp], edx
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv151[ebp]
  000a6	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  000ab	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000d2	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR $T4[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 30		 je	 SHORT $LN2@setUniform

; 97   : 			{
; 98   : 				int location = glGetUniformLocation(m_ProgramID, name);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	52		 push	 edx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	89 45 e0	 mov	 DWORD PTR _location$5[ebp], eax

; 99   : 				locationCache[name] = location;

  000f9	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	83 c1 04	 add	 ecx, 4
  00103	e8 00 00 00 00	 call	 ??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _location$5[ebp]
  0010b	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@setUniform:

; 100  : 
; 101  : 			}
; 102  : 
; 103  : 				//std::cout << glGetError() << std::endl;
; 104  : 
; 105  : 			glUniformMatrix4fv((locationCache.at(name)), 1 ,GL_FALSE, value.getMatrixAsArray());

  0010d	8d 4d 0c	 lea	 ecx, DWORD PTR _value$[ebp]
  00110	e8 00 00 00 00	 call	 ?getMatrixAsArray@Mat4f@Math@Engine@@QAEPAMXZ ; Engine::Math::Mat4f::getMatrixAsArray
  00115	8b f4		 mov	 esi, esp
  00117	50		 push	 eax
  00118	6a 00		 push	 0
  0011a	6a 01		 push	 1
  0011c	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  0011f	50		 push	 eax
  00120	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	83 c1 04	 add	 ecx, 4
  00126	e8 00 00 00 00	 call	 ?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
  0012b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012d	51		 push	 ecx
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniformMatrix4fv
  00134	3b f4		 cmp	 esi, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  : 		}

  0013b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00145	59		 pop	 ecx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  0014f	3b ec		 cmp	 ebp, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 44 00	 ret	 68			; 00000044H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z$1:
  0000b	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?setUniformMat4@Shader@Graphics@Engine@@QAEXPBDVMat4f@Math@3@@Z ENDP ; Engine::Graphics::Shader::setUniformMat4
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z
_TEXT	SEGMENT
tv154 = -296						; size = 4
tv156 = -292						; size = 4
tv152 = -288						; size = 4
tv155 = -284						; size = 4
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -233						; size = 1
_location$5 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z PROC ; Engine::Graphics::Shader::setUniform4f, COMDAT
; _this$ = ecx

; 84   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00021	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 			if (locationCache.find(name) == locationCache.end())

  00042	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00054	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  0005a	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv155[ebp]
  00060	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv152[ebp], ecx
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv152[ebp]
  00073	52		 push	 edx
  00074	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  00077	50		 push	 eax
  00078	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 04	 add	 ecx, 4
  00085	e8 00 00 00 00	 call	 ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
  0008a	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv156[ebp], eax
  00090	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv156[ebp]
  00096	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv154[ebp], edx
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv154[ebp]
  000a6	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  000ab	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000d2	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR $T4[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 30		 je	 SHORT $LN2@setUniform

; 86   : 			{
; 87   : 				int location = glGetUniformLocation(m_ProgramID, name);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	52		 push	 edx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	89 45 e0	 mov	 DWORD PTR _location$5[ebp], eax

; 88   : 				locationCache[name] = location;

  000f9	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	83 c1 04	 add	 ecx, 4
  00103	e8 00 00 00 00	 call	 ??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _location$5[ebp]
  0010b	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@setUniform:

; 89   : 			}
; 90   : 
; 91   : 
; 92   : 			glUniform4f(locationCache.at(name), value.m_X, value.m_Y, value.m_Z, value.m_W);

  0010d	8b f4		 mov	 esi, esp
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00120	51		 push	 ecx
  00121	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp]
  0012e	51		 push	 ecx
  0012f	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0013c	51		 push	 ecx
  0013d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	8d 4d 08	 lea	 ecx, DWORD PTR _name$[ebp]
  00149	51		 push	 ecx
  0014a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	83 c1 04	 add	 ecx, 4
  00150	e8 00 00 00 00	 call	 ?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
  00155	8b 10		 mov	 edx, DWORD PTR [eax]
  00157	52		 push	 edx
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform4f
  0015e	3b f4		 cmp	 esi, esp
  00160	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   : 		}

  00165	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00168	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016f	59		 pop	 ecx
  00170	5f		 pop	 edi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  00179	3b ec		 cmp	 ebp, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z$1:
  0000b	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?setUniform4f@Shader@Graphics@Engine@@QAEXPBDABUVec4f@Math@3@@Z ENDP ; Engine::Graphics::Shader::setUniform4f
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z
_TEXT	SEGMENT
tv152 = -296						; size = 4
tv154 = -292						; size = 4
tv150 = -288						; size = 4
tv153 = -284						; size = 4
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -233						; size = 1
_location$5 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z PROC ; Engine::Graphics::Shader::setUniform3f, COMDAT
; _this$ = ecx

; 73   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00021	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 			if (locationCache.find(name) == locationCache.end())

  00042	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00054	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv153[ebp], eax
  0005a	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv153[ebp]
  00060	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv150[ebp]
  00073	52		 push	 edx
  00074	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  00077	50		 push	 eax
  00078	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 04	 add	 ecx, 4
  00085	e8 00 00 00 00	 call	 ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
  0008a	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv154[ebp], eax
  00090	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv154[ebp]
  00096	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv152[ebp], edx
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv152[ebp]
  000a6	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  000ab	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000d2	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR $T4[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 30		 je	 SHORT $LN2@setUniform

; 75   : 			{
; 76   : 				int location = glGetUniformLocation(m_ProgramID, name);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	52		 push	 edx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	89 45 e0	 mov	 DWORD PTR _location$5[ebp], eax

; 77   : 				locationCache[name] = location;

  000f9	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	83 c1 04	 add	 ecx, 4
  00103	e8 00 00 00 00	 call	 ??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _location$5[ebp]
  0010b	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@setUniform:

; 78   : 			}
; 79   : 
; 80   : 
; 81   : 			glUniform3f(locationCache.at(name), value.m_X, value.m_Y, value.m_Z);

  0010d	8b f4		 mov	 esi, esp
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00120	51		 push	 ecx
  00121	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp]
  0012e	51		 push	 ecx
  0012f	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	83 c1 04	 add	 ecx, 4
  00142	e8 00 00 00 00	 call	 ?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
  00147	8b 08		 mov	 ecx, DWORD PTR [eax]
  00149	51		 push	 ecx
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform3f
  00150	3b f4		 cmp	 esi, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 82   : 		}

  00157	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00161	59		 pop	 ecx
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx
  00165	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  0016b	3b ec		 cmp	 ebp, esp
  0016d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z$1:
  0000b	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?setUniform3f@Shader@Graphics@Engine@@QAEXPBDABUVec3f@Math@3@@Z ENDP ; Engine::Graphics::Shader::setUniform3f
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z
_TEXT	SEGMENT
tv150 = -296						; size = 4
tv152 = -292						; size = 4
tv148 = -288						; size = 4
tv151 = -284						; size = 4
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -233						; size = 1
_location$5 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z PROC ; Engine::Graphics::Shader::setUniform2f, COMDAT
; _this$ = ecx

; 61   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00021	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 			if (locationCache.find(name) == locationCache.end())

  00042	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00054	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv151[ebp], eax
  0005a	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv151[ebp]
  00060	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv148[ebp]
  00073	52		 push	 edx
  00074	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  00077	50		 push	 eax
  00078	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 04	 add	 ecx, 4
  00085	e8 00 00 00 00	 call	 ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
  0008a	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv152[ebp], eax
  00090	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv152[ebp]
  00096	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv150[ebp], edx
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv150[ebp]
  000a6	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  000ab	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000d2	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR $T4[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 30		 je	 SHORT $LN2@setUniform

; 63   : 			{
; 64   : 				int location = glGetUniformLocation(m_ProgramID, name);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	52		 push	 edx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	89 45 e0	 mov	 DWORD PTR _location$5[ebp], eax

; 65   : 				locationCache[name] = location;

  000f9	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	83 c1 04	 add	 ecx, 4
  00103	e8 00 00 00 00	 call	 ??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _location$5[ebp]
  0010b	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@setUniform:

; 66   : 			}
; 67   : 
; 68   : 
; 69   : 			glUniform2f(locationCache.at(name), value.m_X, value.m_Y);

  0010d	8b f4		 mov	 esi, esp
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00120	51		 push	 ecx
  00121	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	8d 55 08	 lea	 edx, DWORD PTR _name$[ebp]
  0012d	52		 push	 edx
  0012e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	83 c1 04	 add	 ecx, 4
  00134	e8 00 00 00 00	 call	 ?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
  00139	8b 00		 mov	 eax, DWORD PTR [eax]
  0013b	50		 push	 eax
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform2f
  00142	3b f4		 cmp	 esi, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 70   : 
; 71   : 		}

  00149	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  0015d	3b ec		 cmp	 ebp, esp
  0015f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z$1:
  0000b	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?setUniform2f@Shader@Graphics@Engine@@QAEXPBDABUVec2f@Math@3@@Z ENDP ; Engine::Graphics::Shader::setUniform2f
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z
_TEXT	SEGMENT
tv147 = -296						; size = 4
tv149 = -292						; size = 4
tv145 = -288						; size = 4
tv148 = -284						; size = 4
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -233						; size = 1
_location$5 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z PROC	; Engine::Graphics::Shader::setUniform1f, COMDAT
; _this$ = ecx

; 50   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00021	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 			if (locationCache.find(name) == locationCache.end())

  00042	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00054	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], eax
  0005a	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv148[ebp]
  00060	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv145[ebp], ecx
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv145[ebp]
  00073	52		 push	 edx
  00074	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  00077	50		 push	 eax
  00078	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 04	 add	 ecx, 4
  00085	e8 00 00 00 00	 call	 ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
  0008a	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv149[ebp], eax
  00090	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv149[ebp]
  00096	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], edx
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  000a6	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  000ab	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000d2	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR $T4[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 30		 je	 SHORT $LN2@setUniform

; 52   : 			{
; 53   : 				int location = glGetUniformLocation(m_ProgramID, name);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	52		 push	 edx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	89 45 e0	 mov	 DWORD PTR _location$5[ebp], eax

; 54   : 				locationCache[name] = location;

  000f9	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	83 c1 04	 add	 ecx, 4
  00103	e8 00 00 00 00	 call	 ??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _location$5[ebp]
  0010b	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@setUniform:

; 55   : 			}
; 56   : 
; 57   : 			glUniform1f(locationCache.at(name), value);

  0010d	8b f4		 mov	 esi, esp
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00117	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011c	8d 4d 08	 lea	 ecx, DWORD PTR _name$[ebp]
  0011f	51		 push	 ecx
  00120	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	83 c1 04	 add	 ecx, 4
  00126	e8 00 00 00 00	 call	 ?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
  0012b	8b 10		 mov	 edx, DWORD PTR [eax]
  0012d	52		 push	 edx
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform1f
  00134	3b f4		 cmp	 esi, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 58   : 
; 59   : 		}

  0013b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00145	59		 pop	 ecx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  0014f	3b ec		 cmp	 ebp, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z$1:
  0000b	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?setUniform1f@Shader@Graphics@Engine@@QAEXPBDABM@Z ENDP	; Engine::Graphics::Shader::setUniform1f
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z
_TEXT	SEGMENT
tv147 = -296						; size = 4
tv149 = -292						; size = 4
tv145 = -288						; size = 4
tv148 = -284						; size = 4
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -233						; size = 1
_location$5 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z PROC	; Engine::Graphics::Shader::setUniform1i, COMDAT
; _this$ = ecx

; 40   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00021	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 			if (locationCache.find(name) == locationCache.end())

  00042	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00054	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], eax
  0005a	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv148[ebp]
  00060	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv145[ebp], ecx
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv145[ebp]
  00073	52		 push	 edx
  00074	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  00077	50		 push	 eax
  00078	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007e	51		 push	 ecx
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 04	 add	 ecx, 4
  00085	e8 00 00 00 00	 call	 ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
  0008a	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv149[ebp], eax
  00090	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv149[ebp]
  00096	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], edx
  0009c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a0	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  000a6	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  000ab	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c7	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000cd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000d2	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR $T4[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 30		 je	 SHORT $LN2@setUniform

; 42   : 			{
; 43   : 				int location = glGetUniformLocation(m_ProgramID, name);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	52		 push	 edx
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	89 45 e0	 mov	 DWORD PTR _location$5[ebp], eax

; 44   : 				locationCache[name] = location;

  000f9	8d 45 08	 lea	 eax, DWORD PTR _name$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	83 c1 04	 add	 ecx, 4
  00103	e8 00 00 00 00	 call	 ??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _location$5[ebp]
  0010b	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@setUniform:

; 45   : 			}
; 46   : 
; 47   : 			glUniform1i(locationCache.at(name), value);

  0010d	8b f4		 mov	 esi, esp
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  00112	8b 08		 mov	 ecx, DWORD PTR [eax]
  00114	51		 push	 ecx
  00115	8d 55 08	 lea	 edx, DWORD PTR _name$[ebp]
  00118	52		 push	 edx
  00119	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	83 c1 04	 add	 ecx, 4
  0011f	e8 00 00 00 00	 call	 ?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
  00124	8b 00		 mov	 eax, DWORD PTR [eax]
  00126	50		 push	 eax
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform1i
  0012d	3b f4		 cmp	 esi, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 48   : 		}

  00134	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00137	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013e	59		 pop	 ecx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	81 c4 28 01 00
	00		 add	 esp, 296		; 00000128H
  00148	3b ec		 cmp	 ebp, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z$0:
  00000	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z$1:
  0000b	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a d4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-300]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?setUniform1i@Shader@Graphics@Engine@@QAEXPBDABH@Z ENDP	; Engine::Graphics::Shader::setUniform1i
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ??1Shader@Graphics@Engine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1Shader@Graphics@Engine@@QAE@XZ PROC			; Engine::Graphics::Shader::~Shader, COMDAT
; _this$ = ecx

; 25   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Shader@Graphics@Engine@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 26   : 			glDeleteProgram(m_ProgramID);

  00042	8b f4		 mov	 esi, esp
  00044	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	51		 push	 ecx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewDeleteProgram
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 27   : 		}

  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 04	 add	 ecx, 4
  0005d	e8 00 00 00 00	 call	 ??1?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1Shader@Graphics@Engine@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Shader@Graphics@Engine@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Shader@Graphics@Engine@@QAE@XZ ENDP			; Engine::Graphics::Shader::~Shader
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
_fragShaderC$ = -120					; size = 4
_vertShaderC$ = -108					; size = 4
_fragShaderSource$ = -96				; size = 28
_vertShaderSource$ = -60				; size = 28
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_vertexShader$ = 8					; size = 4
_fragShader$ = 12					; size = 4
??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; Engine::Graphics::Shader::Shader, COMDAT
; _this$ = ecx

; 6    : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00021	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 04	 add	 ecx, 4
  0004b	e8 00 00 00 00	 call	 ??0?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 7    : 			std::string vertShaderSource = Util::loadAsString(vertexShader);

  00057	8b 45 08	 mov	 eax, DWORD PTR _vertexShader$[ebp]
  0005a	50		 push	 eax
  0005b	8d 4d c4	 lea	 ecx, DWORD PTR _vertShaderSource$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Engine::Util::loadAsString
  00064	83 c4 08	 add	 esp, 8
  00067	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 8    : 			std::string fragShaderSource = Util::loadAsString(fragShader);

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _fragShader$[ebp]
  0006e	50		 push	 eax
  0006f	8d 4d a0	 lea	 ecx, DWORD PTR _fragShaderSource$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ?loadAsString@Util@Engine@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV34@@Z ; Engine::Util::loadAsString
  00078	83 c4 08	 add	 esp, 8
  0007b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 9    : 
; 10   : 			unsigned int vertShaderC = compileSource(vertShaderSource, GL_VERTEX_SHADER);

  0007f	68 31 8b 00 00	 push	 35633			; 00008b31H
  00084	8d 45 c4	 lea	 eax, DWORD PTR _vertShaderSource$[ebp]
  00087	50		 push	 eax
  00088	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	e8 00 00 00 00	 call	 ?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Engine::Graphics::Shader::compileSource
  00090	89 45 94	 mov	 DWORD PTR _vertShaderC$[ebp], eax

; 11   : 			unsigned int fragShaderC = compileSource(fragShaderSource, GL_FRAGMENT_SHADER);

  00093	68 30 8b 00 00	 push	 35632			; 00008b30H
  00098	8d 45 a0	 lea	 eax, DWORD PTR _fragShaderSource$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?compileSource@Shader@Graphics@Engine@@AAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; Engine::Graphics::Shader::compileSource
  000a4	89 45 88	 mov	 DWORD PTR _fragShaderC$[ebp], eax

; 12   : 
; 13   : 			m_ProgramID = glCreateProgram();

  000a7	8b f4		 mov	 esi, esp
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewCreateProgram
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	89 01		 mov	 DWORD PTR [ecx], eax

; 14   : 
; 15   : 			glAttachShader(m_ProgramID, vertShaderC);

  000bb	8b f4		 mov	 esi, esp
  000bd	8b 45 94	 mov	 eax, DWORD PTR _vertShaderC$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c6	52		 push	 edx
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewAttachShader
  000cd	3b f4		 cmp	 esi, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 16   : 			glAttachShader(m_ProgramID, fragShaderC);

  000d4	8b f4		 mov	 esi, esp
  000d6	8b 45 88	 mov	 eax, DWORD PTR _fragShaderC$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000df	52		 push	 edx
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewAttachShader
  000e6	3b f4		 cmp	 esi, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 17   : 
; 18   : 			glLinkProgram(m_ProgramID);

  000ed	8b f4		 mov	 esi, esp
  000ef	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f4	51		 push	 ecx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewLinkProgram
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 19   : 
; 20   : 			glDeleteShader(vertShaderC);

  00102	8b f4		 mov	 esi, esp
  00104	8b 45 94	 mov	 eax, DWORD PTR _vertShaderC$[ebp]
  00107	50		 push	 eax
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewDeleteShader
  0010e	3b f4		 cmp	 esi, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 21   : 			glDeleteShader(fragShaderC);

  00115	8b f4		 mov	 esi, esp
  00117	8b 45 88	 mov	 eax, DWORD PTR _fragShaderC$[ebp]
  0011a	50		 push	 eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewDeleteShader
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 22   : 		}

  00128	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0012c	8d 4d a0	 lea	 ecx, DWORD PTR _fragShaderSource$[ebp]
  0012f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00134	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00138	8d 4d c4	 lea	 ecx, DWORD PTR _vertShaderSource$[ebp]
  0013b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00140	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00147	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	52		 push	 edx
  0014b	8b cd		 mov	 ecx, ebp
  0014d	50		 push	 eax
  0014e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Shader
  00154	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00159	58		 pop	 eax
  0015a	5a		 pop	 edx
  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	33 cd		 xor	 ecx, ebp
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00179	3b ec		 cmp	 ebp, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 08 00	 ret	 8
  00186	66 90		 npad	 2
$LN10@Shader:
  00188	02 00 00 00	 DD	 2
  0018c	00 00 00 00	 DD	 $LN9@Shader
$LN9@Shader:
  00190	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00194	1c 00 00 00	 DD	 28			; 0000001cH
  00198	00 00 00 00	 DD	 $LN6@Shader
  0019c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  001a0	1c 00 00 00	 DD	 28			; 0000001cH
  001a4	00 00 00 00	 DD	 $LN7@Shader
$LN7@Shader:
  001a8	66		 DB	 102			; 00000066H
  001a9	72		 DB	 114			; 00000072H
  001aa	61		 DB	 97			; 00000061H
  001ab	67		 DB	 103			; 00000067H
  001ac	53		 DB	 83			; 00000053H
  001ad	68		 DB	 104			; 00000068H
  001ae	61		 DB	 97			; 00000061H
  001af	64		 DB	 100			; 00000064H
  001b0	65		 DB	 101			; 00000065H
  001b1	72		 DB	 114			; 00000072H
  001b2	53		 DB	 83			; 00000053H
  001b3	6f		 DB	 111			; 0000006fH
  001b4	75		 DB	 117			; 00000075H
  001b5	72		 DB	 114			; 00000072H
  001b6	63		 DB	 99			; 00000063H
  001b7	65		 DB	 101			; 00000065H
  001b8	00		 DB	 0
$LN6@Shader:
  001b9	76		 DB	 118			; 00000076H
  001ba	65		 DB	 101			; 00000065H
  001bb	72		 DB	 114			; 00000072H
  001bc	74		 DB	 116			; 00000074H
  001bd	53		 DB	 83			; 00000053H
  001be	68		 DB	 104			; 00000068H
  001bf	61		 DB	 97			; 00000061H
  001c0	64		 DB	 100			; 00000064H
  001c1	65		 DB	 101			; 00000065H
  001c2	72		 DB	 114			; 00000072H
  001c3	53		 DB	 83			; 00000053H
  001c4	6f		 DB	 111			; 0000006fH
  001c5	75		 DB	 117			; 00000075H
  001c6	72		 DB	 114			; 00000072H
  001c7	63		 DB	 99			; 00000063H
  001c8	65		 DB	 101			; 00000065H
  001c9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  0000b	8d 4d c4	 lea	 ecx, DWORD PTR _vertShaderSource$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$2:
  00013	8d 4d a0	 lea	 ecx, DWORD PTR _fragShaderSource$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a c0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-320]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Shader@Graphics@Engine@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; Engine::Graphics::Shader::Shader
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ PROC ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::~unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ENDP ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::~unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\unordered_map
;	COMDAT ?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
_TEXT	SEGMENT
tv135 = -292						; size = 4
tv71 = -288						; size = 4
$T2 = -280						; size = 4
$T3 = -268						; size = 12
$T4 = -245						; size = 1
__Where$ = -44						; size = 12
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z PROC ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at, COMDAT
; _this$ = ecx

; 489  : 		{	// find element matching _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  00021	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 490  : 		iterator _Where = _Mybase::lower_bound(_Keyval);

  00045	6a 0c		 push	 12			; 0000000cH
  00047	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  0004a	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  0004f	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00052	50		 push	 eax
  00053	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00056	51		 push	 ecx
  00057	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::lower_bound
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 491  : 		if (_Where == _Mybase::end())

  00066	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00075	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  0007b	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv71[ebp]
  00081	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv135[ebp], ecx
  00087	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008b	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp]
  00091	52		 push	 edx
  00092	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00095	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator==
  0009a	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T4[ebp], al
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a4	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000af	0f b6 85 0b ff
	ff ff		 movzx	 eax, BYTE PTR $T4[ebp]
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN2@at

; 492  : 			_Xout_of_range("invalid unordered_map<K, T> key");

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MMOGIFNF@invalid?5unordered_map?$DMK?0?5T?$DO?5key?$AA@
  000bf	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@at:

; 493  : 		return (_Where->second);

  000c4	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  000c7	e8 00 00 00 00	 call	 ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPAU?$pair@QBDH@1@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator->
  000cc	83 c0 04	 add	 eax, 4
  000cf	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  000d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  000df	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000e4	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN3@at:

; 494  : 		}

  000ea	52		 push	 edx
  000eb	8b cd		 mov	 ecx, ebp
  000ed	50		 push	 eax
  000ee	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@at
  000f4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f9	58		 pop	 eax
  000fa	5a		 pop	 edx
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00105	59		 pop	 ecx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	33 cd		 xor	 ecx, ebp
  0010e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00113	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  00119	3b ec		 cmp	 ebp, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 04 00	 ret	 4
  00126	66 90		 npad	 2
$LN9@at:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN8@at
$LN8@at:
  00130	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00134	0c 00 00 00	 DD	 12			; 0000000cH
  00138	00 00 00 00	 DD	 $LN6@at
$LN6@at:
  0013c	5f		 DB	 95			; 0000005fH
  0013d	57		 DB	 87			; 00000057H
  0013e	68		 DB	 104			; 00000068H
  0013f	65		 DB	 101			; 00000065H
  00140	72		 DB	 114			; 00000072H
  00141	65		 DB	 101			; 00000065H
  00142	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z$1:
  00008	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a d8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-296]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?at@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ENDP ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::at
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\unordered_map
;	COMDAT ??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
_TEXT	SEGMENT
tv75 = -260						; size = 4
tv76 = -256						; size = 4
$T2 = -248						; size = 16
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z PROC ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[], COMDAT
; _this$ = ecx

; 484  : 		{	// find element matching _Keyval or insert with default mapped

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00021	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 485  : 		return (try_emplace(_Keyval).first->second);

  00042	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00045	50		 push	 eax
  00046	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0004c	51		 push	 ecx
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??$try_emplace@$$V@?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@ABQBD@Z ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::try_emplace<>
  00055	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  0005b	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR tv76[ebp]
  00061	89 95 fc fe ff
	ff		 mov	 DWORD PTR tv75[ebp], edx
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006e	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR tv75[ebp]
  00074	e8 00 00 00 00	 call	 ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEPAU?$pair@QBDH@1@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator->
  00079	83 c0 04	 add	 eax, 4
  0007c	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0008f	e8 00 00 00 00	 call	 ??1?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
  00094	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]

; 486  : 		}

  0009a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a4	59		 pop	 ecx
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z$0:
  00000	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@XZ
__ehhandler$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAHABQBD@Z ENDP ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\unordered_map
;	COMDAT ??0?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
$T3 = -224						; size = 4
$T4 = -209						; size = 1
_this$ = -8						; size = 4
??0?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ PROC ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 129  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 		: _Mybase(key_compare(), allocator_type())

  00023	8d 8d 2f ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$allocator@U?$pair@QBDH@std@@@std@@QAE@XZ ; std::allocator<std::pair<char const * const,int> >::allocator<std::pair<char const * const,int> >
  0002e	50		 push	 eax
  0002f	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  00036	50		 push	 eax
  00037	0f b6 8d 0b ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  0003e	51		 push	 ecx
  0003f	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAE@U?$hash@PBD@1@U?$equal_to@PBD@1@@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >
  0004a	50		 push	 eax
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >

; 130  : 		}

  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
??0?$unordered_map@PBDHU?$hash@PBD@std@@U?$equal_to@PBD@2@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ENDP ; std::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >::unordered_map<char const *,int,std::hash<char const *>,std::equal_to<char const *>,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::~_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 10	 add	 ecx, 16			; 00000010H
  00029	e8 00 00 00 00	 call	 ??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 04	 add	 ecx, 4
  00034	e8 00 00 00 00	 call	 ??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??1?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::~_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Xlength@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Xlength, COMDAT

; 2015 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2016 : 		_Xlength_error("vector<T> too long");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 2017 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Xlength@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Tidy, COMDAT
; _this$ = ecx

; 2000 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2001 : 		this->_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Orphan_all

; 2002 : 
; 2003 : 		if (this->_Myfirst() != pointer())

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00033	83 38 00	 cmp	 DWORD PTR [eax], 0
  00036	74 6b		 je	 SHORT $LN1@Tidy

; 2004 : 			{	// destroy and deallocate old array
; 2005 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00040	8b 00		 mov	 eax, DWORD PTR [eax]
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	51		 push	 ecx
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Destroy

; 2006 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity
  0005e	50		 push	 eax
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00067	8b 00		 mov	 eax, DWORD PTR [eax]
  00069	50		 push	 eax
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::deallocate

; 2007 : 
; 2008 : 			this->_Myfirst() = pointer();

  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2009 : 			this->_Mylast() = pointer();

  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  0008f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2010 : 			this->_Myend() = pointer();

  00095	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
  0009d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 2011 : 			}
; 2012 : 		}

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Change_array@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@II@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@II@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Change_array, COMDAT
; _this$ = ecx

; 1985 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1986 : 		this->_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Orphan_all

; 1987 : 
; 1988 : 		if (this->_Myfirst() != pointer())

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00033	83 38 00	 cmp	 DWORD PTR [eax], 0
  00036	74 41		 je	 SHORT $LN2@Change_arr

; 1989 : 			{	// destroy and deallocate old array
; 1990 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00040	8b 00		 mov	 eax, DWORD PTR [eax]
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	51		 push	 ecx
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Destroy

; 1991 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity
  0005e	50		 push	 eax
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00067	8b 00		 mov	 eax, DWORD PTR [eax]
  00069	50		 push	 eax
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::deallocate
$LN2@Change_arr:

; 1992 : 			}
; 1993 : 
; 1994 : 		this->_Myfirst() = _Newvec;

  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00084	89 08		 mov	 DWORD PTR [eax], ecx

; 1995 : 		this->_Mylast() = _Newvec + _Newsize;

  00086	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0008c	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00097	89 30		 mov	 DWORD PTR [eax], esi

; 1996 : 		this->_Myend() = _Newvec + _Newcapacity;

  00099	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0009f	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
  000aa	89 30		 mov	 DWORD PTR [eax], esi

; 1997 : 		}

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@II@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Buy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAE_NI@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Buy, COMDAT
; _this$ = ecx

; 1962 : 		{	// allocate array with _Newcapacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1963 : 		this->_Myfirst() = pointer();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1964 : 		this->_Mylast() = pointer();

  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1965 : 		this->_Myend() = pointer();

  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1966 : 
; 1967 : 		if (_Newcapacity == 0)

  0004d	83 7d 08 00	 cmp	 DWORD PTR __Newcapacity$[ebp], 0
  00051	75 04		 jne	 SHORT $LN2@Buy

; 1968 : 			{
; 1969 : 			return (false);

  00053	32 c0		 xor	 al, al
  00055	eb 63		 jmp	 SHORT $LN4@Buy
$LN2@Buy:

; 1970 : 			}
; 1971 : 
; 1972 : 		if (_Newcapacity > max_size())

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
  0005f	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00062	76 05		 jbe	 SHORT $LN3@Buy

; 1973 : 			{
; 1974 : 			_Xlength();

  00064	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Xlength
$LN3@Buy:

; 1975 : 			}
; 1976 : 
; 1977 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00069	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  00075	8b c8		 mov	 ecx, eax
  00077	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocate
  0007c	8b f0		 mov	 esi, eax
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00086	89 30		 mov	 DWORD PTR [eax], esi

; 1978 : 		this->_Mylast() = this->_Myfirst();

  00088	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00090	8b f0		 mov	 esi, eax
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  0009a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009c	89 08		 mov	 DWORD PTR [eax], ecx

; 1979 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  000a6	8b 00		 mov	 eax, DWORD PTR [eax]
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  000ab	8d 34 88	 lea	 esi, DWORD PTR [eax+ecx*4]
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
  000b6	89 30		 mov	 DWORD PTR [eax], esi

; 1980 : 
; 1981 : 		return (true);

  000b8	b0 01		 mov	 al, 1
$LN4@Buy:

; 1982 : 		}

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?_Buy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAE_NI@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -32					; size = 4
__Oldcapacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1943 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1944 : 		const size_type _Oldcapacity = capacity();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity
  0002b	89 45 ec	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1945 : 
; 1946 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
  00036	8b 4d ec	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00039	d1 e9		 shr	 ecx, 1
  0003b	2b c1		 sub	 eax, ecx
  0003d	39 45 ec	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  00040	76 05		 jbe	 SHORT $LN2@Calculate_

; 1947 : 			{
; 1948 : 			return (_Newsize);	// geometric growth would overflow

  00042	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00045	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1949 : 			}
; 1950 : 
; 1951 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00047	8b 45 ec	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  0004a	d1 e8		 shr	 eax, 1
  0004c	03 45 ec	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  0004f	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1952 : 
; 1953 : 		if (_Geometric < _Newsize)

  00052	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  00055	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00058	73 05		 jae	 SHORT $LN3@Calculate_

; 1954 : 			{
; 1955 : 			return (_Newsize);	// geometric growth would be insufficient

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0005d	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1956 : 			}
; 1957 : 
; 1958 : 		return (_Geometric);	// geometric growth is sufficient

  0005f	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1959 : 		}

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Destroy, COMDAT
; _this$ = ecx

; 1938 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1939 : 		_Destroy_range(_First, _Last, this->_Getal());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  0002b	50		 push	 eax
  0002c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1940 : 		}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1932 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1933 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

  00023	33 c0		 xor	 eax, eax
  00025	88 85 2f ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0002b	0f b6 8d 2f ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  00032	51		 push	 ecx
  00033	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00036	52		 push	 edx
  00037	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept1

; 1934 : 			_Disjunction_t<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>{});
; 1935 : 		}

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1922 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1923 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  0002b	50		 push	 eax
  0002c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@PAV12@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@00AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 1924 : 		}

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@PAV32@IABV32@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@PAV32@IABV32@@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Ufill, COMDAT
; _this$ = ecx

; 1906 : 		{	// fill raw _Dest with _Count copies of _Val, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1907 : 		return (_Uninitialized_fill_n(_Dest, _Count, _Val, this->_Getal()));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  0002b	50		 push	 eax
  0002c	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@IV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@PAV10@IABV10@AAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@0@@Z ; std::_Uninitialized_fill_n<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,unsigned int,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 1908 : 		}

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@PAV32@IABV32@@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??A?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@I@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::operator[], COMDAT
; _this$ = ecx

; 1791 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1792 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1793 : 		if (size() <= _Pos)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::size
  0002b	3b 45 08	 cmp	 eax, DWORD PTR __Pos$[ebp]
  0002e	77 3f		 ja	 SHORT $LN2@operator

; 1794 : 			{	// report error
; 1795 : 			_DEBUG_ERROR("vector subscript out of range");

  00030	68 03 07 00 00	 push	 1795			; 00000703H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  0003f	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	8b f4		 mov	 esi, esp
  00049	6a 00		 push	 0
  0004b	68 03 07 00 00	 push	 1795			; 00000703H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@LDNPBHPL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1CIA@BBFIDBON@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00065	83 c4 14	 add	 esp, 20			; 00000014H
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 1796 : 			}
; 1797 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1798 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1800 : 
; 1801 : 		return (this->_Myfirst()[_Pos]);

  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00077	8b 00		 mov	 eax, DWORD PTR [eax]
  00079	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  0007c	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 1802 : 		}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??A?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@I@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity, COMDAT
; _this$ = ecx

; 1774 : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1775 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
  0002b	8b f0		 mov	 esi, eax
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	2b 08		 sub	 ecx, DWORD PTR [eax]
  00039	c1 f9 02	 sar	 ecx, 2
  0003c	8b c1		 mov	 eax, ecx

; 1776 : 		}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size, COMDAT
; _this$ = ecx

; 1768 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1769 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
  00031	83 c4 04	 add	 esp, 4
  00034	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0003a	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  0003f	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00045	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00058	83 c4 08	 add	 esp, 8
  0005b	8b 00		 mov	 eax, DWORD PTR [eax]

; 1770 : 			_Alty_traits::max_size(this->_Getal())));
; 1771 : 		}

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::size, COMDAT
; _this$ = ecx

; 1763 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1764 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  0002b	8b f0		 mov	 esi, eax
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	2b 08		 sub	 ecx, DWORD PTR [eax]
  00039	c1 f9 02	 sar	 ecx, 2
  0003c	8b c1		 mov	 eax, ecx

; 1765 : 		}

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?reserve@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newcapacity$ = 8					; size = 4
?reserve@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::reserve, COMDAT
; _this$ = ecx

; 1563 : 		{	// increase capacity to _Newcapacity (without geometric growth), provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1564 : 		if (_Newcapacity > capacity())

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity
  0002b	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  0002e	76 1e		 jbe	 SHORT $LN4@reserve

; 1565 : 			{	// something to do (reserve() never shrinks)
; 1566 : 			if (_Newcapacity > max_size())

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
  00038	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  0003b	76 05		 jbe	 SHORT $LN3@reserve

; 1567 : 				{
; 1568 : 				_Xlength();

  0003d	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Xlength
$LN3@reserve:

; 1569 : 				}
; 1570 : 
; 1571 : 			_Reallocate_exactly(_Newcapacity);

  00042	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00045	50		 push	 eax
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Reallocate_exactly
$LN4@reserve:

; 1572 : 			}
; 1573 : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?reserve@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -48						; size = 4
__Size$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1546 : 		{	// set capacity to _Newcapacity (without geometric growth), provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00022	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1547 : 		const size_type _Size = size();

  00046	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::size
  0004e	89 45 dc	 mov	 DWORD PTR __Size$[ebp], eax

; 1548 : 
; 1549 : 		const pointer _Newvec = this->_Getal().allocate(_Newcapacity);

  00051	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  0005d	8b c8		 mov	 ecx, eax
  0005f	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocate
  00064	89 45 d0	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1550 : 
; 1551 : 		_TRY_BEGIN

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1552 : 		_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

  0006e	8b 45 d0	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00071	50		 push	 eax
  00072	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	51		 push	 ecx
  0007d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00085	8b 10		 mov	 edx, DWORD PTR [eax]
  00087	52		 push	 edx
  00088	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@00@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Umove_if_noexcept
  00090	eb 26		 jmp	 SHORT $LN4@Reallocate
__catch$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z$0:

; 1553 : 		_CATCH_ALL
; 1554 : 		this->_Getal().deallocate(_Newvec, _Newcapacity);

  00092	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00095	50		 push	 eax
  00096	8b 4d d0	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00099	51		 push	 ecx
  0009a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::deallocate

; 1555 : 		_RERAISE;

  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1556 : 		_CATCH_END

  000b2	b8 00 00 00 00	 mov	 eax, $LN7@Reallocate
  000b7	c3		 ret	 0
$LN4@Reallocate:
  000b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000bf	eb 07		 jmp	 SHORT __tryend$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z$1
$LN7@Reallocate:
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z$1:

; 1557 : 
; 1558 : 		_Change_array(_Newvec, _Size, _Newcapacity);

  000c8	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d dc	 mov	 ecx, DWORD PTR __Size$[ebp]
  000cf	51		 push	 ecx
  000d0	8b 55 d0	 mov	 edx, DWORD PTR __Newvec$[ebp]
  000d3	52		 push	 edx
  000d4	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@II@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Change_array
$LN3@Reallocate:

; 1559 : 		}

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000f0	3b ec		 cmp	 ebp, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate_exactly@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Reallocate_exactly
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Newlast$1 = -56					; size = 4
__Newcapacity$2 = -44					; size = 4
__Oldcapacity$ = -32					; size = 4
__Oldsize$ = -20					; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::assign, COMDAT
; _this$ = ecx

; 1321 : 		{	// assign _Newsize * _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1322 : 		this->_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Orphan_all

; 1323 : 
; 1324 : 		const size_type _Oldsize = size();

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::size
  00033	89 45 ec	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1325 : 		const size_type _Oldcapacity = capacity();

  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::capacity
  0003e	89 45 e0	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1326 : 
; 1327 : 		if (_Newsize > _Oldcapacity)

  00041	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00044	3b 45 e0	 cmp	 eax, DWORD PTR __Oldcapacity$[ebp]
  00047	0f 86 a2 00 00
	00		 jbe	 $LN2@assign

; 1328 : 			{	// reallocate
; 1329 : 			if (_Newsize > max_size())

  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
  00055	39 45 08	 cmp	 DWORD PTR __Newsize$[ebp], eax
  00058	76 05		 jbe	 SHORT $LN4@assign

; 1330 : 				{
; 1331 : 				_Xlength();

  0005a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Xlength
$LN4@assign:

; 1332 : 				}
; 1333 : 
; 1334 : 			const size_type _Newcapacity = _Calculate_growth(_Newsize);

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00062	50		 push	 eax
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@ABEII@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Calculate_growth
  0006b	89 45 d4	 mov	 DWORD PTR __Newcapacity$2[ebp], eax

; 1335 : 
; 1336 : 			if (this->_Myfirst() != pointer())

  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00076	83 38 00	 cmp	 DWORD PTR [eax], 0
  00079	74 3c		 je	 SHORT $LN5@assign

; 1337 : 				{	// destroy and deallocate old array
; 1338 : 				_Destroy(this->_Myfirst(), this->_Mylast());

  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00083	8b 00		 mov	 eax, DWORD PTR [eax]
  00085	50		 push	 eax
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	51		 push	 ecx
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Destroy

; 1339 : 				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);

  00099	8b 45 e0	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	51		 push	 ecx
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  000b0	8b c8		 mov	 ecx, eax
  000b2	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::deallocate
$LN5@assign:

; 1340 : 				}
; 1341 : 
; 1342 : 			_Buy(_Newcapacity);

  000b7	8b 45 d4	 mov	 eax, DWORD PTR __Newcapacity$2[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	e8 00 00 00 00	 call	 ?_Buy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAE_NI@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Buy

; 1343 : 
; 1344 : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Newsize, _Val);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  000ca	51		 push	 ecx
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  000d3	8b 10		 mov	 edx, DWORD PTR [eax]
  000d5	52		 push	 edx
  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	e8 00 00 00 00	 call	 ?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@PAV32@IABV32@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Ufill
  000de	8b f0		 mov	 esi, eax
  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  000e8	89 30		 mov	 DWORD PTR [eax], esi
  000ea	e9 a8 00 00 00	 jmp	 $LN8@assign
$LN2@assign:

; 1345 : 			}
; 1346 : 		else if (_Newsize > _Oldsize)

  000ef	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000f2	3b 45 ec	 cmp	 eax, DWORD PTR __Oldsize$[ebp]
  000f5	76 4e		 jbe	 SHORT $LN6@assign

; 1347 : 			{
; 1348 : 			_Fill_unchecked(this->_Myfirst(), this->_Mylast(), _Val);

  000f7	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00103	8b 08		 mov	 ecx, DWORD PTR [eax]
  00105	51		 push	 ecx
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  0010e	8b 10		 mov	 edx, DWORD PTR [eax]
  00110	52		 push	 edx
  00111	e8 00 00 00 00	 call	 ??$_Fill_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@@Z ; std::_Fill_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1349 : 			this->_Mylast() = _Ufill(this->_Mylast(), _Newsize - _Oldsize, _Val);

  00119	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00120	2b 4d ec	 sub	 ecx, DWORD PTR __Oldsize$[ebp]
  00123	51		 push	 ecx
  00124	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  0012c	8b 10		 mov	 edx, DWORD PTR [eax]
  0012e	52		 push	 edx
  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	e8 00 00 00 00	 call	 ?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@PAV32@IABV32@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Ufill
  00137	8b f0		 mov	 esi, eax
  00139	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00141	89 30		 mov	 DWORD PTR [eax], esi

; 1350 : 			}
; 1351 : 		else

  00143	eb 52		 jmp	 SHORT $LN8@assign
$LN6@assign:

; 1352 : 			{
; 1353 : 			const pointer _Newlast = this->_Myfirst() + _Newsize;

  00145	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  0014d	8b 00		 mov	 eax, DWORD PTR [eax]
  0014f	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00152	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00155	89 55 c8	 mov	 DWORD PTR __Newlast$1[ebp], edx

; 1354 : 			_Fill_unchecked(this->_Myfirst(), _Newlast, _Val);

  00158	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0015b	50		 push	 eax
  0015c	8b 4d c8	 mov	 ecx, DWORD PTR __Newlast$1[ebp]
  0015f	51		 push	 ecx
  00160	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00163	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
  00168	8b 10		 mov	 edx, DWORD PTR [eax]
  0016a	52		 push	 edx
  0016b	e8 00 00 00 00	 call	 ??$_Fill_unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@0ABV10@@Z ; std::_Fill_unchecked<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > *,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1355 : 			_Destroy(_Newlast, this->_Mylast());

  00173	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  0017b	8b 00		 mov	 eax, DWORD PTR [eax]
  0017d	50		 push	 eax
  0017e	8b 4d c8	 mov	 ecx, DWORD PTR __Newlast$1[ebp]
  00181	51		 push	 ecx
  00182	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Destroy

; 1356 : 			this->_Mylast() = _Newlast;

  0018a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
  00192	8b 4d c8	 mov	 ecx, DWORD PTR __Newlast$1[ebp]
  00195	89 08		 mov	 DWORD PTR [eax], ecx
$LN8@assign:

; 1357 : 			}
; 1358 : 		}

  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  001a0	3b ec		 cmp	 ebp, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c2 08 00	 ret	 8
?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT
; _this$ = ecx

; 919  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 920  : 		_Tidy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Tidy

; 921  : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::~_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z PROC ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT
; _this$ = ecx

; 689  : 		{	// construct empty vector, allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 688  : 		: _Mybase(_Al)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > ><std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > const &,void>

; 690  : 		}

  0004e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::~_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::~_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 351  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 353  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 346  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 348  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 331  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 333  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 326  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 327  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 328  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >, COMDAT
; _this$ = ecx

; 436  : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12

; 433  : 		: _Myfirst(),

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 434  : 		_Mylast(),

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 435  : 		_Myend()

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 437  : 		}

  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend, COMDAT
; _this$ = ecx

; 633  : 		{	// return const reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 634  : 		return (_Get_data()._Myend);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  0002b	83 c0 0c	 add	 eax, 12			; 0000000cH

; 635  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend, COMDAT
; _this$ = ecx

; 628  : 		{	// return reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 629  : 		return (_Get_data()._Myend);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  0002b	83 c0 0c	 add	 eax, 12			; 0000000cH

; 630  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast, COMDAT
; _this$ = ecx

; 623  : 		{	// return const reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 624  : 		return (_Get_data()._Mylast);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  0002b	83 c0 08	 add	 eax, 8

; 625  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast, COMDAT
; _this$ = ecx

; 618  : 		{	// return reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 619  : 		return (_Get_data()._Mylast);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  0002b	83 c0 08	 add	 eax, 8

; 620  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 613  : 		{	// return const reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 614  : 		return (_Get_data()._Myfirst);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  0002b	83 c0 04	 add	 eax, 4

; 615  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 608  : 		{	// return reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 609  : 		return (_Get_data()._Myfirst);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  0002b	83 c0 04	 add	 eax, 4

; 610  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data, COMDAT
; _this$ = ecx

; 603  : 		{	// return const reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 604  : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second

; 605  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data, COMDAT
; _this$ = ecx

; 598  : 		{	// return reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 599  : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_second

; 600  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal, COMDAT
; _this$ = ecx

; 593  : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 594  : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first

; 595  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal, COMDAT
; _this$ = ecx

; 588  : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 589  : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >,std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >,1>::_Get_first

; 590  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Orphan_all, COMDAT
; _this$ = ecx

; 578  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 579  : 		_Get_data()._Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 580  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy, COMDAT
; _this$ = ecx

; 567  : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 568  : 		return (_Get_data()._Myproxy);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data

; 569  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Free_proxy, COMDAT
; _this$ = ecx

; 553  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 554  : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >

; 555  : 		_Orphan_all();

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Orphan_all

; 556  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	50		 push	 eax
  00051	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  0005a	83 c4 08	 add	 esp, 8

; 557  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	50		 push	 eax
  00068	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00071	83 c4 08	 add	 esp, 8

; 558  : 		_Myproxy() = 0;

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 559  : 		}

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	0f 1f 00	 npad	 3
$LN5@Free_proxy:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  000bc	eb ff ff ff	 DD	 -21			; ffffffebH
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  000c8	5f		 DB	 95			; 0000005fH
  000c9	50		 DB	 80			; 00000050H
  000ca	72		 DB	 114			; 00000072H
  000cb	6f		 DB	 111			; 0000006fH
  000cc	78		 DB	 120			; 00000078H
  000cd	79		 DB	 121			; 00000079H
  000ce	5f		 DB	 95			; 0000005fH
  000cf	61		 DB	 97			; 00000061H
  000d0	6c		 DB	 108			; 0000006cH
  000d1	6c		 DB	 108			; 0000006cH
  000d2	6f		 DB	 111			; 0000006fH
  000d3	63		 DB	 99			; 00000063H
  000d4	61		 DB	 97			; 00000061H
  000d5	74		 DB	 116			; 00000074H
  000d6	6f		 DB	 111			; 0000006fH
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -232						; size = 8
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 545  : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 546  : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >

; 547  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0003e	6a 01		 push	 1
  00040	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00043	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f0		 mov	 esi, eax
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
  0005b	89 30		 mov	 DWORD PTR [eax], esi

; 548  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0005d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00063	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00068	50		 push	 eax
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	50		 push	 eax
  00074	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 549  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00080	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Get_data
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >
  0008e	83 c4 04	 add	 esp, 4
  00091	8b f0		 mov	 esi, eax
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Myproxy
  0009b	8b 00		 mov	 eax, DWORD PTR [eax]
  0009d	89 30		 mov	 DWORD PTR [eax], esi

; 550  : 		}

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
  000ce	66 90		 npad	 2
$LN5@Alloc_prox:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  000d8	eb ff ff ff	 DD	 -21			; ffffffebH
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  000e4	5f		 DB	 95			; 0000005fH
  000e5	50		 DB	 80			; 00000050H
  000e6	72		 DB	 114			; 00000072H
  000e7	6f		 DB	 111			; 0000006fH
  000e8	78		 DB	 120			; 00000078H
  000e9	79		 DB	 121			; 00000079H
  000ea	5f		 DB	 95			; 0000005fH
  000eb	61		 DB	 97			; 00000061H
  000ec	6c		 DB	 108			; 0000006cH
  000ed	6c		 DB	 108			; 0000006cH
  000ee	6f		 DB	 111			; 0000006fH
  000ef	63		 DB	 99			; 00000063H
  000f0	61		 DB	 97			; 00000061H
  000f1	74		 DB	 116			; 00000074H
  000f2	6f		 DB	 111			; 0000006fH
  000f3	72		 DB	 114			; 00000072H
  000f4	00		 DB	 0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::~_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >, COMDAT
; _this$ = ecx

; 504  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 505  : 		_Free_proxy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::_Free_proxy

; 506  : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@XZ
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >::~_Vector_alloc<std::_Vec_base_types<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size, COMDAT

; 955  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 956  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  0001e	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 957  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z PROC ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 04		 push	 4
  00025	6a 04		 push	 4
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z PROC ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::deallocate, COMDAT
; _this$ = ecx

; 1049 : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1050 : 		_Deallocate(_Ptr, _Count, sizeof(_Ty), alignof(_Ty));

  00023	6a 04		 push	 4
  00025	6a 04		 push	 4
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 1051 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAEXQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEABMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEABMXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size, COMDAT
; _this$ = ecx

; 1168 : 		{	// return const reference to current maximum bucket size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1169 : 		return (_Traitsobj._Get_max_bucket_size());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABMXZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size

; 1170 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEABMXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAMXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size, COMDAT
; _this$ = ecx

; 1163 : 		{	// return reference to current maximum bucket size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1164 : 		return (_Traitsobj._Get_max_bucket_size());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAEAAMXZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size

; 1165 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAMXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Reinsert@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -276						; size = 16
$T2 = -252						; size = 4
__Done$3 = -45						; size = 1
__First$4 = -36						; size = 4
__Last$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Reinsert@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Reinsert, COMDAT
; _this$ = ecx

; 1149 : 		{	// insert elements in [begin(), end())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00013	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1150 : 		_Unchecked_iterator _Last = _Unchecked_end();

  0002d	6a 04		 push	 4
  0002f	8d 4d e8	 lea	 ecx, DWORD PTR __Last$[ebp]
  00032	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00037	8d 45 e8	 lea	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end

; 1151 : 		if (_Unchecked_begin() != _Last)

  00043	8d 45 e8	 lea	 eax, DWORD PTR __Last$[ebp]
  00046	50		 push	 eax
  00047	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0004d	51		 push	 ecx
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_begin
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=
  0005d	0f b6 d0	 movzx	 edx, al
  00060	85 d2		 test	 edx, edx
  00062	74 60		 je	 SHORT $LN1@Reinsert

; 1152 : 			for (--_Last; ; )

  00064	8d 4d e8	 lea	 ecx, DWORD PTR __Last$[ebp]
  00067	e8 00 00 00 00	 call	 ??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator--
$LN4@Reinsert:

; 1153 : 				{	// reinsert elements in [begin(), _Last]
; 1154 : 				_Unchecked_iterator _First = _Unchecked_begin();

  0006c	6a 04		 push	 4
  0006e	8d 4d dc	 lea	 ecx, DWORD PTR __First$4[ebp]
  00071	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00076	8d 45 dc	 lea	 eax, DWORD PTR __First$4[ebp]
  00079	50		 push	 eax
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_begin

; 1155 : 				bool _Done = _First == _Last;

  00082	8d 45 e8	 lea	 eax, DWORD PTR __Last$[ebp]
  00085	50		 push	 eax
  00086	8d 4d dc	 lea	 ecx, DWORD PTR __First$4[ebp]
  00089	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  0008e	88 45 d3	 mov	 BYTE PTR __Done$3[ebp], al

; 1156 : 				_Insert(*_First, _First);

  00091	8b 45 dc	 mov	 eax, DWORD PTR __First$4[ebp]
  00094	50		 push	 eax
  00095	8d 4d dc	 lea	 ecx, DWORD PTR __First$4[ebp]
  00098	e8 00 00 00 00	 call	 ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
  0009d	50		 push	 eax
  0009e	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000a4	51		 push	 ecx
  000a5	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	e8 00 00 00 00	 call	 ??$_Insert@AAU?$pair@QBDH@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@1@AAU?$pair@QBDH@1@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert<std::pair<char const * const,int> &,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >
  000ad	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000b3	e8 00 00 00 00	 call	 ??1?$pair@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@_N@std@@QAE@XZ

; 1157 : 				if (_Done)

  000b8	0f b6 45 d3	 movzx	 eax, BYTE PTR __Done$3[ebp]
  000bc	85 c0		 test	 eax, eax
  000be	74 02		 je	 SHORT $LN6@Reinsert

; 1158 : 					break;

  000c0	eb 02		 jmp	 SHORT $LN1@Reinsert
$LN6@Reinsert:

; 1159 : 				}

  000c2	eb a8		 jmp	 SHORT $LN4@Reinsert
$LN1@Reinsert:

; 1160 : 		}

  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Reinsert
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000db	33 cd		 xor	 ecx, ebp
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  000e8	3b ec		 cmp	 ebp, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c3		 ret	 0
  000f3	90		 npad	 1
$LN12@Reinsert:
  000f4	02 00 00 00	 DD	 2
  000f8	00 00 00 00	 DD	 $LN11@Reinsert
$LN11@Reinsert:
  000fc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00100	04 00 00 00	 DD	 4
  00104	00 00 00 00	 DD	 $LN9@Reinsert
  00108	dc ff ff ff	 DD	 -36			; ffffffdcH
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN10@Reinsert
$LN10@Reinsert:
  00114	5f		 DB	 95			; 0000005fH
  00115	46		 DB	 70			; 00000046H
  00116	69		 DB	 105			; 00000069H
  00117	72		 DB	 114			; 00000072H
  00118	73		 DB	 115			; 00000073H
  00119	74		 DB	 116			; 00000074H
  0011a	00		 DB	 0
$LN9@Reinsert:
  0011b	5f		 DB	 95			; 0000005fH
  0011c	4c		 DB	 76			; 0000004cH
  0011d	61		 DB	 97			; 00000061H
  0011e	73		 DB	 115			; 00000073H
  0011f	74		 DB	 116			; 00000074H
  00120	00		 DB	 0
?_Reinsert@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Reinsert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Check_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
tv90 = -228						; size = 4
tv131 = -224						; size = 4
tv86 = -220						; size = 4
__Newsize$1 = -20					; size = 4
_this$ = -8						; size = 4
?_Check_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Check_size, COMDAT
; _this$ = ecx

; 1133 : 		{	// grow table as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1134 : 		if (max_load_factor() < load_factor())

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::max_load_factor
  0002b	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv86[ebp]
  00031	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv86[ebp]
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR tv131[ebp], xmm0
  00044	e8 00 00 00 00	 call	 ?load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::load_factor
  00049	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR tv90[ebp]
  0004f	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR tv90[ebp]
  00057	f3 0f 10 8d 20
	ff ff ff	 movss	 xmm1, DWORD PTR tv131[ebp]
  0005f	0f 2f c1	 comiss	 xmm0, xmm1
  00062	76 4d		 jbe	 SHORT $LN2@Check_size

; 1135 : 
; 1136 : 			{	// rehash to bigger table
; 1137 : 			size_type _Newsize = bucket_count();

  00064	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?bucket_count@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::bucket_count
  0006c	89 45 ec	 mov	 DWORD PTR __Newsize$1[ebp], eax

; 1138 : 
; 1139 : 			if (_Newsize < 512)

  0006f	81 7d ec 00 02
	00 00		 cmp	 DWORD PTR __Newsize$1[ebp], 512 ; 00000200H
  00076	73 0b		 jae	 SHORT $LN3@Check_size

; 1140 : 				_Newsize *= 8;	// multiply by 8

  00078	8b 45 ec	 mov	 eax, DWORD PTR __Newsize$1[ebp]
  0007b	c1 e0 03	 shl	 eax, 3
  0007e	89 45 ec	 mov	 DWORD PTR __Newsize$1[ebp], eax
  00081	eb 1a		 jmp	 SHORT $LN5@Check_size
$LN3@Check_size:

; 1141 : 			else if (_Newsize < _Vec.max_size() / 2)

  00083	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	83 c1 10	 add	 ecx, 16			; 00000010H
  00089	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::max_size
  0008e	d1 e8		 shr	 eax, 1
  00090	39 45 ec	 cmp	 DWORD PTR __Newsize$1[ebp], eax
  00093	73 08		 jae	 SHORT $LN5@Check_size

; 1142 : 				_Newsize *= 2;	// multiply safely by 2

  00095	8b 45 ec	 mov	 eax, DWORD PTR __Newsize$1[ebp]
  00098	d1 e0		 shl	 eax, 1
  0009a	89 45 ec	 mov	 DWORD PTR __Newsize$1[ebp], eax
$LN5@Check_size:

; 1143 : 			_Init(_Newsize);

  0009d	8b 45 ec	 mov	 eax, DWORD PTR __Newsize$1[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Init@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXI@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Init

; 1144 : 			_Reinsert();

  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?_Reinsert@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Reinsert
$LN2@Check_size:

; 1145 : 			}
; 1146 : 		}

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
?_Check_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Check_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Init@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Buckets$ = 8						; size = 4
?_Init@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXI@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Init, COMDAT
; _this$ = ecx

; 1125 : 		{	// initialize hash table with _Buckets buckets, leave list alone

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1126 : 		_Vec.reserve(2 * _Buckets);	// avoid curdling _Vec if exception occurs

  00023	8b 45 08	 mov	 eax, DWORD PTR __Buckets$[ebp]
  00026	d1 e0		 shl	 eax, 1
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 10	 add	 ecx, 16			; 00000010H
  0002f	e8 00 00 00 00	 call	 ?reserve@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXI@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::reserve

; 1127 : 		_Vec.assign(2 * _Buckets, _Unchecked_end());

  00034	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
  00043	50		 push	 eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR __Buckets$[ebp]
  00047	d1 e1		 shl	 ecx, 1
  00049	51		 push	 ecx
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	83 c1 10	 add	 ecx, 16			; 00000010H
  00050	e8 00 00 00 00	 call	 ?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::assign

; 1128 : 		_Mask = _Buckets - 1;

  00055	8b 45 08	 mov	 eax, DWORD PTR __Buckets$[ebp]
  00058	83 e8 01	 sub	 eax, 1
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 1129 : 		_Maxidx = _Buckets;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR __Buckets$[ebp]
  00067	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 1130 : 		}

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?_Init@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXI@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Hashval@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEIABQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Keyval$ = 8						; size = 4
?_Hashval@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEIABQBD@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hashval, COMDAT
; _this$ = ecx

; 1120 : 		{	// return hash value, masked to current table size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1121 : 		return (_Traitsobj(_Keyval) & _Mask);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEIABQBD@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	23 41 20	 and	 eax, DWORD PTR [ecx+32]

; 1122 : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?_Hashval@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEIABQBD@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hashval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Insert_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0I@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Plist$ = 8						; size = 4
__Where$ = 12						; size = 4
__Bucket$ = 16						; size = 4
?_Insert_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0I@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert_bucket, COMDAT
; _this$ = ecx

; 1091 : 		{	// fix iterators after inserting _Plist before _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1092 : 		if (_Vec_lo(_Bucket) == _Unchecked_end())

  00023	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
  00032	50		 push	 eax
  00033	8b 4d 10	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  00036	51		 push	 ecx
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  00046	0f b6 d0	 movzx	 edx, al
  00049	85 d2		 test	 edx, edx
  0004b	74 24		 je	 SHORT $LN2@Insert_buc

; 1093 : 			{	// make bucket non-empty
; 1094 : 			_Vec_lo(_Bucket) = _Plist;

  0004d	8b 45 10	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00050	50		 push	 eax
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  00059	8b 4d 08	 mov	 ecx, DWORD PTR __Plist$[ebp]
  0005c	89 08		 mov	 DWORD PTR [eax], ecx

; 1095 : 			_Vec_hi(_Bucket) = _Plist;

  0005e	8b 45 10	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00061	50		 push	 eax
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR __Plist$[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx
  0006f	eb 69		 jmp	 SHORT $LN1@Insert_buc
$LN2@Insert_buc:

; 1096 : 			}
; 1097 : 		else if (_Vec_lo(_Bucket) == _Where)

  00071	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  00074	50		 push	 eax
  00075	8b 4d 10	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  00078	51		 push	 ecx
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  00081	8b c8		 mov	 ecx, eax
  00083	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  00088	0f b6 d0	 movzx	 edx, al
  0008b	85 d2		 test	 edx, edx
  0008d	74 13		 je	 SHORT $LN4@Insert_buc

; 1098 : 			_Vec_lo(_Bucket) = _Plist;	// move beginning back one element

  0008f	8b 45 10	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00092	50		 push	 eax
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR __Plist$[ebp]
  0009e	89 08		 mov	 DWORD PTR [eax], ecx
  000a0	eb 38		 jmp	 SHORT $LN1@Insert_buc
$LN4@Insert_buc:

; 1099 : 		else if (++_Vec_hi(_Bucket) != _Plist)	// move end up one element

  000a2	8d 45 08	 lea	 eax, DWORD PTR __Plist$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d 10	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  000a9	51		 push	 ecx
  000aa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
  000b2	8b c8		 mov	 ecx, eax
  000b4	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
  000b9	8b c8		 mov	 ecx, eax
  000bb	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=
  000c0	0f b6 d0	 movzx	 edx, al
  000c3	85 d2		 test	 edx, edx
  000c5	74 13		 je	 SHORT $LN1@Insert_buc

; 1100 : 			--_Vec_hi(_Bucket);	// or not

  000c7	8b 45 10	 mov	 eax, DWORD PTR __Bucket$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
  000d3	8b c8		 mov	 ecx, eax
  000d5	e8 00 00 00 00	 call	 ??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator--
$LN1@Insert_buc:

; 1101 : 		}

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000e3	3b ec		 cmp	 ebp, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@0I@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Insert_bucket
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
$T2 = -252						; size = 4
$T3 = -240						; size = 4
__Plist$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Plist_arg$ = 8					; size = 12
__Bucket$ = 20						; size = 4
?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Erase_bucket, COMDAT
; _this$ = ecx

; 1075 : 		{	// fix iterators before erasing _Plist before _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00021	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1076 : 		_Unchecked_iterator _Plist = _Unchecked(_Plist_arg);

  0004c	6a 04		 push	 4
  0004e	8d 4d dc	 lea	 ecx, DWORD PTR __Plist$[ebp]
  00051	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00056	8d 45 08	 lea	 eax, DWORD PTR __Plist_arg$[ebp]
  00059	50		 push	 eax
  0005a	8d 4d dc	 lea	 ecx, DWORD PTR __Plist$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ??$_Unchecked@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@ABV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00063	83 c4 08	 add	 esp, 8

; 1077 : 		if (_Vec_hi(_Bucket) == _Plist)

  00066	8d 45 dc	 lea	 eax, DWORD PTR __Plist$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d 14	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
  00076	8b c8		 mov	 ecx, eax
  00078	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  0007d	0f b6 d0	 movzx	 edx, al
  00080	85 d2		 test	 edx, edx
  00082	74 78		 je	 SHORT $LN2@Erase_buck

; 1078 : 			if (_Vec_lo(_Bucket) == _Plist)

  00084	8d 45 dc	 lea	 eax, DWORD PTR __Plist$[ebp]
  00087	50		 push	 eax
  00088	8b 4d 14	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  0009b	0f b6 d0	 movzx	 edx, al
  0009e	85 d2		 test	 edx, edx
  000a0	74 40		 je	 SHORT $LN4@Erase_buck

; 1079 : 				{	// make bucket empty
; 1080 : 				_Vec_lo(_Bucket) = _Unchecked_end();

  000a2	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
  000b1	8b 30		 mov	 esi, DWORD PTR [eax]
  000b3	8b 4d 14	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  000b6	51		 push	 ecx
  000b7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  000bf	89 30		 mov	 DWORD PTR [eax], esi

; 1081 : 				_Vec_hi(_Bucket) = _Unchecked_end();

  000c1	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	e8 00 00 00 00	 call	 ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
  000d0	8b 30		 mov	 esi, DWORD PTR [eax]
  000d2	8b 4d 14	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  000d5	51		 push	 ecx
  000d6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	e8 00 00 00 00	 call	 ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
  000de	89 30		 mov	 DWORD PTR [eax], esi

; 1082 : 				}
; 1083 : 			else

  000e0	eb 18		 jmp	 SHORT $LN5@Erase_buck
$LN4@Erase_buck:

; 1084 : 				_Vec_hi(_Bucket) = --_Plist;	// move end back one element

  000e2	8d 4d dc	 lea	 ecx, DWORD PTR __Plist$[ebp]
  000e5	e8 00 00 00 00	 call	 ??F?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator--
  000ea	8b 30		 mov	 esi, DWORD PTR [eax]
  000ec	8b 45 14	 mov	 eax, DWORD PTR __Bucket$[ebp]
  000ef	50		 push	 eax
  000f0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	e8 00 00 00 00	 call	 ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
  000f8	89 30		 mov	 DWORD PTR [eax], esi
$LN5@Erase_buck:
  000fa	eb 36		 jmp	 SHORT $LN3@Erase_buck
$LN2@Erase_buck:

; 1085 : 		else if (_Vec_lo(_Bucket) == _Plist)

  000fc	8d 45 dc	 lea	 eax, DWORD PTR __Plist$[ebp]
  000ff	50		 push	 eax
  00100	8b 4d 14	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  00103	51		 push	 ecx
  00104	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  0010c	8b c8		 mov	 ecx, eax
  0010e	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  00113	0f b6 d0	 movzx	 edx, al
  00116	85 d2		 test	 edx, edx
  00118	74 18		 je	 SHORT $LN3@Erase_buck

; 1086 : 			_Vec_lo(_Bucket) = ++_Plist;	// move beginning up one element

  0011a	8d 4d dc	 lea	 ecx, DWORD PTR __Plist$[ebp]
  0011d	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
  00122	8b 30		 mov	 esi, DWORD PTR [eax]
  00124	8b 45 14	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00127	50		 push	 eax
  00128	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  00130	89 30		 mov	 DWORD PTR [eax], esi
$LN3@Erase_buck:

; 1087 : 		}

  00132	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00139	8d 4d 08	 lea	 ecx, DWORD PTR __Plist_arg$[ebp]
  0013c	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  00141	52		 push	 edx
  00142	8b cd		 mov	 ecx, ebp
  00144	50		 push	 eax
  00145	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Erase_buck
  0014b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00150	58		 pop	 eax
  00151	5a		 pop	 edx
  00152	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00155	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015c	59		 pop	 ecx
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00163	33 cd		 xor	 ecx, ebp
  00165	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016a	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  00170	3b ec		 cmp	 ebp, esp
  00172	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 10 00	 ret	 16			; 00000010H
  0017d	0f 1f 00	 npad	 3
$LN12@Erase_buck:
  00180	01 00 00 00	 DD	 1
  00184	00 00 00 00	 DD	 $LN11@Erase_buck
$LN11@Erase_buck:
  00188	dc ff ff ff	 DD	 -36			; ffffffdcH
  0018c	04 00 00 00	 DD	 4
  00190	00 00 00 00	 DD	 $LN9@Erase_buck
$LN9@Erase_buck:
  00194	5f		 DB	 95			; 0000005fH
  00195	50		 DB	 80			; 00000050H
  00196	6c		 DB	 108			; 0000006cH
  00197	69		 DB	 105			; 00000069H
  00198	73		 DB	 115			; 00000073H
  00199	74		 DB	 116			; 00000074H
  0019a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR __Plist_arg$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Erase_bucket
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_End@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
$T1 = -228						; size = 4
__Ans$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Bucket$ = 12						; size = 4
?_End@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_End, COMDAT
; _this$ = ecx

; 1054 : 		{	// return end iterator for bucket _Bucket

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		if (_Vec_lo(_Bucket) == _Unchecked_end())

  0002d	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00033	50		 push	 eax
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
  0003c	50		 push	 eax
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Bucket$[ebp]
  00040	51		 push	 ecx
  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator==
  00050	0f b6 d0	 movzx	 edx, al
  00053	85 d2		 test	 edx, edx
  00055	74 13		 je	 SHORT $LN2@End

; 1056 : 			return (_Unchecked_end());

  00057	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00066	eb 2f		 jmp	 SHORT $LN1@End

; 1057 : 		else

  00068	eb 2d		 jmp	 SHORT $LN1@End
$LN2@End:

; 1058 : 			{	// point past last element
; 1059 : 			_Unchecked_iterator _Ans = _Vec_hi(_Bucket);

  0006a	6a 04		 push	 4
  0006c	8d 4d e8	 lea	 ecx, DWORD PTR __Ans$2[ebp]
  0006f	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00074	8b 45 0c	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00077	50		 push	 eax
  00078	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
  00080	8b 08		 mov	 ecx, DWORD PTR [eax]
  00082	89 4d e8	 mov	 DWORD PTR __Ans$2[ebp], ecx

; 1060 : 			return (++_Ans);

  00085	8d 4d e8	 lea	 ecx, DWORD PTR __Ans$2[ebp]
  00088	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
  0008d	8b 00		 mov	 eax, DWORD PTR [eax]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	89 01		 mov	 DWORD PTR [ecx], eax
  00094	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@End:

; 1061 : 			}
; 1062 : 		}

  00097	52		 push	 edx
  00098	8b cd		 mov	 ecx, ebp
  0009a	50		 push	 eax
  0009b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@End
  000a1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a6	58		 pop	 eax
  000a7	5a		 pop	 edx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000bb	3b ec		 cmp	 ebp, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
$LN7@End:
  000c8	01 00 00 00	 DD	 1
  000cc	00 00 00 00	 DD	 $LN6@End
$LN6@End:
  000d0	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN5@End
$LN5@End:
  000dc	5f		 DB	 95			; 0000005fH
  000dd	41		 DB	 65			; 00000041H
  000de	6e		 DB	 110			; 0000006eH
  000df	73		 DB	 115			; 00000073H
  000e0	00		 DB	 0
?_End@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_End
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Bucket$ = 12						; size = 4
?_Begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Begin, COMDAT
; _this$ = ecx

; 1044 : 		{	// return begin iterator for bucket _Bucket

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1045 : 		return (_Vec_lo(_Bucket));

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	89 0a		 mov	 DWORD PTR [edx], ecx
  00036	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1046 : 		}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?_Begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Bucket$ = 8						; size = 4
?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi, COMDAT
; _this$ = ecx

; 1034 : 		{	// return reference to end()-1 for _Bucket

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1035 : 		return (_Vec[2 * _Bucket + 1]);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00026	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 10	 add	 ecx, 16			; 00000010H
  00031	e8 00 00 00 00	 call	 ??A?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@I@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::operator[]

; 1036 : 		}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?_Vec_hi@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_hi
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Bucket$ = 8						; size = 4
?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo, COMDAT
; _this$ = ecx

; 1024 : 		{	// return reference to begin() for _Bucket

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1025 : 		return (_Vec[2 * _Bucket]);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00026	d1 e0		 shl	 eax, 1
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 10	 add	 ecx, 16			; 00000010H
  0002f	e8 00 00 00 00	 call	 ??A?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@1@I@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::operator[]

; 1026 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?_Vec_lo@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Vec_lo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv133 = -292						; size = 4
tv130 = -288						; size = 4
tv135 = -284						; size = 4
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Plist$ = 8						; size = 4
?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Destroy_if_node, COMDAT
; _this$ = ecx

; 763  : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  00021	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 764  : 		_List.erase(_Make_iter(_Plist));

  00042	8b 45 08	 mov	 eax, DWORD PTR __Plist$[ebp]
  00045	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  0004b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0004e	8b f4		 mov	 esi, esp
  00050	89 a5 20 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
  00056	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  0005c	51		 push	 ecx
  0005d	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00063	52		 push	 edx
  00064	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
  0006c	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00072	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  00078	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  0007e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00085	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv130[ebp]
  0008b	51		 push	 ecx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00093	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00099	52		 push	 edx
  0009a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	83 c1 04	 add	 ecx, 4
  000a0	e8 00 00 00 00	 call	 ?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::erase
  000a5	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv133[ebp], eax
  000ab	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000b1	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000b6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bd	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c3	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ

; 765  : 		}

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0:
  00000	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-296]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Destroy_if_node@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Destroy_if_node
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z
_TEXT	SEGMENT
tv185 = -348						; size = 4
tv169 = -344						; size = 4
tv180 = -340						; size = 4
tv173 = -336						; size = 4
$T2 = -328						; size = 4
$T3 = -316						; size = 12
$T4 = -296						; size = 4
$T5 = -284						; size = 12
$T6 = -264						; size = 4
$T7 = -252						; size = 4
__Where$8 = -48						; size = 4
__Bucket$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 654  : 		{	// find leftmost not less than _Keyval in mutable hash table

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd a4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-348]
  00021	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 655  : 		size_type _Bucket = _Hashval(_Keyval);

  0004f	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00052	50		 push	 eax
  00053	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Hashval@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEIABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hashval
  0005b	89 45 dc	 mov	 DWORD PTR __Bucket$[ebp], eax

; 656  : 		for (_Unchecked_iterator _Where = _Begin(_Bucket);

  0005e	6a 04		 push	 4
  00060	8d 4d d0	 lea	 ecx, DWORD PTR __Where$8[ebp]
  00063	e8 00 00 00 00	 call	 ?__autoclassinit2@?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEXI@Z
  00068	8b 45 dc	 mov	 eax, DWORD PTR __Bucket$[ebp]
  0006b	50		 push	 eax
  0006c	8d 4d d0	 lea	 ecx, DWORD PTR __Where$8[ebp]
  0006f	51		 push	 ecx
  00070	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Begin
  00078	eb 08		 jmp	 SHORT $LN4@lower_boun
$LN2@lower_boun:

; 657  : 			_Where != _End(_Bucket); ++_Where)

  0007a	8d 4d d0	 lea	 ecx, DWORD PTR __Where$8[ebp]
  0007d	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
$LN4@lower_boun:
  00082	8b 45 dc	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00085	50		 push	 eax
  00086	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0008c	51		 push	 ecx
  0008d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?_End@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_End
  00095	50		 push	 eax
  00096	8d 4d d0	 lea	 ecx, DWORD PTR __Where$8[ebp]
  00099	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,std::_Iterator_base0>::operator!=
  0009e	0f b6 d0	 movzx	 edx, al
  000a1	85 d2		 test	 edx, edx
  000a3	0f 84 48 01 00
	00		 je	 $LN3@lower_boun

; 658  : 			if (!_Traitsobj(_Traits::_Kfn(*_Where), _Keyval))

  000a9	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000ac	50		 push	 eax
  000ad	8d 4d d0	 lea	 ecx, DWORD PTR __Where$8[ebp]
  000b0	e8 00 00 00 00	 call	 ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
  000bb	83 c4 04	 add	 esp, 4
  000be	50		 push	 eax
  000bf	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBE_NABQBD0@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
  000c7	0f b6 c8	 movzx	 ecx, al
  000ca	85 c9		 test	 ecx, ecx
  000cc	0f 85 1a 01 00
	00		 jne	 $LN5@lower_boun

; 659  : 				return (_Traitsobj(_Keyval,

  000d2	8d 4d d0	 lea	 ecx, DWORD PTR __Where$8[ebp]
  000d5	e8 00 00 00 00	 call	 ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
  000e0	83 c4 04	 add	 esp, 4
  000e3	50		 push	 eax
  000e4	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	e8 00 00 00 00	 call	 ??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBE_NABQBD0@Z ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
  000f0	0f b6 c8	 movzx	 ecx, al
  000f3	85 c9		 test	 ecx, ecx
  000f5	74 45		 je	 SHORT $LN7@lower_boun
  000f7	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  000fd	52		 push	 edx
  000fe	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  00106	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv173[ebp], eax
  0010c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv173[ebp]
  00112	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv180[ebp], eax
  00118	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0011f	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00125	83 c9 01	 or	 ecx, 1
  00128	89 8d b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0012e	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR tv180[ebp]
  00134	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv169[ebp], edx
  0013a	eb 40		 jmp	 SHORT $LN8@lower_boun
$LN7@lower_boun:
  0013c	8b 45 d0	 mov	 eax, DWORD PTR __Where$8[ebp]
  0013f	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00145	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  0014b	51		 push	 ecx
  0014c	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00152	52		 push	 edx
  00153	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	e8 00 00 00 00	 call	 ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
  0015b	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv185[ebp], eax
  00161	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00167	83 c8 02	 or	 eax, 2
  0016a	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00170	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv185[ebp]
  00176	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv169[ebp], ecx
$LN8@lower_boun:
  0017c	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv169[ebp]
  00182	89 95 f8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], edx
  00188	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0018e	50		 push	 eax
  0018f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00192	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  00197	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0019d	83 c9 04	 or	 ecx, 4
  001a0	89 8d b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  001a6	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  001ac	83 e2 02	 and	 edx, 2
  001af	74 12		 je	 SHORT $LN15@lower_boun
  001b1	83 a5 b8 fe ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  001b8	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001be	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
$LN15@lower_boun:
  001c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ca	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  001d0	83 e0 01	 and	 eax, 1
  001d3	74 12		 je	 SHORT $LN16@lower_boun
  001d5	83 a5 b8 fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  001dc	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001e2	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
$LN16@lower_boun:
  001e7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001ea	eb 23		 jmp	 SHORT $LN1@lower_boun
$LN5@lower_boun:

; 660  : 					_Traits::_Kfn(*_Where)) ? end() : _Make_iter(_Where));
; 661  : 		return (end());

  001ec	e9 89 fe ff ff	 jmp	 $LN2@lower_boun
$LN3@lower_boun:
  001f1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001f4	50		 push	 eax
  001f5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f8	e8 00 00 00 00	 call	 ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
  001fd	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00203	83 c9 04	 or	 ecx, 4
  00206	89 8d b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0020c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@lower_boun:

; 662  : 		}

  0020f	52		 push	 edx
  00210	8b cd		 mov	 ecx, ebp
  00212	50		 push	 eax
  00213	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@lower_boun
  00219	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0021e	58		 pop	 eax
  0021f	5a		 pop	 edx
  00220	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00223	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022a	59		 pop	 ecx
  0022b	5f		 pop	 edi
  0022c	5e		 pop	 esi
  0022d	5b		 pop	 ebx
  0022e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00231	33 cd		 xor	 ecx, ebp
  00233	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00238	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  0023e	3b ec		 cmp	 ebp, esp
  00240	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 08 00	 ret	 8
  0024b	90		 npad	 1
$LN20@lower_boun:
  0024c	01 00 00 00	 DD	 1
  00250	00 00 00 00	 DD	 $LN19@lower_boun
$LN19@lower_boun:
  00254	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00258	04 00 00 00	 DD	 4
  0025c	00 00 00 00	 DD	 $LN17@lower_boun
$LN17@lower_boun:
  00260	5f		 DB	 95			; 0000005fH
  00261	57		 DB	 87			; 00000057H
  00262	68		 DB	 104			; 00000068H
  00263	65		 DB	 101			; 00000065H
  00264	72		 DB	 114			; 00000072H
  00265	65		 DB	 101			; 00000065H
  00266	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z$0:
  00000	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 12 00 00
	00		 je	 $LN10@lower_boun
  0000f	83 a5 b8 fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
$LN10@lower_boun:
  00021	c3		 ret	 0
__ehhandler$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z:
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::lower_bound
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find, COMDAT
; _this$ = ecx

; 638  : 		{	// find an element in mutable hash table that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 639  : 		return (lower_bound(_Keyval));

  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?lower_bound@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::lower_bound
  0003d	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00043	83 ca 01	 or	 edx, 1
  00046	89 95 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 640  : 		}

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
?find@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@ABQBD@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv81 = -284						; size = 4
tv162 = -280						; size = 4
tv154 = -280						; size = 4
$T2 = -272						; size = 4
$T3 = -260						; size = 4
$T4 = -248						; size = 4
$T5 = -236						; size = 4
__Bucket$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Plist$ = 12						; size = 12
?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 600  : 		{	// erase element at _Plist

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00021	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 601  : 		size_type _Bucket = _Hashval(_Traits::_Kfn(*_Plist));

  00053	8d 4d 0c	 lea	 ecx, DWORD PTR __Plist$[ebp]
  00056	e8 00 00 00 00	 call	 ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEABU?$pair@QBDH@1@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Kfn@QBDH@?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@SAABQBDABU?$pair@QBDH@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Kfn<char const * const,int>
  00061	83 c4 04	 add	 esp, 4
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Hashval@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEIABQBD@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hashval
  0006d	89 45 e0	 mov	 DWORD PTR __Bucket$[ebp], eax

; 602  : 
; 603  : 		_Erase_bucket(_Make_iter(_Plist), _Bucket);

  00070	8b 45 e0	 mov	 eax, DWORD PTR __Bucket$[ebp]
  00073	50		 push	 eax
  00074	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00077	8b cc		 mov	 ecx, esp
  00079	89 a5 14 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
  0007f	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv154[ebp], ecx
  00085	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00088	8b cc		 mov	 ecx, esp
  0008a	89 a5 08 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  00090	8d 55 0c	 lea	 edx, DWORD PTR __Plist$[ebp]
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00099	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv154[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
  000a8	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv81[ebp], eax
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Erase_bucket@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@I@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Erase_bucket

; 604  : 		return (_List.erase(_Plist));

  000b6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000b9	8b cc		 mov	 ecx, esp
  000bb	89 a5 fc fe ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  000c1	8d 45 0c	 lea	 eax, DWORD PTR __Plist$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000cd	51		 push	 ecx
  000ce	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	83 c1 04	 add	 ecx, 4
  000d4	e8 00 00 00 00	 call	 ?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::erase
  000d9	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  000df	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  000e5	83 ca 01	 or	 edx, 1
  000e8	89 95 f0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  000ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f5	8d 4d 0c	 lea	 ecx, DWORD PTR __Plist$[ebp]
  000f8	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000fd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 605  : 		}

  00100	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00103	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010a	59		 pop	 ecx
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  00114	3b ec		 cmp	 ebp, esp
  00116	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Plist$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::erase
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?max_load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?max_load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::max_load_factor, COMDAT
; _this$ = ecx

; 498  : 		{	// return maximum elements per bucket

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 499  : 		return (_Max_bucket_size());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IBEABMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size
  0002b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0002f	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv69[ebp], xmm0
  00037	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv69[ebp]

; 500  : 		}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?max_load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::max_load_factor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ
_TEXT	SEGMENT
tv91 = -236						; size = 4
tv86 = -232						; size = 8
tv83 = -224						; size = 4
tv95 = -220						; size = 4
tv77 = -216						; size = 8
tv74 = -208						; size = 4
_this$ = -8						; size = 4
?load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::load_factor, COMDAT
; _this$ = ecx

; 493  : 		{	// return elements per bucket

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 494  : 		return ((float)size() / (float)bucket_count());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::size
  0002b	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  00031	f2 0f 2a 85 30
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv74[ebp]
  00039	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  0003f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00042	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0004b	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv77[ebp], xmm0
  00053	f2 0f 5a 85 28
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv77[ebp]
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv95[ebp], xmm0
  00066	e8 00 00 00 00	 call	 ?bucket_count@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::bucket_count
  0006b	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv83[ebp], eax
  00071	f2 0f 2a 85 20
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv83[ebp]
  00079	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv83[ebp]
  0007f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00082	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0008b	f2 0f 11 85 18
	ff ff ff	 movsd	 QWORD PTR tv86[ebp], xmm0
  00093	f2 0f 5a 85 18
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv86[ebp]
  0009b	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR tv95[ebp]
  000a3	f3 0f 5e c8	 divss	 xmm1, xmm0
  000a7	f3 0f 11 8d 14
	ff ff ff	 movss	 DWORD PTR tv91[ebp], xmm1
  000af	d9 85 14 ff ff
	ff		 fld	 DWORD PTR tv91[ebp]

; 495  : 		}

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
?load_factor@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEMXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::load_factor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?bucket_count@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?bucket_count@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::bucket_count, COMDAT
; _this$ = ecx

; 420  : 		{	// return number of buckets

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 421  : 		return (_Maxidx);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 24	 mov	 eax, DWORD PTR [eax+36]

; 422  : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?bucket_count@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::bucket_count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::size, COMDAT
; _this$ = ecx

; 387  : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 388  : 		return (_List.size());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	e8 00 00 00 00	 call	 ?size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::size

; 389  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv87 = -232						; size = 4
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter, COMDAT
; _this$ = ecx

; 372  : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 373  : 		return (_List._Make_iter(_Where));

  0002d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00030	8b cc		 mov	 ecx, esp
  00032	89 a5 2c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], esp
  00038	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 04	 add	 ecx, 4
  0004b	e8 00 00 00 00	 call	 ?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter
  00050	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], eax
  00056	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0005c	83 ca 01	 or	 edx, 1
  0005f	89 95 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  00065	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00068	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0006d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 374  : 		}

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 10 00	 ret	 16			; 00000010H
?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter, COMDAT
; _this$ = ecx

; 367  : 		{	// make iterator from _Unchecked_const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 368  : 		return (_List._Make_iter(_Where));

  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	e8 00 00 00 00	 call	 ?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter
  00040	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00046	83 ca 01	 or	 edx, 1
  00049	89 95 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 369  : 		}

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?_Make_iter@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 357  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 358  : 		return (_List._Unchecked_end());

  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 04	 add	 ecx, 4
  0002d	e8 00 00 00 00	 call	 ?_Unchecked_end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_end
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 359  : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?_Unchecked_end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Unchecked_begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 347  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 348  : 		return (_List._Unchecked_begin());

  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 04	 add	 ecx, 4
  0002d	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_begin
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 349  : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?_Unchecked_begin@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end, COMDAT
; _this$ = ecx

; 337  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 338  : 		return (_List.end());

  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 04	 add	 ecx, 4
  0002d	e8 00 00 00 00	 call	 ?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::end
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 339  : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?end@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z PROC ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >, COMDAT
; _this$ = ecx

; 203  : 		{	// construct empty hash table

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 200  : 		: _Traitsobj(_Parg),

  00042	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@@Z ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>

; 201  : 			_List(_Al),

  0004e	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  00051	50		 push	 eax
  00052	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 c1 04	 add	 ecx, 4
  00058	e8 00 00 00 00	 call	 ??0?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 202  : 			_Vec(static_cast<_Aliter>(_Al))

  00064	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  00067	50		 push	 eax
  00068	8d 8d 23 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0006e	e8 00 00 00 00	 call	 ??$?0U?$pair@QBDH@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > >::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > ><std::pair<char const * const,int> >
  00073	50		 push	 eax
  00074	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	83 c1 10	 add	 ecx, 16			; 00000010H
  0007a	e8 00 00 00 00	 call	 ??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@ABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@1@@Z ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
  0007f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 204  : 		_Max_bucket_size() = _Bucket_size;

  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Max_bucket_size@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEAAMXZ ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Max_bucket_size
  0008b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00093	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 205  : 		_Init();

  00097	6a 08		 push	 8
  00099	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Init@?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@IAEXI@Z ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Init

; 206  : 		}

  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000bf	3b ec		 cmp	 ebp, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z$1:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 10	 add	 ecx, 16			; 00000010H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >::~vector<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >,std::allocator<std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > > > >
__ehhandler$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Hash@V?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ENDP ; std::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >::_Hash<std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnext$ = -48						; size = 4
__Lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Orphan_ptr, COMDAT
; _this$ = ecx

; 1861 : 		{	// orphan iterators with specified node pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1862 : 		_Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1863 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

  00060	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Getpfirst@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getpfirst
  00068	89 45 d0	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1864 : 		if (_Pnext != 0)

  0006b	83 7d d0 00	 cmp	 DWORD PTR __Pnext$[ebp], 0
  0006f	74 5b		 je	 SHORT $LN4@Orphan_ptr
$LN2@Orphan_ptr:

; 1865 : 			while (*_Pnext != 0)

  00071	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00074	83 38 00	 cmp	 DWORD PTR [eax], 0
  00077	74 53		 je	 SHORT $LN4@Orphan_ptr

; 1866 : 				{	// test an iterator
; 1867 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 1868 : 					|| (_Ptr != nullptr && (*_Pnext)->_Ptr != _Ptr))

  00079	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  0007c	8b 30		 mov	 esi, DWORD PTR [eax]
  0007e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  00086	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00089	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0008b	74 13		 je	 SHORT $LN7@Orphan_ptr
  0008d	83 7d 08 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00091	74 1c		 je	 SHORT $LN5@Orphan_ptr
  00093	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0009b	3b 55 08	 cmp	 edx, DWORD PTR __Ptr$[ebp]
  0009e	74 0f		 je	 SHORT $LN5@Orphan_ptr
$LN7@Orphan_ptr:

; 1869 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

  000a0	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  000aa	89 45 d0	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1870 : 				else

  000ad	eb 1b		 jmp	 SHORT $LN6@Orphan_ptr
$LN5@Orphan_ptr:

; 1871 : 					{	// orphan the iterator
; 1872 : 					(*_Pnext)->_Clrcont();

  000af	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b4	e8 00 00 00 00	 call	 ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont

; 1873 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

  000b9	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	e8 00 00 00 00	 call	 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
  000c3	8b 4d d0	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  000c6	8b 10		 mov	 edx, DWORD PTR [eax]
  000c8	89 11		 mov	 DWORD PTR [ecx], edx
$LN6@Orphan_ptr:

; 1874 : 					}
; 1875 : 				}

  000ca	eb a5		 jmp	 SHORT $LN2@Orphan_ptr
$LN4@Orphan_ptr:

; 1876 : 		}

  000cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d3	8b f4		 mov	 esi, esp
  000d5	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000de	3b f4		 cmp	 esi, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e5	52		 push	 edx
  000e6	8b cd		 mov	 ecx, ebp
  000e8	50		 push	 eax
  000e9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Orphan_ptr
  000ef	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f4	58		 pop	 eax
  000f5	5a		 pop	 edx
  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00107	33 cd		 xor	 ecx, ebp
  00109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010e	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00114	3b ec		 cmp	 ebp, esp
  00116	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 04 00	 ret	 4
  00121	0f 1f 00	 npad	 3
$LN13@Orphan_ptr:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN12@Orphan_ptr
$LN12@Orphan_ptr:
  0012c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN10@Orphan_ptr
$LN10@Orphan_ptr:
  00138	5f		 DB	 95			; 0000005fH
  00139	4c		 DB	 76			; 0000004cH
  0013a	6f		 DB	 111			; 0000006fH
  0013b	63		 DB	 99			; 00000063H
  0013c	6b		 DB	 107			; 0000006bH
  0013d	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Orphan_ptr
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Incsize@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXI@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Incsize, COMDAT
; _this$ = ecx

; 1853 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1854 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::max_size
  0002b	8b f0		 mov	 esi, eax
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
  00035	2b 30		 sub	 esi, DWORD PTR [eax]
  00037	83 ee 01	 sub	 esi, 1
  0003a	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  0003d	73 0a		 jae	 SHORT $LN2@Incsize

; 1855 : 			_Xlength_error("list<T> too long");

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00044	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Incsize:

; 1856 : 		this->_Mysize() += _Count;

  00049	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
  00051	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], eax
  00057	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv82[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	03 4d 08	 add	 ecx, DWORD PTR __Count$[ebp]
  00062	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv82[ebp]
  00068	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@Incsize:

; 1857 : 		}

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?_Incsize@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXI@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Tidy@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Tidy, COMDAT
; _this$ = ecx

; 1830 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1831 : 		clear();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::clear

; 1832 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Tidy@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Unchecked_splice@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@00@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
_this$ = -8						; size = 4
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?_Unchecked_splice@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@00@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_splice, COMDAT
; _this$ = ecx

; 1818 : 		{	// splice [_First, _Last) before _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1819 : 		_First._Ptr->_Prev->_Next = _Last._Ptr;

  00023	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0002c	89 11		 mov	 DWORD PTR [ecx], edx

; 1820 : 		_Last._Ptr->_Prev->_Next = _Where._Ptr;

  0002e	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]
  00037	89 11		 mov	 DWORD PTR [ecx], edx

; 1821 : 		_Where._Ptr->_Prev->_Next = _First._Ptr;

  00039	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  00042	89 11		 mov	 DWORD PTR [ecx], edx

; 1822 : 
; 1823 : 		_Nodeptr _Pnode = _Where._Ptr->_Prev;

  00044	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004a	89 4d ec	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 1824 : 		_Where._Ptr->_Prev = _Last._Ptr->_Prev;

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00050	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1825 : 		_Last._Ptr->_Prev = _First._Ptr->_Prev;

  00059	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0005f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00062	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1826 : 		_First._Ptr->_Prev = _Pnode;

  00065	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00068	8b 4d ec	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0006b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1827 : 		}

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 0c 00	 ret	 12			; 0000000cH
?_Unchecked_splice@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@00@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_splice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -44						; size = 4
__Pnode$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::clear, COMDAT
; _this$ = ecx

; 1438 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00021	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1439 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1440 : 
; 1441 : 		this->_Orphan_ptr(nullptr);

  00042	6a 00		 push	 0
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Orphan_ptr

; 1442 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1443 : 		_Nodeptr _Pnode = this->_Myhead()->_Next;

  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  00054	8b 00		 mov	 eax, DWORD PTR [eax]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 1444 : 		this->_Myhead()->_Next = this->_Myhead();

  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  00063	8b f0		 mov	 esi, eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0006d	8b 00		 mov	 eax, DWORD PTR [eax]
  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00071	89 08		 mov	 DWORD PTR [eax], ecx

; 1445 : 		this->_Myhead()->_Prev = this->_Myhead();

  00073	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0007b	8b f0		 mov	 esi, eax
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  00085	8b 00		 mov	 eax, DWORD PTR [eax]
  00087	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1446 : 		this->_Mysize() = 0;

  0008c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
  00094	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1447 : 
; 1448 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0009a	eb 06		 jmp	 SHORT $LN4@clear
$LN2@clear:
  0009c	8b 45 d4	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0009f	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN4@clear:
  000a2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  000aa	8b 4d e0	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000ad	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000af	74 16		 je	 SHORT $LN5@clear

; 1449 : 			{	// delete an element
; 1450 : 			_Pnext = _Pnode->_Next;

  000b1	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b6	89 4d d4	 mov	 DWORD PTR __Pnext$2[ebp], ecx

; 1451 : 			this->_Freenode(_Pnode);

  000b9	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	e8 00 00 00 00	 call	 ?_Freenode@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Freenode

; 1452 : 			}

  000c5	eb d5		 jmp	 SHORT $LN2@clear
$LN5@clear:

; 1453 : 		}

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000db	3b ec		 cmp	 ebp, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 0c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-244]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::clear
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv144 = -268						; size = 4
tv141 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
__Pnode$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::erase, COMDAT
; _this$ = ecx

; 1406 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00021	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1407 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);

  00053	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00056	8b c4		 mov	 eax, esp
  00058	89 a5 14 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  0005e	6a 00		 push	 0
  00060	50		 push	 eax
  00061	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00064	e8 00 00 00 00	 call	 ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator++
  00069	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unlinknode
  00071	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv141[ebp], eax
  00077	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR tv141[ebp]
  0007d	89 4d e0	 mov	 DWORD PTR __Pnode$[ebp], ecx

; 1408 : 		this->_Freenode(_Pnode);

  00080	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00083	50		 push	 eax
  00084	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?_Freenode@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Freenode

; 1409 : 		return (_Make_iter(_Where));

  0008c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0008f	8b cc		 mov	 ecx, esp
  00091	89 a5 08 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00097	8d 45 0c	 lea	 eax, DWORD PTR __Where$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a3	51		 push	 ecx
  000a4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	e8 00 00 00 00	 call	 ?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter
  000ac	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv144[ebp], eax
  000b2	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  000b8	83 ca 01	 or	 edx, 1
  000bb	89 95 fc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c8	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  000cb	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  000d0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1410 : 		}

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a f0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-272]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::erase
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv155 = -244						; size = 4
$T2 = -236						; size = 4
__Pnode$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Where$ = 8						; size = 12
?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unlinknode, COMDAT
; _this$ = ecx

; 1373 : 		{	// unlink node at _Where from the list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1374 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1375 : 		if (_Where._Getcont() != _STD addressof(this->_Get_data())
; 1376 : 			|| _Where._Ptr == this->_Myhead())

  00049	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00051	8b f0		 mov	 esi, eax
  00053	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00061	83 c4 04	 add	 esp, 4
  00064	3b f0		 cmp	 esi, eax
  00066	75 0f		 jne	 SHORT $LN3@Unlinknode
  00068	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  00070	8b 4d 10	 mov	 ecx, DWORD PTR __Where$[ebp+8]
  00073	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00075	75 3f		 jne	 SHORT $LN2@Unlinknode
$LN3@Unlinknode:

; 1377 : 			{
; 1378 : 			_DEBUG_ERROR("list erase iterator outside range");

  00077	68 62 05 00 00	 push	 1378			; 00000562H
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@
  00086	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	8b f4		 mov	 esi, esp
  00090	6a 00		 push	 0
  00092	68 62 05 00 00	 push	 1378			; 00000562H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_1MM@MIHPGOIE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1BAE@IMLNAFPP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?5@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn@
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ac	83 c4 14	 add	 esp, 20			; 00000014H
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Unlinknode:

; 1379 : 			}
; 1380 : 
; 1381 : 		_Nodeptr _Pnode = _Where._Ptr;

  000b6	8b 45 10	 mov	 eax, DWORD PTR __Where$[ebp+8]
  000b9	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1382 : 		_Orphan_ptr(_Pnode);

  000bc	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?_Orphan_ptr@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Orphan_ptr

; 1383 : 
; 1384 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1385 : 		_Nodeptr _Pnode = _Where._Ptr;
; 1386 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1387 : 
; 1388 : 		_Pnode->_Prev->_Next = _Pnode->_Next;

  000c8	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000cb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ce	8b 55 e0	 mov	 edx, DWORD PTR __Pnode$[ebp]
  000d1	8b 02		 mov	 eax, DWORD PTR [edx]
  000d3	89 01		 mov	 DWORD PTR [ecx], eax

; 1389 : 		_Pnode->_Next->_Prev = _Pnode->_Prev;

  000d5	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000da	8b 55 e0	 mov	 edx, DWORD PTR __Pnode$[ebp]
  000dd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1390 : 
; 1391 : 		--this->_Mysize();

  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	e8 00 00 00 00	 call	 ?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
  000eb	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  000f1	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv155[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	83 e9 01	 sub	 ecx, 1
  000fc	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv155[ebp]
  00102	89 0a		 mov	 DWORD PTR [edx], ecx

; 1392 : 		return (_Pnode);

  00104	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00107	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0010d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00114	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00117	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0011c	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 1393 : 		}

  00122	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00125	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012c	59		 pop	 ecx
  0012d	5f		 pop	 edi
  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00136	3b ec		 cmp	 ebp, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Unlinknode@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unlinknode
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ
_TEXT	SEGMENT
tv72 = -256						; size = 4
tv73 = -252						; size = 4
$T2 = -244						; size = 12
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::front, COMDAT
; _this$ = ecx

; 1191 : 		{	// return first element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00021	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1192 : 		return (*begin());

  00042	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00048	50		 push	 eax
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::begin
  00051	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  00057	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0005d	89 8d 00 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00070	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDH@1@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::operator*
  00075	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00082	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00088	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  0008d	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]

; 1193 : 		}

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ$0:
  00000	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?front@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEAAU?$pair@QBDH@2@XZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::front
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?max_size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::max_size, COMDAT
; _this$ = ecx

; 1176 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1177 : 		return (_Alnode_traits::max_size(this->_Getal()));

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::max_size
  00031	83 c4 04	 add	 esp, 4

; 1178 : 		}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?max_size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::size, COMDAT
; _this$ = ecx

; 1171 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1172 : 		return (this->_Mysize());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABIXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
  0002b	8b 00		 mov	 eax, DWORD PTR [eax]

; 1173 : 		}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?size@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBEIXZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter, COMDAT
; _this$ = ecx

; 1098 : 		{	// make iterator from _Unchecked_const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 1099 : 		return (iterator(_Where._Ptr, _STD addressof(this->_Get_data())));

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > const >
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  0004b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00051	83 c9 01	 or	 ecx, 1
  00054	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0005a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1100 : 		}

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter, COMDAT
; _this$ = ecx

; 1093 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1094 : 		return (iterator(_Where._Ptr, _STD addressof(this->_Get_data())));

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > const >
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  00057	50		 push	 eax
  00058	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0005b	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00060	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00063	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@XZ
  00068	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1095 : 		}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Make_iter
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Unchecked_end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1083 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1084 : 		return (_Unchecked_iterator(this->_Myhead(), nullptr));

  00023	6a 00		 push	 0
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00038	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1085 : 		}

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?_Unchecked_end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Unchecked_begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1073 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1074 : 		return (_Unchecked_iterator(this->_Myhead()->_Next, nullptr));

  00023	6a 00		 push	 0
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	51		 push	 ecx
  00032	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  0003a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1075 : 		}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?_Unchecked_begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::end, COMDAT
; _this$ = ecx

; 1063 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1064 : 		return (iterator(this->_Myhead(), _STD addressof(this->_Get_data())));

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
  0005e	50		 push	 eax
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00067	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1065 : 		}

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::end
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::begin, COMDAT
; _this$ = ecx

; 1053 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1054 : 		return (iterator(this->_Myhead()->_Next, _STD addressof(this->_Get_data())));

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	51		 push	 ecx
  00061	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00064	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QBDH@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  00069	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : 		}

  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@2@XZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::begin
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 1028 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1029 : 		_Tidy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Tidy@?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXXZ ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Tidy

; 1030 : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
??0?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z PROC ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 821  : 		{	// construct empty list, allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 820  : 		: _Mybase(_Al)

  00023	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@U?$pair@QBDH@std@@@std@@X@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > ><std::allocator<std::pair<char const * const,int> > const &,void>

; 822  : 		}

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??0?$list@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QBDH@std@@@1@@Z ENDP ; std::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::list<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ PROC ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::~_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAE@XZ ENDP ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::~_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Freenode@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z
_TEXT	SEGMENT
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z PROC ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Freenode, COMDAT
; _this$ = ecx

; 774  : 		{	// give node back

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 775  : 		_Alnode& _Al = this->_Getal();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  0002b	89 45 ec	 mov	 DWORD PTR __Al$[ebp], eax

; 776  : 		_Alnode_traits::destroy(_Al, _STD addressof(_Pnode->_Myval));

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00031	83 c0 08	 add	 eax, 8
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$addressof@U?$pair@QBDH@std@@@std@@YAPAU?$pair@QBDH@0@AAU10@@Z ; std::addressof<std::pair<char const * const,int> >
  0003a	83 c4 04	 add	 esp, 4
  0003d	50		 push	 eax
  0003e	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$destroy@U?$pair@QBDH@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAU?$pair@QBDH@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::destroy<std::pair<char const * const,int> >
  00047	83 c4 08	 add	 esp, 8

; 777  : 		_Node::_Freenode0(_Al, _Pnode);

  0004a	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_List_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >
  00057	83 c4 08	 add	 esp, 8

; 778  : 		}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?_Freenode@?$_List_buy@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ENDP ; std::_List_buy<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::~_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::~_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 351  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 353  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 346  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 348  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 331  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 333  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 326  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 327  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 328  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >::~_List_val<std::_List_simple_types<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >::~_List_val<std::_List_simple_types<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >, COMDAT
; _this$ = ecx

; 474  : 		{	// initialize data

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12

; 472  : 		: _Myhead(),

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 473  : 		_Mysize(0)

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 475  : 		}

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABIXZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize, COMDAT
; _this$ = ecx

; 722  : 		{	// return const reference to _Mysize

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 723  : 		return (_Get_data()._Mysize);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0002b	83 c0 08	 add	 eax, 8

; 724  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABIXZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize, COMDAT
; _this$ = ecx

; 717  : 		{	// return reference to _Mysize

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 718  : 		return (_Get_data()._Mysize);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0002b	83 c0 08	 add	 eax, 8

; 719  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAIXZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead, COMDAT
; _this$ = ecx

; 707  : 		{	// return reference to _Myhead

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 708  : 		return (_Get_data()._Myhead);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0002b	83 c0 04	 add	 eax, 4

; 709  : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data, COMDAT
; _this$ = ecx

; 702  : 		{	// return const reference to _List_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 703  : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second

; 704  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data, COMDAT
; _this$ = ecx

; 697  : 		{	// return reference to _List_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 698  : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_second

; 699  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal, COMDAT
; _this$ = ecx

; 692  : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 693  : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first

; 694  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal, COMDAT
; _this$ = ecx

; 687  : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 688  : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >,std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > >,1>::_Get_first

; 689  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Orphan_all@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Orphan_all, COMDAT
; _this$ = ecx

; 677  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 678  : 		_Get_data()._Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 679  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
__Al$ = -48						; size = 4
__Pnode$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buynode0, COMDAT
; _this$ = ecx

; 655  : 		{	// allocate a node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00022	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	59		 pop	 ecx
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00043	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 656  : 		_Nodeptr _Pnode = _Getal().allocate(1);

  00046	6a 01		 push	 1
  00048	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocate
  00057	89 45 dc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 657  : 
; 658  : 		if (_Next == _Nodeptr())

  0005a	83 7d 08 00	 cmp	 DWORD PTR __Next$[ebp], 0
  0005e	75 0c		 jne	 SHORT $LN2@Buynode0

; 659  : 			{	// point at self
; 660  : 			_Next = _Pnode;

  00060	8b 45 dc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00063	89 45 08	 mov	 DWORD PTR __Next$[ebp], eax

; 661  : 			_Prev = _Pnode;

  00066	8b 45 dc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00069	89 45 0c	 mov	 DWORD PTR __Prev$[ebp], eax
$LN2@Buynode0:

; 662  : 			}
; 663  : 
; 664  : 		_Alnode& _Al = _Getal();

  0006c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  00074	89 45 d0	 mov	 DWORD PTR __Al$[ebp], eax

; 665  : 		_TRY_BEGIN

  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 666  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Next), _Next);

  0007e	8d 45 08	 lea	 eax, DWORD PTR __Next$[ebp]
  00081	50		 push	 eax
  00082	8b 4d dc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<std::pair<char const * const,int>,void *> *>
  0008b	83 c4 04	 add	 esp, 4
  0008e	50		 push	 eax
  0008f	8b 55 d0	 mov	 edx, DWORD PTR __Al$[ebp]
  00092	52		 push	 edx
  00093	e8 00 00 00 00	 call	 ??$construct@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::_List_node<std::pair<char const * const,int>,void *> *,std::_List_node<std::pair<char const * const,int>,void *> * &>
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH

; 667  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Prev), _Prev);

  0009b	8d 45 0c	 lea	 eax, DWORD PTR __Prev$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d dc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  000a2	83 c1 04	 add	 ecx, 4
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QBDH@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<std::pair<char const * const,int>,void *> *>
  000ab	83 c4 04	 add	 esp, 4
  000ae	50		 push	 eax
  000af	8b 55 d0	 mov	 edx, DWORD PTR __Al$[ebp]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 ??$construct@PAU?$_List_node@U?$pair@QBDH@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@QAPAU?$_List_node@U?$pair@QBDH@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::construct<std::_List_node<std::pair<char const * const,int>,void *> *,std::_List_node<std::pair<char const * const,int>,void *> * &>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	eb 1d		 jmp	 SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z$0:

; 668  : 		_CATCH_ALL
; 669  : 		_Al.deallocate(_Pnode, 1);

  000bd	6a 01		 push	 1
  000bf	8b 45 dc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000c2	50		 push	 eax
  000c3	8b 4d d0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000c6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::deallocate

; 670  : 		_RERAISE;

  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 __CxxThrowException@8

; 671  : 		_CATCH_END

  000d4	b8 00 00 00 00	 mov	 eax, $LN8@Buynode0
  000d9	c3		 ret	 0
$LN5@Buynode0:
  000da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000e1	eb 07		 jmp	 SHORT __tryend$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z$1
$LN8@Buynode0:
  000e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z$1:

; 672  : 
; 673  : 		return (_Pnode);

  000ea	8b 45 dc	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 674  : 		}

  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buynode0
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 650  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 651  : 		_Node::_Freenode0(_Getal(), _Pnode);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@?$_List_node@U?$pair@QBDH@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@PAU01@@Z ; std::_List_node<std::pair<char const * const,int>,void *>::_Freenode0<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >
  00035	83 c4 08	 add	 esp, 8

; 652  : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 645  : 		{	// get head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 646  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buynode0

; 647  : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy, COMDAT
; _this$ = ecx

; 594  : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 595  : 		return (_Get_data()._Myproxy);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data

; 596  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Getpfirst@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getpfirst@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getpfirst, COMDAT
; _this$ = ecx

; 589  : 		{	// get address of iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 590  : 		return (_Get_data()._Getpfirst());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 591  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Getpfirst@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Free_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Free_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Free_proxy, COMDAT
; _this$ = ecx

; 580  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 581  : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<std::pair<char const * const,int>,void *> >

; 582  : 		_Orphan_all();

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Orphan_all

; 583  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	50		 push	 eax
  00051	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  0005a	83 c4 08	 add	 esp, 8

; 584  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	50		 push	 eax
  00068	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00071	83 c4 08	 add	 esp, 8

; 585  : 		_Myproxy() = 0;

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 586  : 		}

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	0f 1f 00	 npad	 3
$LN5@Free_proxy:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  000bc	eb ff ff ff	 DD	 -21			; ffffffebH
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  000c8	5f		 DB	 95			; 0000005fH
  000c9	50		 DB	 80			; 00000050H
  000ca	72		 DB	 114			; 00000072H
  000cb	6f		 DB	 111			; 0000006fH
  000cc	78		 DB	 120			; 00000078H
  000cd	79		 DB	 121			; 00000079H
  000ce	5f		 DB	 95			; 0000005fH
  000cf	61		 DB	 97			; 00000061H
  000d0	6c		 DB	 108			; 0000006cH
  000d1	6c		 DB	 108			; 0000006cH
  000d2	6f		 DB	 111			; 0000006fH
  000d3	63		 DB	 99			; 00000063H
  000d4	61		 DB	 97			; 00000061H
  000d5	74		 DB	 116			; 00000074H
  000d6	6f		 DB	 111			; 0000006fH
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
?_Free_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ?_Alloc_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -232						; size = 8
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Alloc_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 572  : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 573  : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<std::pair<char const * const,int>,void *> >

; 574  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0003e	6a 01		 push	 1
  00040	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00043	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f0		 mov	 esi, eax
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
  0005b	89 30		 mov	 DWORD PTR [eax], esi

; 575  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0005d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00063	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00068	50		 push	 eax
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	50		 push	 eax
  00074	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00080	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Get_data@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Get_data
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<std::pair<char const * const,int> > > >
  0008e	83 c4 04	 add	 esp, 4
  00091	8b f0		 mov	 esi, eax
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Myproxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myproxy
  0009b	8b 00		 mov	 eax, DWORD PTR [eax]
  0009d	89 30		 mov	 DWORD PTR [eax], esi

; 577  : 		}

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
  000ce	66 90		 npad	 2
$LN5@Alloc_prox:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  000d8	eb ff ff ff	 DD	 -21			; ffffffebH
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  000e4	5f		 DB	 95			; 0000005fH
  000e5	50		 DB	 80			; 00000050H
  000e6	72		 DB	 114			; 00000072H
  000e7	6f		 DB	 111			; 0000006fH
  000e8	78		 DB	 120			; 00000078H
  000e9	79		 DB	 121			; 00000079H
  000ea	5f		 DB	 95			; 0000005fH
  000eb	61		 DB	 97			; 00000061H
  000ec	6c		 DB	 108			; 0000006cH
  000ed	6c		 DB	 108			; 0000006cH
  000ee	6f		 DB	 111			; 0000006fH
  000ef	63		 DB	 99			; 00000063H
  000f0	61		 DB	 97			; 00000061H
  000f1	74		 DB	 116			; 00000074H
  000f2	6f		 DB	 111			; 0000006fH
  000f3	72		 DB	 114			; 00000072H
  000f4	00		 DB	 0
?_Alloc_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\list
;	COMDAT ??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::~_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >, COMDAT
; _this$ = ecx

; 566  : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 567  : 		_Freeheadnode(_Myhead());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Myhead@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEAAPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@XZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Myhead
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Freeheadnode@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@@Z ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Freeheadnode

; 568  : 		_Free_proxy();

  00055	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Free_proxy@?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAEXXZ ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::_Free_proxy

; 569  : 		}

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@U?$pair@QBDH@std@@@std@@@2@$00@std@@QAE@XZ
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_List_alloc@U?$_List_base_types@U?$pair@QBDH@std@@V?$allocator@U?$pair@QBDH@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >::~_List_alloc<std::_List_base_types<std::pair<char const * const,int>,std::allocator<std::pair<char const * const,int> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::max_size, COMDAT

; 955  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 956  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  0001e	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 957  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::deallocate, COMDAT

; 936  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 937  : 		_Deallocate(_Ptr, _Count, sizeof(value_type), alignof(value_type));

  0001e	6a 04		 push	 4
  00020	6a 10		 push	 16			; 00000010H
  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@2@QAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<char const * const,int>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 04		 push	 4
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 1049 : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1050 : 		_Deallocate(_Ptr, _Count, sizeof(_Ty), alignof(_Ty));

  00023	6a 04		 push	 4
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 1051 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_List_node@U?$pair@QBDH@std@@PAX@std@@@std@@QAEXQAU?$_List_node@U?$pair@QBDH@std@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<std::pair<char const * const,int>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@QBDH@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@U?$pair@QBDH@std@@@std@@QAE@XZ PROC	; std::allocator<std::pair<char const * const,int> >::allocator<std::pair<char const * const,int> >, COMDAT
; _this$ = ecx

; 1038 : 	allocator() _NOEXCEPT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1039 : 		{	// construct default allocator (do nothing)
; 1040 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$allocator@U?$pair@QBDH@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<char const * const,int> >::allocator<std::pair<char const * const,int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\unordered_map
;	COMDAT ??0?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Traits$ = 8						; size = 4
??0?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@@Z PROC ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with specified comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		: _Tr(_Traits)

  00023	8b 45 08	 mov	 eax, DWORD PTR __Traits$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	89 0a		 mov	 DWORD PTR [edx], ecx

; 45   : 		}

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??0?$_Umap_traits@PBDHV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@V?$allocator@U?$pair@QBDH@std@@@2@$0A@@std@@QAE@ABV?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@1@@Z ENDP ; std::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>::_Umap_traits<char const *,int,std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >,std::allocator<std::pair<char const * const,int> >,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ PROC ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 351  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 353  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ ENDP ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ PROC ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 346  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 348  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ ENDP ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABU?$hash@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABU?$hash@PBD@2@XZ PROC ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 331  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 333  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABU?$hash@PBD@2@XZ ENDP ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABMXZ PROC ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second, COMDAT
; _this$ = ecx

; 351  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 353  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABMXZ ENDP ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAEAAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAEAAMXZ PROC ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second, COMDAT
; _this$ = ecx

; 346  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 348  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAEAAMXZ ENDP ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABU?$equal_to@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABU?$equal_to@PBD@2@XZ PROC ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_first, COMDAT
; _this$ = ecx

; 331  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 333  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABU?$equal_to@PBD@2@XZ ENDP ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ?_Do_hash@?$hash@PBD@std@@SAIABQBD@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Do_hash@?$hash@PBD@std@@SAIABQBD@Z PROC		; std::hash<char const *>::_Do_hash, COMDAT

; 2375 : 		{	// hash _Keyval to size_t value by pseudorandomizing transform

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2376 : 		return (_Hash_representation(_Keyval));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Hash_representation@PBD@std@@YAIABQBD@Z ; std::_Hash_representation<char const *>
  00027	83 c4 04	 add	 esp, 4

; 2377 : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?_Do_hash@?$hash@PBD@std@@SAIABQBD@Z ENDP		; std::hash<char const *>::_Do_hash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ??R?$_Conditionally_enabled_hash@PBD$00@std@@QBEIABQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Keyval$ = 8						; size = 4
??R?$_Conditionally_enabled_hash@PBD$00@std@@QBEIABQBD@Z PROC ; std::_Conditionally_enabled_hash<char const *,1>::operator(), COMDAT
; _this$ = ecx

; 2353 : 		{	// hash _Keyval to size_t value by pseudorandomizing transform

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2354 : 		return (hash<_Kty>::_Do_hash(_Keyval));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?_Do_hash@?$hash@PBD@std@@SAIABQBD@Z ; std::hash<char const *>::_Do_hash
  0002c	83 c4 04	 add	 esp, 4

; 2355 : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??R?$_Conditionally_enabled_hash@PBD$00@std@@QBEIABQBD@Z ENDP ; std::_Conditionally_enabled_hash<char const *,1>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstddef
;	COMDAT ??R?$equal_to@PBD@std@@QBE_NABQBD0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
_this$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$equal_to@PBD@std@@QBE_NABQBD0@Z PROC		; std::equal_to<char const *>::operator(), COMDAT
; _this$ = ecx

; 141  : 		{	// apply operator== to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 142  : 		return (_Left == _Right);

  00023	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002d	75 0c		 jne	 SHORT $LN3@operator
  0002f	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00039	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0003b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00045	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 143  : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
??R?$equal_to@PBD@std@@QBE_NABQBD0@Z ENDP		; std::equal_to<char const *>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABMXZ PROC ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size, COMDAT
; _this$ = ecx

; 138  : 		{	// return const reference to current maximum bucket size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 139  : 		return (_Mypair._Get_second()._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABMXZ ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second

; 140  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABMXZ ENDP ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAEAAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAEAAMXZ PROC ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size, COMDAT
; _this$ = ecx

; 133  : 		{	// return reference to current maximum bucket size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 134  : 		return (_Mypair._Get_second()._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QAEAAMXZ ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_second

; 135  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Get_max_bucket_size@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAEAAMXZ ENDP ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Get_max_bucket_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Getkeyeq@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$equal_to@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getkeyeq@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$equal_to@PBD@2@XZ PROC ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Getkeyeq, COMDAT
; _this$ = ecx

; 128  : 		{	// return const reference to key equality predicate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 129  : 		return (_Mypair._Get_second()._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@XZ ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_second
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@std@@QBEABU?$equal_to@PBD@2@XZ ; std::_Compressed_pair<std::equal_to<char const *>,float,1>::_Get_first

; 130  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Getkeyeq@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$equal_to@PBD@2@XZ ENDP ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Getkeyeq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ?_Gethash@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$hash@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Gethash@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$hash@PBD@2@XZ PROC ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Gethash, COMDAT
; _this$ = ecx

; 123  : 		{	// return const reference to hash function

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 124  : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QBEABU?$hash@PBD@2@XZ ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Get_first

; 125  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Gethash@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$hash@PBD@2@XZ ENDP ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Gethash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBE_NABQBD0@Z
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
__Keyval1$ = 8						; size = 4
__Keyval2$ = 12						; size = 4
??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBE_NABQBD0@Z PROC ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator(), COMDAT
; _this$ = ecx

; 118  : 		{	// test if _Keyval1 NOT equal to _Keyval2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 		return (!_Getkeyeq()(_Keyval1, _Keyval2));

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Keyval2$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval1$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Getkeyeq@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$equal_to@PBD@2@XZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Getkeyeq
  00033	8b c8		 mov	 ecx, eax
  00035	e8 00 00 00 00	 call	 ??R?$equal_to@PBD@std@@QBE_NABQBD0@Z ; std::equal_to<char const *>::operator()
  0003a	0f b6 d0	 movzx	 edx, al
  0003d	85 d2		 test	 edx, edx
  0003f	75 0c		 jne	 SHORT $LN3@operator
  00041	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv72[ebp], 1
  0004b	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0004d	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv72[ebp], 0
$LN4@operator:
  00057	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv72[ebp]

; 120  : 		}

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBE_NABQBD0@Z ENDP ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEIABQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Keyval$ = 8						; size = 4
??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEIABQBD@Z PROC ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator(), COMDAT
; _this$ = ecx

; 113  : 		{	// hash _Keyval to size_t value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 		return ((size_t)_Gethash()(_Keyval));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Gethash@?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEABU?$hash@PBD@2@XZ ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Gethash
  0002f	8b c8		 mov	 ecx, eax
  00031	e8 00 00 00 00	 call	 ??R?$_Conditionally_enabled_hash@PBD$00@std@@QBEIABQBD@Z ; std::_Conditionally_enabled_hash<char const *,1>::operator()

; 115  : 		}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??R?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QBEIABQBD@Z ENDP ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xhash
;	COMDAT ??0?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAE@U?$hash@PBD@1@U?$equal_to@PBD@1@@Z
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
$T3 = -212						; size = 4
_this$ = -8						; size = 4
__Hasharg$ = 8						; size = 1
__Keyeqarg$ = 12					; size = 1
??0?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAE@U?$hash@PBD@1@U?$equal_to@PBD@1@@Z PROC ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >, COMDAT
; _this$ = ecx

; 109  : 		{	// construct with hasher and equality comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 		: _Mypair(_One_then_variadic_args_t(), _Hasharg,

  00023	0f 57 c0	 xorps	 xmm0, xmm0
  00026	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  0002e	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00034	50		 push	 eax
  00035	8d 4d 0c	 lea	 ecx, DWORD PTR __Keyeqarg$[ebp]
  00038	51		 push	 ecx
  00039	8d 95 23 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  0003f	52		 push	 edx
  00040	8d 45 08	 lea	 eax, DWORD PTR __Hasharg$[ebp]
  00043	50		 push	 eax
  00044	0f b6 8d 17 ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  0004b	51		 push	 ecx
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ??$?0AAU?$hash@PBD@std@@U_One_then_variadic_args_t@1@AAU?$equal_to@PBD@1@M@?$_Compressed_pair@U?$hash@PBD@std@@V?$_Compressed_pair@U?$equal_to@PBD@std@@M$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@AAU?$hash@PBD@1@$$QAU21@AAU?$equal_to@PBD@1@$$QAM@Z ; std::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1>::_Compressed_pair<std::hash<char const *>,std::_Compressed_pair<std::equal_to<char const *>,float,1>,1><std::hash<char const *> &,std::_One_then_variadic_args_t,std::equal_to<char const *> &,float>

; 110  : 		}

  00054	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
??0?$_Uhash_compare@PBDU?$hash@PBD@std@@U?$equal_to@PBD@2@@std@@QAE@U?$hash@PBD@1@U?$equal_to@PBD@1@@Z ENDP ; std::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >::_Uhash_compare<char const *,std::hash<char const *>,std::equal_to<char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\math\mat4f.h
;	COMDAT ?getMatrixAsArray@Mat4f@Math@Engine@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getMatrixAsArray@Mat4f@Math@Engine@@QAEPAMXZ PROC	; Engine::Math::Mat4f::getMatrixAsArray, COMDAT
; _this$ = ecx

; 42   : 			inline float* getMatrixAsArray() { return m_Matrix.data(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?data@?$array@M$0BA@@std@@QAEPAMXZ ; std::array<float,16>::data
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?getMatrixAsArray@Mat4f@Math@Engine@@QAEPAMXZ ENDP	; Engine::Math::Mat4f::getMatrixAsArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\array
;	COMDAT ?data@?$array@M$0BA@@std@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@?$array@M$0BA@@std@@QAEPAMXZ PROC			; std::array<float,16>::data, COMDAT
; _this$ = ecx

; 219  : 		{	// return pointer to mutable data array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 		return (_Elems);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 221  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?data@?$array@M$0BA@@std@@QAEPAMXZ ENDP			; std::array<float,16>::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$tuple@$$V@std@@QAE@XZ PROC				; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 216  : 	constexpr tuple() _NOEXCEPT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 217  : 		{	// default construct
; 218  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$tuple@$$V@std@@QAE@XZ ENDP				; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 3710 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3711 : 		_Xlength_error("string too long");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 3712 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -245						; size = 1
__Al$2 = -44						; size = 4
__Ptr$3 = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3691 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3692 : 		this->_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 3693 : 		auto& _My_data = this->_Get_data();

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00033	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3694 : 		if (_My_data._Large_string_engaged())

  00036	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	74 46		 je	 SHORT $LN2@Tidy_deall

; 3695 : 			{
; 3696 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  00045	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	89 4d e0	 mov	 DWORD PTR __Ptr$3[ebp], ecx

; 3697 : 			auto& _Al = this->_Getal();

  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00056	89 45 d4	 mov	 DWORD PTR __Al$2[ebp], eax

; 3698 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

  00059	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	83 c0 04	 add	 eax, 4
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00065	83 c4 04	 add	 esp, 4
  00068	50		 push	 eax
  00069	8b 4d d4	 mov	 ecx, DWORD PTR __Al$2[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
  00072	83 c4 08	 add	 esp, 8

; 3699 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00075	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00078	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	51		 push	 ecx
  0007f	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$3[ebp]
  00082	52		 push	 edx
  00083	8b 4d d4	 mov	 ecx, DWORD PTR __Al$2[ebp]
  00086	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 3700 : 			}
; 3701 : 
; 3702 : 		_My_data._Mysize = 0;

  0008b	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0008e	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 3703 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00098	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 3704 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3705 : 		// write can alias this
; 3706 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0009f	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  000a6	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000ac	50		 push	 eax
  000ad	b9 01 00 00 00	 mov	 ecx, 1
  000b2	6b d1 00	 imul	 edx, ecx, 0
  000b5	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b8	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  000c2	83 c4 08	 add	 esp, 8

; 3707 : 		}

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -221						; size = 1
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3681 : 		{	// initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3682 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3683 : 		_My_data._Mysize = 0;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 3684 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00038	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 3685 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3686 : 		// write can alias this
; 3687 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00042	c6 85 23 ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00049	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004f	50		 push	 eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005b	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00065	83 c4 08	 add	 esp, 8

; 3688 : 		}

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
$T1 = -264						; size = 4
__Old$ = -60						; size = 4
__Masked$ = -48						; size = 4
__My_data$ = -36					; size = 4
__Max$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3573 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3574 : 		const size_type _Max = max_size();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	89 45 e8	 mov	 DWORD PTR __Max$[ebp], eax

; 3575 : 		auto& _My_data = this->_Get_data();

  00038	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	89 45 dc	 mov	 DWORD PTR __My_data$[ebp], eax

; 3576 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00043	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00046	83 c8 0f	 or	 eax, 15			; 0000000fH
  00049	89 45 d0	 mov	 DWORD PTR __Masked$[ebp], eax

; 3577 : 		if (_Masked > _Max)

  0004c	8b 45 d0	 mov	 eax, DWORD PTR __Masked$[ebp]
  0004f	3b 45 e8	 cmp	 eax, DWORD PTR __Max$[ebp]
  00052	76 05		 jbe	 SHORT $LN2@Calculate_

; 3578 : 			{	// the mask overflows, settle for max_size()
; 3579 : 			return (_Max);

  00054	8b 45 e8	 mov	 eax, DWORD PTR __Max$[ebp]
  00057	eb 40		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 3580 : 			}
; 3581 : 
; 3582 : 		const size_type _Old = _My_data._Myres;

  00059	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0005f	89 4d c4	 mov	 DWORD PTR __Old$[ebp], ecx

; 3583 : 		if (_Old > _Max - _Old / 2)

  00062	8b 45 c4	 mov	 eax, DWORD PTR __Old$[ebp]
  00065	d1 e8		 shr	 eax, 1
  00067	8b 4d e8	 mov	 ecx, DWORD PTR __Max$[ebp]
  0006a	2b c8		 sub	 ecx, eax
  0006c	39 4d c4	 cmp	 DWORD PTR __Old$[ebp], ecx
  0006f	76 05		 jbe	 SHORT $LN3@Calculate_

; 3584 : 			{	// similarly, geometric overflows
; 3585 : 			return (_Max);

  00071	8b 45 e8	 mov	 eax, DWORD PTR __Max$[ebp]
  00074	eb 23		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 3586 : 			}
; 3587 : 
; 3588 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00076	8b 45 c4	 mov	 eax, DWORD PTR __Old$[ebp]
  00079	d1 e8		 shr	 eax, 1
  0007b	03 45 c4	 add	 eax, DWORD PTR __Old$[ebp]
  0007e	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00084	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0008a	51		 push	 ecx
  0008b	8d 55 d0	 lea	 edx, DWORD PTR __Masked$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00094	83 c4 08	 add	 esp, 8
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 3589 : 		}

  00099	52		 push	 edx
  0009a	8b cd		 mov	 ecx, ebp
  0009c	50		 push	 eax
  0009d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  000a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a8	58		 pop	 eax
  000a9	5a		 pop	 edx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
  000ca	66 90		 npad	 2
$LN7@Calculate_:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  000d4	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000d8	04 00 00 00	 DD	 4
  000dc	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  000e0	5f		 DB	 95			; 0000005fH
  000e1	4d		 DB	 77			; 0000004dH
  000e2	61		 DB	 97			; 00000061H
  000e3	73		 DB	 115			; 00000073H
  000e4	6b		 DB	 107			; 0000006bH
  000e5	65		 DB	 101			; 00000065H
  000e6	64		 DB	 100			; 00000064H
  000e7	00		 DB	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -264						; size = 4
$T2 = -252						; size = 4
$T3 = -240						; size = 4
__Storage_max$ = -36					; size = 4
__Alloc_max$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3051 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3052 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 e8	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3053 : 		const size_type _Storage_max = // can always store small string
; 3054 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));

  00041	c7 85 10 ff ff
	ff 10 00 00 00	 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  0004b	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00051	50		 push	 eax
  00052	8d 4d e8	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0005b	83 c4 08	 add	 esp, 8
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	89 55 dc	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3055 : 		return (_Min_value(

  00063	8b 45 dc	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  00066	83 e8 01	 sub	 eax, 1
  00069	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0006f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00074	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0007a	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00080	51		 push	 ecx
  00081	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0008d	83 c4 08	 add	 esp, 8
  00090	8b 00		 mov	 eax, DWORD PTR [eax]

; 3056 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3057 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3058 : 			));
; 3059 : 
; 3060 : 		}

  00092	52		 push	 edx
  00093	8b cd		 mov	 ecx, ebp
  00095	50		 push	 eax
  00096	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  0009c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a1	58		 pop	 eax
  000a2	5a		 pop	 edx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
  000c1	0f 1f 00	 npad	 3
$LN5@max_size:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000cc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d0	04 00 00 00	 DD	 4
  000d4	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000d8	5f		 DB	 95			; 0000005fH
  000d9	41		 DB	 65			; 00000041H
  000da	6c		 DB	 108			; 0000006cH
  000db	6c		 DB	 108			; 0000006cH
  000dc	6f		 DB	 111			; 0000006fH
  000dd	63		 DB	 99			; 00000063H
  000de	5f		 DB	 95			; 0000005fH
  000df	6d		 DB	 109			; 0000006dH
  000e0	61		 DB	 97			; 00000061H
  000e1	78		 DB	 120			; 00000078H
  000e2	00		 DB	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3046 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3047 : 		return (this->_Get_data()._Mysize);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3048 : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 3029 : 		{	// return pointer to immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3030 : 		return (this->_Get_data()._Myptr());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3031 : 		}

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3024 : 		{	// return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3025 : 		return (this->_Get_data()._Myptr());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3026 : 		}

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2436 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2437 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00035	83 c4 04	 add	 esp, 4
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2438 : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
__Old_ptr$3 = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2418 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2419 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2420 : 		if (_Count <= _My_data._Myres)

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00034	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00037	77 4a		 ja	 SHORT $LN2@assign

; 2421 : 			{
; 2422 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00039	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00041	89 45 e0	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2423 : 			_My_data._Mysize = _Count;

  00044	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00047	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2424 : 			_Traits::move(_Old_ptr, _Ptr, _Count);

  0004d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 e0	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2425 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00061	c6 85 17 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00068	8d 85 17 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d e0	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00072	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0007b	83 c4 08	 add	 esp, 8

; 2426 : 			return (*this);

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	eb 20		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2427 : 			}
; 2428 : 
; 2429 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00083	33 c0		 xor	 eax, eax
  00085	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008e	51		 push	 ecx
  0008f	0f b6 95 0b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  00096	52		 push	 edx
  00097	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2430 : 			_Traits::copy(_New_ptr, _Ptr, _Count);
; 2431 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2432 : 			}, _Ptr));
; 2433 : 		}

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2266 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2267 : 		return (assign(_Ptr));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2268 : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2230 : 		{	// destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2231 : 		_Tidy_deallocate();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2232 : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1921 : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1920 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >

; 1922 : 		_Tidy_init();

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1923 : 		}

  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 351  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 353  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 346  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 348  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 331  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 332  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 333  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 326  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 327  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 328  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1826 : 		{	// return const reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1827 : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1828 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1821 : 		{	// return reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1822 : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1823 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1816 : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1817 : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1818 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1811 : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1812 : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1813 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 1801 : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1802 : 		_Get_data()._Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1803 : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT
; _this$ = ecx

; 1790 : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1791 : 		return (_Get_data()._Myproxy);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data

; 1792 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 1776 : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1777 : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1778 : 		_Orphan_all();

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 1779 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	50		 push	 eax
  00051	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  0005a	83 c4 08	 add	 esp, 8

; 1780 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	50		 push	 eax
  00068	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00071	83 c4 08	 add	 esp, 8

; 1781 : 		_Myproxy() = 0;

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1782 : 		}

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	0f 1f 00	 npad	 3
$LN5@Free_proxy:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  000bc	eb ff ff ff	 DD	 -21			; ffffffebH
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  000c8	5f		 DB	 95			; 0000005fH
  000c9	50		 DB	 80			; 00000050H
  000ca	72		 DB	 114			; 00000072H
  000cb	6f		 DB	 111			; 0000006fH
  000cc	78		 DB	 120			; 00000078H
  000cd	79		 DB	 121			; 00000079H
  000ce	5f		 DB	 95			; 0000005fH
  000cf	61		 DB	 97			; 00000061H
  000d0	6c		 DB	 108			; 0000006cH
  000d1	6c		 DB	 108			; 0000006cH
  000d2	6f		 DB	 111			; 0000006fH
  000d3	63		 DB	 99			; 00000063H
  000d4	61		 DB	 97			; 00000061H
  000d5	74		 DB	 116			; 00000074H
  000d6	6f		 DB	 111			; 0000006fH
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -232						; size = 8
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 1768 : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1769 : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1770 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0003e	6a 01		 push	 1
  00040	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00043	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f0		 mov	 esi, eax
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0005b	89 30		 mov	 DWORD PTR [eax], esi

; 1771 : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0005d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00063	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00068	50		 push	 eax
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	50		 push	 eax
  00074	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1772 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00080	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  0008e	83 c4 04	 add	 esp, 4
  00091	8b f0		 mov	 esi, eax
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0009b	8b 00		 mov	 eax, DWORD PTR [eax]
  0009d	89 30		 mov	 DWORD PTR [eax], esi

; 1773 : 		}

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
  000ce	66 90		 npad	 2
$LN5@Alloc_prox:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  000d8	eb ff ff ff	 DD	 -21			; ffffffebH
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  000e4	5f		 DB	 95			; 0000005fH
  000e5	50		 DB	 80			; 00000050H
  000e6	72		 DB	 114			; 00000072H
  000e7	6f		 DB	 111			; 0000006fH
  000e8	78		 DB	 120			; 00000078H
  000e9	79		 DB	 121			; 00000079H
  000ea	5f		 DB	 95			; 0000005fH
  000eb	61		 DB	 97			; 00000061H
  000ec	6c		 DB	 108			; 0000006cH
  000ed	6c		 DB	 108			; 0000006cH
  000ee	6f		 DB	 111			; 0000006fH
  000ef	63		 DB	 99			; 00000063H
  000f0	61		 DB	 97			; 00000061H
  000f1	74		 DB	 116			; 00000074H
  000f2	6f		 DB	 111			; 0000006fH
  000f3	72		 DB	 114			; 00000072H
  000f4	00		 DB	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1727 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1728 : 		_Free_proxy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 1729 : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1713 : 		{	// default construct allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1712 : 		: _Mypair(_Zero_then_variadic_args_t())

  00042	0f b6 85 23 ff
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  00049	50		 push	 eax
  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1714 : 		_Alloc_proxy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 1715 : 		}

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1640 : 			{	// user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1641 : 			}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1635 : 		_Bxty()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1636 : 			{	// user-provided, for fancy pointers
; 1637 : 			}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1603 : 		{	// returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1604 : 		return (_BUF_SIZE <= _Myres);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0002a	72 0c		 jb	 SHORT $LN3@Large_stri
  0002c	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  00036	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00038	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00042	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 1605 : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1592 : 		{	// determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1593 : 		const value_type * _Result = _Bx._Buf;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4
  00029	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 1594 : 		if (_Large_string_engaged())

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00034	0f b6 c0	 movzx	 eax, al
  00037	85 c0		 test	 eax, eax
  00039	74 12		 je	 SHORT $LN2@Myptr

; 1595 : 			{
; 1596 : 			_Result = _Unfancy(_Bx._Ptr);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1597 : 			}
; 1598 : 
; 1599 : 		return (_Result);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1600 : 		}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1581 : 		{	// determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1582 : 		value_type * _Result = _Bx._Buf;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4
  00029	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 1583 : 		if (_Large_string_engaged())

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00034	0f b6 c0	 movzx	 eax, al
  00037	85 c0		 test	 eax, eax
  00039	74 12		 je	 SHORT $LN2@Myptr

; 1584 : 			{
; 1585 : 			_Result = _Unfancy(_Bx._Ptr);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1586 : 			}
; 1587 : 
; 1588 : 		return (_Result);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1589 : 		}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1565 : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1562 : 		: _Bx(),

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 1563 : 		_Mysize(0),

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1564 : 		_Myres(0)

  00066	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00069	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1566 : 		}

  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 955  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 956  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  0001e	83 c8 ff	 or	 eax, -1

; 957  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 1054 : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1055 : 		return (static_cast<_Ty *>(_Allocate(_Count, sizeof(_Ty), alignof(_Ty))));

  00023	6a 01		 push	 1
  00025	6a 01		 push	 1
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Allocate@U?$_Default_allocate_traits@$00@std@@@std@@YAPAXIII@Z ; std::_Allocate<std::_Default_allocate_traits<1> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 1049 : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1050 : 		_Deallocate(_Ptr, _Count, sizeof(_Ty), alignof(_Ty));

  00023	6a 01		 push	 1
  00025	6a 01		 push	 1
  00027	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXIII@Z ; std::_Deallocate
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 1051 : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 1038 : 	allocator() _NOEXCEPT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1039 : 		{	// construct default allocator (do nothing)
; 1040 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1258 : 	{	// convert size_t to size_t, unchanged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1259 : 	return (_Len);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1260 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXIII@Z
_TEXT	SEGMENT
__Ptr_container$1 = -44					; size = 4
__Ptr_ptr$2 = -32					; size = 4
__Ptr_user$3 = -20					; size = 4
__Allocated_size$4 = -8					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
__Align$ = 20						; size = 4
?_Deallocate@std@@YAXPAXIII@Z PROC			; std::_Deallocate, COMDAT

; 143  : 	{	// deallocate storage for _Count elements of size _Sz with alignment _Align

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 144  : 	(void)_Align;
; 145  : 
; 146  : 	if (_Count > static_cast<size_t>(-1) / _Sz)

  0001e	83 c8 ff	 or	 eax, -1
  00021	33 d2		 xor	 edx, edx
  00023	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  00026	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  00029	76 0a		 jbe	 SHORT $LN2@Deallocate

; 147  : 		{
; 148  : 		goto _Invalid_parameter; // TRANSITION, VSO#359498

  0002b	e9 b7 00 00 00	 jmp	 $_Invalid_parameter$18
  00030	e9 b2 00 00 00	 jmp	 $_Invalid_parameter$18
$LN2@Deallocate:

; 149  : 		}
; 150  : 
; 151  : 		{
; 152  : 		size_t _Allocated_size = _Count * _Sz;

  00035	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00038	0f af 45 10	 imul	 eax, DWORD PTR __Sz$[ebp]
  0003c	89 45 f8	 mov	 DWORD PTR __Allocated_size$4[ebp], eax

; 153  : 
; 154  : #if defined(_M_IX86) || defined(_M_X64)
; 155  : 		// Boost the alignment of big allocations to help autovectorization.
; 156  :  #pragma warning(push)
; 157  :  #pragma warning(disable: 4127) // conditional expression is constant
; 158  :  #pragma warning(disable: 6326) // Potential comparison of a constant with another constant
; 159  : 		if (_Allocated_size >= _Big_allocation_threshold)

  0003f	81 7d f8 00 10
	00 00		 cmp	 DWORD PTR __Allocated_size$4[ebp], 4096 ; 00001000H
  00046	0f 82 89 00 00
	00		 jb	 $LN4@Deallocate

; 160  : 			{
; 161  :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 162  : 			if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 163  : 				{	// allocation will use aligned new
; 164  : 				if /* constexpr */ (__STDCPP_DEFAULT_NEW_ALIGNMENT__ * 2 >= _Big_allocation_alignment)
; 165  : 					{	// There are no valid alignments between __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 166  : 						// and _Big_allocation_alignment; the below conditional is dead.
; 167  : 					}
; 168  : 				else
; 169  : 					{
; 170  : 					if (_Align < _Big_allocation_alignment)
; 171  : 						{	// boost alignment
; 172  : 						_Align = _Big_allocation_alignment;
; 173  : 						}
; 174  : 					}
; 175  : 				}
; 176  : 			else
; 177  :  #endif /* _HAS_ALIGNED_NEW */
; 178  : 				{	// allocation will use unaligned new; boost alignment manually
; 179  : 				if (_Allocated_size + _Non_user_size <= _Allocated_size)

  0004c	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  0004f	83 c0 27	 add	 eax, 39			; 00000027H
  00052	3b 45 f8	 cmp	 eax, DWORD PTR __Allocated_size$4[ebp]
  00055	77 0a		 ja	 SHORT $LN5@Deallocate

; 180  : 					{
; 181  : 					goto _Invalid_parameter;

  00057	e9 8b 00 00 00	 jmp	 $_Invalid_parameter$18
  0005c	e9 86 00 00 00	 jmp	 $_Invalid_parameter$18
$LN5@Deallocate:

; 182  : 					}
; 183  : 				_Allocated_size += _Non_user_size;

  00061	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  00064	83 c0 27	 add	 eax, 39			; 00000027H
  00067	89 45 f8	 mov	 DWORD PTR __Allocated_size$4[ebp], eax

; 184  : 
; 185  : 				const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

  0006a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006d	89 45 ec	 mov	 DWORD PTR __Ptr_user$3[ebp], eax

; 186  : 				if ((_Ptr_user & (_Big_allocation_alignment - 1)) != 0)

  00070	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  00073	83 e0 1f	 and	 eax, 31			; 0000001fH
  00076	74 04		 je	 SHORT $LN7@Deallocate

; 187  : 					{
; 188  : 					goto _Invalid_parameter;

  00078	eb 6d		 jmp	 SHORT $_Invalid_parameter$18
  0007a	eb 6b		 jmp	 SHORT $_Invalid_parameter$18
$LN7@Deallocate:

; 189  : 					}
; 190  : 
; 191  : 				const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

  0007c	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  0007f	83 e8 04	 sub	 eax, 4
  00082	89 45 e0	 mov	 DWORD PTR __Ptr_ptr$2[ebp], eax

; 192  : 				const uintptr_t _Ptr_container =
; 193  : 					*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00085	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_ptr$2[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	89 4d d4	 mov	 DWORD PTR __Ptr_container$1[ebp], ecx

; 194  : 
; 195  :   #ifdef _DEBUG
; 196  : 				// If the following asserts, it likely means that we are performing
; 197  : 				// an aligned delete on memory coming from an unaligned allocation.
; 198  : 				if (reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] != _Big_allocation_sentinel)

  0008d	b8 04 00 00 00	 mov	 eax, 4
  00092	6b c8 ff	 imul	 ecx, eax, -1
  00095	8b 55 e0	 mov	 edx, DWORD PTR __Ptr_ptr$2[ebp]
  00098	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  0009f	74 04		 je	 SHORT $LN9@Deallocate

; 199  : 					{
; 200  : 					goto _Invalid_parameter;

  000a1	eb 44		 jmp	 SHORT $_Invalid_parameter$18
  000a3	eb 42		 jmp	 SHORT $_Invalid_parameter$18
$LN9@Deallocate:

; 201  : 					}
; 202  :   #endif /* _DEBUG */
; 203  : 
; 204  : 				// Extra paranoia on aligned allocation/deallocation
; 205  : 				if (_Ptr_container >= _Ptr_user)

  000a5	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  000a8	3b 45 ec	 cmp	 eax, DWORD PTR __Ptr_user$3[ebp]
  000ab	72 04		 jb	 SHORT $LN11@Deallocate

; 206  : 					{
; 207  : 					goto _Invalid_parameter;

  000ad	eb 38		 jmp	 SHORT $_Invalid_parameter$18
  000af	eb 36		 jmp	 SHORT $_Invalid_parameter$18
$LN11@Deallocate:

; 208  : 					}
; 209  : 
; 210  :   #ifdef _DEBUG
; 211  : 				if (2 * sizeof(void *) > _Ptr_user - _Ptr_container)

  000b1	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  000b4	2b 45 d4	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  000b7	83 f8 08	 cmp	 eax, 8
  000ba	73 04		 jae	 SHORT $LN13@Deallocate

; 212  :   #else /* _DEBUG */
; 213  : 				if (sizeof(void *) > _Ptr_user - _Ptr_container)
; 214  :   #endif /* _DEBUG */
; 215  : 					{
; 216  : 					goto _Invalid_parameter;

  000bc	eb 29		 jmp	 SHORT $_Invalid_parameter$18
  000be	eb 27		 jmp	 SHORT $_Invalid_parameter$18
$LN13@Deallocate:

; 217  : 					}
; 218  : 
; 219  : 				if (_Ptr_user - _Ptr_container > _Non_user_size)

  000c0	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  000c3	2b 45 d4	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  000c6	83 f8 27	 cmp	 eax, 39			; 00000027H
  000c9	76 04		 jbe	 SHORT $LN15@Deallocate

; 220  : 					{
; 221  : 					goto _Invalid_parameter;

  000cb	eb 1a		 jmp	 SHORT $_Invalid_parameter$18
  000cd	eb 18		 jmp	 SHORT $_Invalid_parameter$18
$LN15@Deallocate:

; 222  : 					}
; 223  : 
; 224  : 				_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000cf	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  000d2	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
$LN4@Deallocate:

; 225  : 				}
; 226  : 			}
; 227  :  #pragma warning(pop)
; 228  : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 229  : 
; 230  :  #if _HAS_ALIGNED_NEW // TRANSITION, if constexpr
; 231  : 		if (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
; 232  : 			{
; 233  : 			::operator delete(_Ptr, _Allocated_size, align_val_t{_Align});
; 234  : 			}
; 235  : 		else
; 236  :  #endif /* _HAS_ALIGNED_NEW */
; 237  : 			{
; 238  : 			::operator delete(_Ptr, _Allocated_size);

  000d5	8b 45 f8	 mov	 eax, DWORD PTR __Allocated_size$4[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e2	83 c4 08	 add	 esp, 8

; 239  : 			}
; 240  : 		return;

  000e5	eb 2c		 jmp	 SHORT $LN1@Deallocate
$_Invalid_parameter$18:

; 241  : 		}
; 242  : 
; 243  : _Invalid_parameter:
; 244  : 	_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

  000e7	8b f4		 mov	 esi, esp
  000e9	6a 00		 push	 0
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPAXIII@Z@4JA
  000f0	83 c0 65	 add	 eax, 101		; 00000065H
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@MDINKKAA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00109	83 c4 14	 add	 esp, 20			; 00000014H
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Deallocate:

; 245  : 	}

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0011c	3b ec		 cmp	 ebp, esp
  0011e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
?_Deallocate@std@@YAXPAXIII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 223  : 		{	// cut ties with parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 224  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 225  : 		if (_Myproxy != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 38 00	 cmp	 DWORD PTR [eax], 0
  00048	0f 84 85 00 00
	00		 je	 $LN6@Orphan_me

; 226  : 			{	// adopted, remove self from list
; 227  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  0004e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	83 c1 04	 add	 ecx, 4
  00056	89 4d e0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
$LN2@Orphan_me:

; 228  : 			while (*_Pnext != 0 && *_Pnext != this)

  00059	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0005c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005f	74 17		 je	 SHORT $LN3@Orphan_me
  00061	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	3b 4d ec	 cmp	 ecx, DWORD PTR _this$[ebp]
  00069	74 0d		 je	 SHORT $LN3@Orphan_me

; 229  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  0006b	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	83 c1 04	 add	 ecx, 4
  00073	89 4d e0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  00076	eb e1		 jmp	 SHORT $LN2@Orphan_me
$LN3@Orphan_me:

; 230  : 
; 231  : 			if (*_Pnext == 0)

  00078	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0007b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007e	75 3f		 jne	 SHORT $LN5@Orphan_me

; 232  : 				{
; 233  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

  00080	68 e9 00 00 00	 push	 233			; 000000e9H
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
  0008f	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	8b f4		 mov	 esi, esp
  00099	6a 00		 push	 0
  0009b	68 e9 00 00 00	 push	 233			; 000000e9H
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@DOGGHPKD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b5	83 c4 14	 add	 esp, 20			; 00000014H
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Orphan_me:

; 234  : 				}
; 235  : 
; 236  : 			*_Pnext = _Mynextiter;

  000bf	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  000c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c8	89 10		 mov	 DWORD PTR [eax], edx

; 237  : 			_Myproxy = 0;

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN6@Orphan_me:

; 238  : 			}
; 239  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 240  : 		}

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 218  : 		{	// get address of remaining iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 219  : 		return (&_Mynextiter);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4

; 220  : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 213  : 		{	// get owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 214  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	75 0c		 jne	 SHORT $LN3@Getcont
  0002b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  00035	eb 0d		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN4@Getcont:
  00044	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 215  : 		}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 208  : 		{	// disown owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 209  : 		_Myproxy = 0;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 210  : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -60						; size = 4
__Parent_proxy$3 = -48					; size = 4
__Lock$4 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 179  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00021	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 180  : 		if (_Parent == 0)

  00045	83 7d 08 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  00049	75 30		 jne	 SHORT $LN2@Adopt

; 181  : 			{	// no future parent, just disown current parent
; 182  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 183  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	8b f4		 mov	 esi, esp
  0004d	6a 03		 push	 3
  0004f	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 184  : 			_Orphan_me();

  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 185  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 186  : 			}

  00067	8b f4		 mov	 esi, esp
  00069	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 187  : 		else

  00079	eb 5d		 jmp	 SHORT $LN5@Adopt
$LN2@Adopt:

; 188  : 			{	// have a parent, do adoption
; 189  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	89 4d d0	 mov	 DWORD PTR __Parent_proxy$3[ebp], ecx

; 190  : 
; 191  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 192  : 			if (_Myproxy != _Parent_proxy)

  00083	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	3b 4d d0	 cmp	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0008b	74 4b		 je	 SHORT $LN5@Adopt

; 193  : 				{	// change parentage
; 194  : 				_Lockit _Lock(_LOCK_DEBUG);

  0008d	8b f4		 mov	 esi, esp
  0008f	6a 03		 push	 3
  00091	8d 4d c4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 195  : 				_Orphan_me();

  000a1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 196  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  000a9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 4d d0	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 197  : 				_Parent_proxy->_Myfirstiter = this;

  000b5	8b 45 d0	 mov	 eax, DWORD PTR __Parent_proxy$3[ebp]
  000b8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 198  : 				_Myproxy = _Parent_proxy;

  000be	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	8b 4d d0	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  000c4	89 08		 mov	 DWORD PTR [eax], ecx

; 199  : 				}

  000c6	8b f4		 mov	 esi, esp
  000c8	8d 4d c4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Adopt:

; 200  : 
; 201  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 202  : 			_Myproxy = _Parent_proxy;
; 203  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 204  : 			}
; 205  : 		}

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Adopt
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f3	59		 pop	 ecx
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 04 00	 ret	 4
$LN10@Adopt:
  00114	02 00 00 00	 DD	 2
  00118	00 00 00 00	 DD	 $LN9@Adopt
$LN9@Adopt:
  0011c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00120	04 00 00 00	 DD	 4
  00124	00 00 00 00	 DD	 $LN6@Adopt
  00128	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0012c	04 00 00 00	 DD	 4
  00130	00 00 00 00	 DD	 $LN7@Adopt
$LN7@Adopt:
  00134	5f		 DB	 95			; 0000005fH
  00135	4c		 DB	 76			; 0000004cH
  00136	6f		 DB	 111			; 0000006fH
  00137	63		 DB	 99			; 00000063H
  00138	6b		 DB	 107			; 0000006bH
  00139	00		 DB	 0
$LN6@Adopt:
  0013a	5f		 DB	 95			; 0000005fH
  0013b	4c		 DB	 76			; 0000004cH
  0013c	6f		 DB	 111			; 0000006fH
  0013d	63		 DB	 99			; 00000063H
  0013e	6b		 DB	 107			; 0000006bH
  0013f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 171  : 		{	// destroy the iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 172  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 173  : 		_Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 174  : 		_Orphan_me();

  00059	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 175  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 176  : 		}

  00061	8b f4		 mov	 esi, esp
  00063	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	52		 push	 edx
  00074	8b cd		 mov	 ecx, ebp
  00076	50		 push	 eax
  00077	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Iterator_b
  0007d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00082	58		 pop	 eax
  00083	5a		 pop	 edx
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
  000ad	0f 1f 00	 npad	 3
$LN6@Iterator_b:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN5@Iterator_b
$LN5@Iterator_b:
  000b8	dc ff ff ff	 DD	 -36			; ffffffdcH
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN3@Iterator_b
$LN3@Iterator_b:
  000c4	5f		 DB	 95			; 0000005fH
  000c5	4c		 DB	 76			; 0000004cH
  000c6	6f		 DB	 111			; 0000006fH
  000c7	63		 DB	 99			; 00000063H
  000c8	6b		 DB	 107			; 0000006bH
  000c9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 154  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 155  : 		if (_Myproxy == _Right._Myproxy)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0004f	75 02		 jne	 SHORT $LN2@operator
  00051	eb 48		 jmp	 SHORT $LN3@operator
$LN2@operator:

; 156  : 			;
; 157  : 		else if (_Right._Myproxy != 0)

  00053	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00056	83 38 00	 cmp	 DWORD PTR [eax], 0
  00059	74 12		 je	 SHORT $LN4@operator

; 158  : 			_Adopt(_Right._Myproxy->_Mycont);

  0005b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	8b 11		 mov	 edx, DWORD PTR [ecx]
  00062	52		 push	 edx
  00063	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 159  : 		else

  0006b	eb 2e		 jmp	 SHORT $LN3@operator
$LN4@operator:

; 160  : 			{	// becoming invalid, disown current parent
; 161  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 162  : 			_Lockit _Lock(_LOCK_DEBUG);

  0006d	8b f4		 mov	 esi, esp
  0006f	6a 03		 push	 3
  00071	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  : 			_Orphan_me();

  00081	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 165  : 			}

  00089	8b f4		 mov	 esi, esp
  0008b	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:

; 166  : 
; 167  : 		return (*this);

  0009b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]

; 168  : 		}

  0009e	52		 push	 edx
  0009f	8b cd		 mov	 ecx, ebp
  000a1	50		 push	 eax
  000a2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@operator
  000a8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ad	58		 pop	 eax
  000ae	5a		 pop	 edx
  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c0	33 cd		 xor	 ecx, ebp
  000c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c7	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 04 00	 ret	 4
  000da	66 90		 npad	 2
$LN10@operator:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN9@operator
$LN9@operator:
  000e4	dc ff ff ff	 DD	 -36			; ffffffdcH
  000e8	04 00 00 00	 DD	 4
  000ec	00 00 00 00	 DD	 $LN7@operator
$LN7@operator:
  000f0	5f		 DB	 95			; 0000005fH
  000f1	4c		 DB	 76			; 0000004cH
  000f2	6f		 DB	 111			; 0000006fH
  000f3	63		 DB	 99			; 00000063H
  000f4	6b		 DB	 107			; 0000006bH
  000f5	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 149  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 148  : 		: _Myproxy(0), _Mynextiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 150  : 		*this = _Right;

  00036	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 151  : 		}

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 144  : 		{	// construct orphaned iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 		: _Myproxy(0), _Mynextiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 145  : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -48						; size = 4
__Lock$3 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 248  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 249  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 250  : 	if (_Myproxy != 0)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004b	74 61		 je	 SHORT $LN6@Orphan_all

; 251  : 		{	// proxy allocated, drain it
; 252  : 		_Lockit _Lock(_LOCK_DEBUG);

  0004d	8b f4		 mov	 esi, esp
  0004f	6a 03		 push	 3
  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 253  : 
; 254  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00061	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	83 c1 04	 add	 ecx, 4
  00069	89 4d d0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  0006c	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 255  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

  0006e	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 55 d0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00076	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00079	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007b	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0007e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00081	74 0d		 je	 SHORT $LN3@Orphan_all

; 256  : 			(*_Pnext)->_Myproxy = 0;

  00083	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0008e	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 257  : 		_Myproxy->_Myfirstiter = 0;

  00090	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 258  : 		}

  0009c	8b f4		 mov	 esi, esp
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Orphan_all:

; 259  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 260  : 	}

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Orphan_all
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN10@Orphan_all:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN9@Orphan_all
$LN9@Orphan_all:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN7@Orphan_all
$LN7@Orphan_all:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	4c		 DB	 76			; 0000004cH
  000fe	6f		 DB	 111			; 0000006fH
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 129  : 		{	// get address of iterator chain

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 130  : 		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	75 0c		 jne	 SHORT $LN3@Getpfirst
  0002b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  00035	eb 0e		 jmp	 SHORT $LN4@Getpfirst
$LN3@Getpfirst:
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	83 c2 04	 add	 edx, 4
  0003f	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
  00045	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 131  : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 124  : 		{	// destroy the container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 125  : 		_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 126  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 110  : 		{	// construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 109  : 		: _Myproxy(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 111  : 		}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 98   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 97   : 		: _Mycont(0), _Myfirstiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 99   : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 84   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 476  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 477  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 478  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 466  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 467  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002a	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00034	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00036	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00040	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 468  : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 441  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 442  : 		_Left = _Right;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	88 10		 mov	 BYTE PTR [eax], dl

; 443  : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 430  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 431  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 410  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 411  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 404  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 405  : 		return (_CSTD strlen(_First));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _strlen
  00027	83 c4 04	 add	 esp, 4

; 406  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 184  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 185  :         return;
; 186  :     }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 178  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 179  :         (void)_Size;
; 180  :         return _Where;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 181  :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\type_traits
;	COMDAT ?_Hash_bytes@std@@YAIPBEI@Z
_TEXT	SEGMENT
__Next$1 = -44						; size = 4
__Val$ = -32						; size = 4
__FNV_prime$ = -20					; size = 4
__FNV_offset_basis$ = -8				; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
?_Hash_bytes@std@@YAIPBEI@Z PROC			; std::_Hash_bytes, COMDAT

; 2306 : 	{	// FNV-1a hash function for bytes in [_First, _First + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2307 :  #if defined(_WIN64)
; 2308 : 	static_assert(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
; 2309 : 	const size_t _FNV_offset_basis = 14695981039346656037ULL;
; 2310 : 	const size_t _FNV_prime = 1099511628211ULL;
; 2311 : 
; 2312 :  #else /* defined(_WIN64) */
; 2313 : 	static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
; 2314 : 	const size_t _FNV_offset_basis = 2166136261U;

  0001e	c7 45 f8 c5 9d
	1c 81		 mov	 DWORD PTR __FNV_offset_basis$[ebp], -2128831035 ; 811c9dc5H

; 2315 : 	const size_t _FNV_prime = 16777619U;

  00025	c7 45 ec 93 01
	00 01		 mov	 DWORD PTR __FNV_prime$[ebp], 16777619 ; 01000193H

; 2316 :  #endif /* defined(_WIN64) */
; 2317 : 
; 2318 : 	size_t _Val = _FNV_offset_basis;

  0002c	c7 45 e0 c5 9d
	1c 81		 mov	 DWORD PTR __Val$[ebp], -2128831035 ; 811c9dc5H

; 2319 : 	for (size_t _Next = 0; _Next < _Count; ++_Next)

  00033	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __Next$1[ebp], 0
  0003a	eb 09		 jmp	 SHORT $LN4@Hash_bytes
$LN2@Hash_bytes:
  0003c	8b 45 d4	 mov	 eax, DWORD PTR __Next$1[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 d4	 mov	 DWORD PTR __Next$1[ebp], eax
$LN4@Hash_bytes:
  00045	8b 45 d4	 mov	 eax, DWORD PTR __Next$1[ebp]
  00048	3b 45 0c	 cmp	 eax, DWORD PTR __Count$[ebp]
  0004b	73 1b		 jae	 SHORT $LN3@Hash_bytes

; 2320 : 		{	// fold in another byte
; 2321 : 		_Val ^= (size_t)_First[_Next];

  0004d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00050	03 45 d4	 add	 eax, DWORD PTR __Next$1[ebp]
  00053	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00056	33 4d e0	 xor	 ecx, DWORD PTR __Val$[ebp]
  00059	89 4d e0	 mov	 DWORD PTR __Val$[ebp], ecx

; 2322 : 		_Val *= _FNV_prime;

  0005c	69 45 e0 93 01
	00 01		 imul	 eax, DWORD PTR __Val$[ebp], 16777619
  00063	89 45 e0	 mov	 DWORD PTR __Val$[ebp], eax

; 2323 : 		}

  00066	eb d4		 jmp	 SHORT $LN2@Hash_bytes
$LN3@Hash_bytes:

; 2324 : 	return (_Val);

  00068	8b 45 e0	 mov	 eax, DWORD PTR __Val$[ebp]

; 2325 : 	}

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?_Hash_bytes@std@@YAIPBEI@Z ENDP			; std::_Hash_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.12.25827\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 682  : 		{	// return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 683  : 		return (INT_MAX);

  0001e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 684  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\repos\galaxy\galaxy\engine\shaders\shader.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
